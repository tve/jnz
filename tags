!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$GPRMC	embello/flib/uart/gps.fs	/^: $GPRMC ( c-addr -- c-addr len )$/;"	d
$GPRMC	flib/./uart/gps.fs	/^: $GPRMC ( c-addr -- c-addr len )$/;"	d
$GPRMC	flib/uart/gps.fs	/^: $GPRMC ( c-addr -- c-addr len )$/;"	d
'f	embello/flib/stm32f1/io.fs	/^: 'f ( -- flags ) token find nip ;$/;"	d
'f	flib/./stm32f1/io.fs	/^: 'f ( -- flags ) token find nip ;$/;"	d
'f	flib/stm32f1/io.fs	/^: 'f ( -- flags ) token find nip ;$/;"	d
(io!)	embello/flib/stm32f1/io.fs	/^: (io!)  ( f pin -- pin* addr )$/;"	d
(io!)	flib/./stm32f1/io.fs	/^: (io!)  ( f pin -- pin* addr )$/;"	d
(io!)	flib/stm32f1/io.fs	/^: (io!)  ( f pin -- pin* addr )$/;"	d
(io@)	embello/flib/stm32f1/io.fs	/^: (io@)  (   pin -- pin* addr )$/;"	d
(io@)	flib/./stm32f1/io.fs	/^: (io@)  (   pin -- pin* addr )$/;"	d
(io@)	flib/stm32f1/io.fs	/^: (io@)  (   pin -- pin* addr )$/;"	d
(ioc!)	embello/flib/stm32f1/io.fs	/^: (ioc!) (   pin -- pin* addr )$/;"	d
(ioc!)	flib/./stm32f1/io.fs	/^: (ioc!) (   pin -- pin* addr )$/;"	d
(ioc!)	flib/stm32f1/io.fs	/^: (ioc!) (   pin -- pin* addr )$/;"	d
(ios!)	embello/flib/stm32f1/io.fs	/^: (ios!) (   pin -- pin* addr )$/;"	d
(ios!)	flib/./stm32f1/io.fs	/^: (ios!) (   pin -- pin* addr )$/;"	d
(ios!)	flib/stm32f1/io.fs	/^: (ios!) (   pin -- pin* addr )$/;"	d
(iox!)	embello/flib/stm32f1/io.fs	/^: (iox!) (   pin -- pin* addr )$/;"	d
(iox!)	flib/./stm32f1/io.fs	/^: (iox!) (   pin -- pin* addr )$/;"	d
(iox!)	flib/stm32f1/io.fs	/^: (iox!) (   pin -- pin* addr )$/;"	d
(pause)	embello/flib/mecrisp/multi.fs	/^: (pause) ( stacks fly around )$/;"	d
(pause)	flib/./mecrisp/multi.fs	/^: (pause) ( stacks fly around )$/;"	d
(pause)	flib/mecrisp/multi.fs	/^: (pause) ( stacks fly around )$/;"	d
*++	embello/flib/any/varint.fs	/^: *++ ( addr -- c )  dup @ c@  1 rot +! ;$/;"	d
*++	flib/./any/varint.fs	/^: *++ ( addr -- c )  dup @ c@  1 rot +! ;$/;"	d
*++	flib/any/varint.fs	/^: *++ ( addr -- c )  dup @ c@  1 rot +! ;$/;"	d
*>>	embello/bme/dev.fs	/^: *>> ( n1 n2 u -- n ) >r * r> arshift ;  \\ (n1 * n2) >> u$/;"	d
*>>	embello/flib/i2c/bme280.fs	/^: *>> ( n1 n2 u -- n ) >r * r> arshift ;  \\ (n1 * n2) >> u$/;"	d
*>>	flib/./i2c/bme280.fs	/^: *>> ( n1 n2 u -- n ) >r * r> arshift ;  \\ (n1 * n2) >> u$/;"	d
*>>	flib/i2c/bme280.fs	/^: *>> ( n1 n2 u -- n ) >r * r> arshift ;  \\ (n1 * n2) >> u$/;"	d
*lps	tlib/lpsleep.fs	/^' low-power-sleep-simple variable *lps  \\ pointer to low power sleep$/;"	d
++ticks	central/x-clock.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	embello/flib/stm32f1/clock.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	embello/flib/stm32f1/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	embello/flib/stm32f4/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	embello/flib/stm32f7/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	embello/flib/stm32l0/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	embello/sic/main.fs	/^: ++ticks ( -- ) ++ticks 1mshandler ;$/;"	d
++ticks	flib/./stm32f1/clock.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/./stm32f1/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/./stm32f4/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/./stm32f7/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/./stm32l0/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/stm32f1/clock.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/stm32f1/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/stm32f4/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/stm32f7/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
++ticks	flib/stm32l0/hal.fs	/^: ++ticks ( -- ) 1 ticks +! ;  \\ for use as systick irq handler$/;"	d
+pkt	embello/flib/any/varint.fs	/^: +pkt ( n -- )  \\ append 32-bit signed value to packet$/;"	d
+pkt	flib/./any/varint.fs	/^: +pkt ( n -- )  \\ append 32-bit signed value to packet$/;"	d
+pkt	flib/any/varint.fs	/^: +pkt ( n -- )  \\ append 32-bit signed value to packet$/;"	d
+spi	embello/flib/any/spi-bb.fs	/^: +spi ( -- ) ssel @ ioc! ;  \\ select SPI$/;"	d
+spi	embello/flib/stm32f1/spi.fs	/^: +spi ( -- ) ssel @ ioc! ;  \\ select SPI$/;"	d
+spi	embello/flib/stm32l0/spi.fs	/^: +spi ( -- ) $10000 ssel.bit @ lshift ssel.addr @ ! inline ;  \\ select SPI$/;"	d
+spi	flib/./any/spi-bb.fs	/^: +spi ( -- ) ssel @ ioc! ;  \\ select SPI$/;"	d
+spi	flib/./stm32f1/spi.fs	/^: +spi ( -- ) ssel @ ioc! ;  \\ select SPI$/;"	d
+spi	flib/./stm32l0/spi.fs	/^: +spi ( -- ) $10000 ssel.bit @ lshift ssel.addr @ ! inline ;  \\ select SPI$/;"	d
+spi	flib/any/spi-bb.fs	/^: +spi ( -- ) ssel @ ioc! ;  \\ select SPI$/;"	d
+spi	flib/stm32f1/spi.fs	/^: +spi ( -- ) ssel @ ioc! ;  \\ select SPI$/;"	d
+spi	flib/stm32l0/spi.fs	/^: +spi ( -- ) $10000 ssel.bit @ lshift ssel.addr @ ! inline ;  \\ select SPI$/;"	d
+spi	tracker/speed.fs	/^: +spi ( -- ) $10000 spi.bit @ lshift spi.addr @ ! inline ;  \\ select SPI$/;"	d
+spi2	embello/flib/stm32f1/spi2.fs	/^: +spi2 ( -- ) ssel2 @ ioc! ;  \\ select SPI$/;"	d
+spi2	flib/./stm32f1/spi2.fs	/^: +spi2 ( -- ) ssel2 @ ioc! ;  \\ select SPI$/;"	d
+spi2	flib/stm32f1/spi2.fs	/^: +spi2 ( -- ) ssel2 @ ioc! ;  \\ select SPI$/;"	d
-jtag	central/board.fs	/^: -jtag ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
-spi	embello/flib/any/spi-bb.fs	/^: -spi ( -- ) ssel @ ios! ;  \\ deselect SPI$/;"	d
-spi	embello/flib/stm32f1/spi.fs	/^: -spi ( -- ) ssel @ ios! ;  \\ deselect SPI$/;"	d
-spi	embello/flib/stm32l0/spi.fs	/^: -spi ( -- )      1 ssel.bit @ lshift ssel.addr @ ! inline ;  \\ deselect SPI$/;"	d
-spi	flib/./any/spi-bb.fs	/^: -spi ( -- ) ssel @ ios! ;  \\ deselect SPI$/;"	d
-spi	flib/./stm32f1/spi.fs	/^: -spi ( -- ) ssel @ ios! ;  \\ deselect SPI$/;"	d
-spi	flib/./stm32l0/spi.fs	/^: -spi ( -- )      1 ssel.bit @ lshift ssel.addr @ ! inline ;  \\ deselect SPI$/;"	d
-spi	flib/any/spi-bb.fs	/^: -spi ( -- ) ssel @ ios! ;  \\ deselect SPI$/;"	d
-spi	flib/stm32f1/spi.fs	/^: -spi ( -- ) ssel @ ios! ;  \\ deselect SPI$/;"	d
-spi	flib/stm32l0/spi.fs	/^: -spi ( -- )      1 ssel.bit @ lshift ssel.addr @ ! inline ;  \\ deselect SPI$/;"	d
-spi	tracker/speed.fs	/^: -spi ( -- )      1 spi.bit @ lshift spi.addr @ ! inline ;  \\ deselect SPI$/;"	d
-spi2	embello/flib/stm32f1/spi2.fs	/^: -spi2 ( -- ) ssel2 @ ios! ;  \\ deselect SPI$/;"	d
-spi2	flib/./stm32f1/spi2.fs	/^: -spi2 ( -- ) ssel2 @ ios! ;  \\ deselect SPI$/;"	d
-spi2	flib/stm32f1/spi2.fs	/^: -spi2 ( -- ) ssel2 @ ios! ;  \\ deselect SPI$/;"	d
-swd	embello/sic/e-pinchange.fs	/^: -swd AFIO-MAPR @ %111 24 lshift bic 26 bit or AFIO-MAPR ! ;$/;"	d
-tft	embello/flib/spi/tft-ili9325.fs	/^: -tft ( -- ) -spi ;$/;"	d
-tft	flib/./spi/tft-ili9325.fs	/^: -tft ( -- ) -spi ;$/;"	d
-tft	flib/spi/tft-ili9325.fs	/^: -tft ( -- ) -spi ;$/;"	d
-usb-io	embello/suf/ex/old.fs	/^: -usb-io ( -- )$/;"	d
.00	embello/jz1/main.fs	/^: .00 ( n -- ) 0 swap 0,5 d+ 0,01 f* 2 f.n ;$/;"	d
.00	jz1/./main.fs	/^: .00 ( n -- ) 0 swap 0,5 d+ 0,01 f* 2 f.n ;$/;"	d
.00	jz1/main.fs	/^: .00 ( n -- ) 0 swap 0,5 d+ 0,01 f* 2 f.n ;$/;"	d
.2	embello/i2c/ex/bb.fs	/^: .2 ( n -- )  \\ display value with two decimal points$/;"	d
.2	embello/i2c/ex/bme.fs	/^: .2 ( n -- )  \\ display value with two decimal points$/;"	d
.2	oledtemp/e-oled.fs	/^: .2 ( n -- )  \\ display value with two decimal points$/;"	d
.baud	follower/hc05.fs	/^: .baud ( -- ) \\ return baud rate info$/;"	d
.centi	tlib/numprint.fs	/^: .centi ( n -- ) \\ print signed int divided by 100 with 2 decimals without space$/;"	d
.milli	tlib/numprint.fs	/^: .milli ( n -- ) \\ print signed int divided by 100 with 2 decimals without space$/;"	d
.n	embello/flib/spi/lora1276.fs	/^: .n ( n -- ) \\ print signed integer without following space$/;"	d
.n	flib/./spi/lora1276.fs	/^: .n ( n -- ) \\ print signed integer without following space$/;"	d
.n	flib/spi/lora1276.fs	/^: .n ( n -- ) \\ print signed integer without following space$/;"	d
.n	tlib/numprint.fs	/^: .n ( n -- ) \\ print signed integer without space$/;"	d
.string	follower/hc05.fs	/^: .string ( c-addr len -- ) \\ print string in "$/;"	d
.v	embello/flib/mecrisp/hexdump.fs	/^: .v ( ... -- ... )  \\ view stack, this is a slightly cleaner version of .s$/;"	d
.v	flib/./mecrisp/hexdump.fs	/^: .v ( ... -- ... )  \\ view stack, this is a slightly cleaner version of .s$/;"	d
.v	flib/mecrisp/hexdump.fs	/^: .v ( ... -- ... )  \\ view stack, this is a slightly cleaner version of .s$/;"	d
.v	follower/hc05-test.fs	/^: .v ( ... -- ... )  \\ view stack, this is a slightly cleaner version of .s$/;"	d
.version	follower/hc05.fs	/^: .version ( -- )$/;"	d
168MHz	embello/flib/stm32f4/hal.fs	/^: 168MHz ( -- )  \\ set the main clock to 168 MHz, keep baud rate at 115200$/;"	d
168MHz	embello/flib/stm32f7/hal.fs	/^: 168MHz ( -- )  \\ set the main clock to 168 MHz, keep baud rate at 115200$/;"	d
168MHz	flib/./stm32f4/hal.fs	/^: 168MHz ( -- )  \\ set the main clock to 168 MHz, keep baud rate at 115200$/;"	d
168MHz	flib/./stm32f7/hal.fs	/^: 168MHz ( -- )  \\ set the main clock to 168 MHz, keep baud rate at 115200$/;"	d
168MHz	flib/stm32f4/hal.fs	/^: 168MHz ( -- )  \\ set the main clock to 168 MHz, keep baud rate at 115200$/;"	d
168MHz	flib/stm32f7/hal.fs	/^: 168MHz ( -- )  \\ set the main clock to 168 MHz, keep baud rate at 115200$/;"	d
16MHz	embello/flib/stm32l0/hal.fs	/^: 16MHz ( -- )  \\ set the main clock to 16 MHz (HSI)$/;"	d
16MHz	embello/kb7/clock.fs	/^: 16MHz ( -- ) \\ set clock to default speed, using internal RC$/;"	d
16MHz	flib/./stm32l0/hal.fs	/^: 16MHz ( -- )  \\ set the main clock to 16 MHz (HSI)$/;"	d
16MHz	flib/stm32l0/hal.fs	/^: 16MHz ( -- )  \\ set the main clock to 16 MHz (HSI)$/;"	d
1mshandler	embello/sic/main.fs	/^: 1mshandler ( -- )$/;"	d
2.1MHz	embello/flib/stm32l0/hal.fs	/^: 2.1MHz ( -- )  \\ set the main clock to 2.1 MHz (MSI)$/;"	d
2.1MHz	flib/./stm32l0/hal.fs	/^: 2.1MHz ( -- )  \\ set the main clock to 2.1 MHz (MSI)$/;"	d
2.1MHz	flib/stm32l0/hal.fs	/^: 2.1MHz ( -- )  \\ set the main clock to 2.1 MHz (MSI)$/;"	d
216MHz	embello/kb7/clock.fs	/^: 216MHz ( -- ) \\ set clock to maximum speed$/;"	d
2dac!	embello/flib/stm32f1/dac.fs	/^: 2dac! ( u1 u2 -- )  \\ send values to each of the DACs$/;"	d
2dac!	flib/./stm32f1/dac.fs	/^: 2dac! ( u1 u2 -- )  \\ send values to each of the DACs$/;"	d
2dac!	flib/stm32f1/dac.fs	/^: 2dac! ( u1 u2 -- )  \\ send values to each of the DACs$/;"	d
2rshift	embello/flib/mecrisp/sine.fs	/^: 2rshift 0 ?do d2\/ loop ;$/;"	d
2rshift	flib/./mecrisp/sine.fs	/^: 2rshift 0 ?do d2\/ loop ;$/;"	d
2rshift	flib/mecrisp/sine.fs	/^: 2rshift 0 ?do d2\/ loop ;$/;"	d
2shuffle	embello/flib/mecrisp/sine.fs	/^: 2shuffle 2rot 2rot 2swap 2over ;$/;"	d
2shuffle	flib/./mecrisp/sine.fs	/^: 2shuffle 2rot 2rot 2swap 2over ;$/;"	d
2shuffle	flib/mecrisp/sine.fs	/^: 2shuffle 2rot 2rot 2swap 2over ;$/;"	d
32MHz	embello/flib/stm32l0/hal.fs	/^: 32MHz ( -- )  \\ set the main clock to 32 MHz, using the PLL$/;"	d
32MHz	flib/./stm32l0/hal.fs	/^: 32MHz ( -- )  \\ set the main clock to 32 MHz, using the PLL$/;"	d
32MHz	flib/stm32l0/hal.fs	/^: 32MHz ( -- )  \\ set the main clock to 32 MHz, using the PLL$/;"	d
3blinks	fanctrl/freeze.fs	/^: 3blinks 3 0 do led-on 300 ms led-off 300 ms loop ;$/;"	d
3blinks	follower/freeze.fs	/^: 3blinks 3 0 do led-on 300 ms led-off 300 ms loop ;$/;"	d
3blinks	oledtemp/freeze.fs	/^: 3blinks 3 0 do led-on 300 ms led-off 300 ms loop ;$/;"	d
3blinks	temp/freeze.fs	/^: 3blinks 3 0 do led-on 300 ms led-off 300 ms loop ;$/;"	d
3blinks	tracker/freeze.fs	/^: 3blinks 3 0 do led-on 300 ms led-off 300 ms loop ;$/;"	d
65KHz	embello/flib/stm32l0/hal.fs	/^: 65KHz ( -- )  \\ set main clock to 65 KHz, assuming it was set to 2.1 MHz$/;"	d
65KHz	flib/./stm32l0/hal.fs	/^: 65KHz ( -- )  \\ set main clock to 65 KHz, assuming it was set to 2.1 MHz$/;"	d
65KHz	flib/stm32l0/hal.fs	/^: 65KHz ( -- )  \\ set main clock to 65 KHz, assuming it was set to 2.1 MHz$/;"	d
72MHz	embello/flib/stm32f1/hal.fs	/^: 72MHz ( -- )  \\ set the main clock to 72 MHz, keep baud rate at 115200$/;"	d
72MHz	embello/suf/hal-stm32f1.fs	/^: 72MHz ( -- )  \\ set the main clock to 72 MHz$/;"	d
72MHz	flib/./stm32f1/hal.fs	/^: 72MHz ( -- )  \\ set the main clock to 72 MHz, keep baud rate at 115200$/;"	d
72MHz	flib/stm32f1/hal.fs	/^: 72MHz ( -- )  \\ set the main clock to 72 MHz, keep baud rate at 115200$/;"	d
8MHz	embello/flib/stm32f1/hal.fs	/^: 8MHz ( -- )  \\ set the main clock back to 8 MHz, keep baud rate at 115200$/;"	d
8MHz	flib/./stm32f1/hal.fs	/^: 8MHz ( -- )  \\ set the main clock back to 8 MHz, keep baud rate at 115200$/;"	d
8MHz	flib/stm32f1/hal.fs	/^: 8MHz ( -- )  \\ set the main clock back to 8 MHz, keep baud rate at 115200$/;"	d
;]	embello/flib/mecrisp/quotation.fs	/^: ;] ( -- )$/;"	d
;]	flib/./mecrisp/quotation.fs	/^: ;] ( -- )$/;"	d
;]	flib/mecrisp/quotation.fs	/^: ;] ( -- )$/;"	d
<pkt	embello/flib/any/varint.fs	/^: <pkt ( format -- )  \\ start collecting values$/;"	d
<pkt	embello/flib/uart/gps.fs	/^: <pkt ( -- ) pkt.buf pkt.ptr ! ;  \\ start collecting values for the packet$/;"	d
<pkt	fanctrl/fanctrl.fs	/^: <pkt ( -- ) pkt.buf pkt.ptr ! ;  \\ start collecting values for the packet$/;"	d
<pkt	flib/./any/varint.fs	/^: <pkt ( format -- )  \\ start collecting values$/;"	d
<pkt	flib/./uart/gps.fs	/^: <pkt ( -- ) pkt.buf pkt.ptr ! ;  \\ start collecting values for the packet$/;"	d
<pkt	flib/any/varint.fs	/^: <pkt ( format -- )  \\ start collecting values$/;"	d
<pkt	flib/uart/gps.fs	/^: <pkt ( -- ) pkt.buf pkt.ptr ! ;  \\ start collecting values for the packet$/;"	d
<pkt	temp/rftemp.fs	/^: <pkt ( -- ) pkt.buf pkt.ptr ! ;  \\ start collecting values for the packet$/;"	d
<v	embello/flib/any/varint.fs	/^: <v ( -- ) <# ;  \\ prepare variable output$/;"	d
<v	flib/./any/varint.fs	/^: <v ( -- ) <# ;  \\ prepare variable output$/;"	d
<v	flib/any/varint.fs	/^: <v ( -- ) <# ;  \\ prepare variable output$/;"	d
=always	embello/flib/any/testing.fs	/^: =always ( n1 n2 -- ) \\ assert that the two TOS values must be equal$/;"	d
=always	flib/./any/testing.fs	/^: =always ( n1 n2 -- ) \\ assert that the two TOS values must be equal$/;"	d
=always	flib/any/testing.fs	/^: =always ( n1 n2 -- ) \\ assert that the two TOS values must be equal$/;"	d
=always-fix	embello/flib/any/testing.fs	/^: =always-fix ( df1 df2 -- ) \\ assert that the two TOS fixed-point values must be equal$/;"	d
=always-fix	flib/./any/testing.fs	/^: =always-fix ( df1 df2 -- ) \\ assert that the two TOS fixed-point values must be equal$/;"	d
=always-fix	flib/any/testing.fs	/^: =always-fix ( df1 df2 -- ) \\ assert that the two TOS fixed-point values must be equal$/;"	d
>aes	embello/flib/any/aes128.fs	/^: >aes ( caddr -- ) \\ input data block (16-bytes)$/;"	d
>aes	flib/./any/aes128.fs	/^: >aes ( caddr -- ) \\ input data block (16-bytes)$/;"	d
>aes	flib/any/aes128.fs	/^: >aes ( caddr -- ) \\ input data block (16-bytes)$/;"	d
>centi	tlib/numprint.fs	/^: >centi ( n -- ) \\ convert signed int divided by 100 with 2 decimals to string$/;"	d
>gr	central/main.fs	/^: >gr ( addr u -- )$/;"	d
>gr	follower/follower.fs	/^: >gr ( c-addr len -- ) \\ print a string to graphics$/;"	d
>i2c	embello/flib/any/i2c-bb.fs	/^: >i2c ( u -- )  \\ send one byte out to the I2C bus$/;"	d
>i2c	embello/flib/stm32f1/i2c.fs	/^: >i2c  ( u -- ) \\ Sends a byte over i2c. Use after i2c-addr$/;"	d
>i2c	embello/flib/stm32l0/i2c.fs	/^: >i2c ( u -- )  i2c++ c! ;$/;"	d
>i2c	flib/./any/i2c-bb.fs	/^: >i2c ( u -- )  \\ send one byte out to the I2C bus$/;"	d
>i2c	flib/./stm32f1/i2c.fs	/^: >i2c  ( u -- ) \\ Sends a byte over i2c. Use after i2c-addr$/;"	d
>i2c	flib/./stm32l0/i2c.fs	/^: >i2c ( u -- )  i2c++ c! ;$/;"	d
>i2c	flib/any/i2c-bb.fs	/^: >i2c ( u -- )  \\ send one byte out to the I2C bus$/;"	d
>i2c	flib/stm32f1/i2c.fs	/^: >i2c  ( u -- ) \\ Sends a byte over i2c. Use after i2c-addr$/;"	d
>i2c	flib/stm32l0/i2c.fs	/^: >i2c ( u -- )  i2c++ c! ;$/;"	d
>mb	embello/ezr/pokemon.fs	/^: >mb ( u -- )  \\ set MBASE$/;"	d
>milli	tlib/numprint.fs	/^: >milli ( n -- ) \\ convert signed int divided by 100 with 2 decimals to string$/;"	d
>n	tlib/numprint.fs	/^: >n ( n -- ) \\ convert signed integer to string$/;"	d
>rf12	embello/flib/spi/rf12.fs	/^: >rf12 ( u -- ) >rf12> drop ;$/;"	d
>rf12	flib/./spi/rf12.fs	/^: >rf12 ( u -- ) >rf12> drop ;$/;"	d
>rf12	flib/spi/rf12.fs	/^: >rf12 ( u -- ) >rf12> drop ;$/;"	d
>ring	embello/flib/any/ring.fs	/^: >ring ( b ring -- )  \\ save byte to end of ring buffer$/;"	d
>ring	flib/./any/ring.fs	/^: >ring ( b ring -- )  \\ save byte to end of ring buffer$/;"	d
>ring	flib/any/ring.fs	/^: >ring ( b ring -- )  \\ save byte to end of ring buffer$/;"	d
>rssi	embello/jz3/ook/rssi.fs	/^: >rssi ( u -- ) \\ every ms collect statistics for RSSI$/;"	d
>rssi	jz3/./ook/rssi.fs	/^: >rssi ( u -- ) \\ every ms collect statistics for RSSI$/;"	d
>rssi	jz3/ook/rssi.fs	/^: >rssi ( u -- ) \\ every ms collect statistics for RSSI$/;"	d
>smem	embello/flib/spi/smem.fs	/^: >smem ( addr page )  \\ write 256 bytes to specified page$/;"	d
>smem	flib/./spi/smem.fs	/^: >smem ( addr page )  \\ write 256 bytes to specified page$/;"	d
>smem	flib/spi/smem.fs	/^: >smem ( addr page )  \\ write 256 bytes to specified page$/;"	d
>spi	embello/flib/any/spi-bb.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi	embello/flib/stm32f1/spi.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi	embello/flib/stm32l0/spi.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi	flib/./any/spi-bb.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi	flib/./stm32f1/spi.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi	flib/./stm32l0/spi.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi	flib/any/spi-bb.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi	flib/stm32f1/spi.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi	flib/stm32l0/spi.fs	/^: >spi ( c -- ) >spi> drop ;  \\ write byte to SPI$/;"	d
>spi2	embello/flib/stm32f1/spi2.fs	/^: >spi2 ( c -- ) >spi2> drop ;  \\ write byte to SPI$/;"	d
>spi2	embello/flib/stm32l0/spi.fs	/^: >spi2 ( c reg -- ) \\ write register$/;"	d
>spi2	embello/qld/dev.fs	/^: >spi2   >spi2> drop ;$/;"	d
>spi2	flib/./stm32f1/spi2.fs	/^: >spi2 ( c -- ) >spi2> drop ;  \\ write byte to SPI$/;"	d
>spi2	flib/./stm32l0/spi.fs	/^: >spi2 ( c reg -- ) \\ write register$/;"	d
>spi2	flib/stm32f1/spi2.fs	/^: >spi2 ( c -- ) >spi2> drop ;  \\ write byte to SPI$/;"	d
>spi2	flib/stm32l0/spi.fs	/^: >spi2 ( c reg -- ) \\ write register$/;"	d
>spi2	tracker/speed.fs	/^: >spi2 ( c reg -- ) \\ write register$/;"	d
>spi2>	embello/flib/stm32f1/spi2.fs	/^: >spi2> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spi2>	embello/qld/dev.fs	/^: >spi2>  >spi2> [char] < emit dup h.2 ;$/;"	d
>spi2>	flib/./stm32f1/spi2.fs	/^: >spi2> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spi2>	flib/stm32f1/spi2.fs	/^: >spi2> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spi>	embello/flib/any/spi-bb.fs	/^: >spi> ( c -- c )  \\ bit-banged SPI, 8 bits$/;"	d
>spi>	embello/flib/stm32f1/spi.fs	/^: >spi> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spi>	embello/flib/stm32l0/spi.fs	/^: >spi> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spi>	flib/./any/spi-bb.fs	/^: >spi> ( c -- c )  \\ bit-banged SPI, 8 bits$/;"	d
>spi>	flib/./stm32f1/spi.fs	/^: >spi> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spi>	flib/./stm32l0/spi.fs	/^: >spi> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spi>	flib/any/spi-bb.fs	/^: >spi> ( c -- c )  \\ bit-banged SPI, 8 bits$/;"	d
>spi>	flib/stm32f1/spi.fs	/^: >spi> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spi>	flib/stm32l0/spi.fs	/^: >spi> ( c -- c )  \\ hardware SPI, 8 bits$/;"	d
>spiN	embello/flib/stm32l0/spi.fs	/^: >spiN ( addr len reg -- ) \\ write len bytes to reg$/;"	d
>spiN	flib/./stm32l0/spi.fs	/^: >spiN ( addr len reg -- ) \\ write len bytes to reg$/;"	d
>spiN	flib/stm32l0/spi.fs	/^: >spiN ( addr len reg -- ) \\ write len bytes to reg$/;"	d
>spiN	tracker/speed.fs	/^: >spiN ( addr len reg -- ) \\ write len bytes to reg$/;"	d
>sram	embello/ezr/pokemon.fs	/^: >sram ( u -- )  \\ set SRAM bank$/;"	d
>tft	embello/flib/spi/tft-ili9163.fs	/^: >tft ( u -- )$/;"	d
>tft	flib/./spi/tft-ili9163.fs	/^: >tft ( u -- )$/;"	d
>tft	flib/spi/tft-ili9163.fs	/^: >tft ( u -- )$/;"	d
>var	embello/flib/any/varint.fs	/^: >var ( n -- )  \\ add one 32-bit value to output$/;"	d
>var	flib/./any/varint.fs	/^: >var ( n -- )  \\ add one 32-bit value to output$/;"	d
>var	flib/any/varint.fs	/^: >var ( n -- )  \\ add one 32-bit value to output$/;"	d
>zdi	embello/ezr/ex/bridge.fs	/^: >zdi ( val addr -- )$/;"	d
>zdi	embello/ezr/pokemon.fs	/^: >zdi ( val addr -- )$/;"	d
?	embello/ezr/pokemon.fs	/^: ?  ." PokeMon commands:"$/;"	d
?	embello/ezr/vdisk.fs	/^: ?  ? ." Virtual disk commands:"$/;"	d
ABORT	embello/ezr/simh2/xmodem-24.asm	/^ABORT:	call	CILPRT$/;"	l
ABORT	embello/ezr/simh2/xmodem.asm	/^ABORT:	call	CILPRT$/;"	l
ACK	embello/ezr/simh2/xmodem-24.asm	/^ACK	equ	6		;XMODEM block acknowledge$/;"	d
ACK	embello/ezr/simh2/xmodem.asm	/^ACK	equ	6		;XMODEM block acknowledge$/;"	d
ACKERR	embello/ezr/simh2/xmodem-24.asm	/^ACKERR:	call	CCTRLC		;user abort?$/;"	l
ACKERR	embello/ezr/simh2/xmodem.asm	/^ACKERR:	call	CCTRLC		;user abort?$/;"	l
ACKTO	embello/ezr/simh2/xmodem-24.asm	/^ACKTO	equ	60	;(60)receiver to ACK (or NAK)$/;"	d
ACKTO	embello/ezr/simh2/xmodem.asm	/^ACKTO	equ	60	;(60)receiver to ACK (or NAK)$/;"	d
ADC-CALFACT	embello/flib/stm32l0/adc.fs	/^    ADC1 $0B4 + constant ADC-CALFACT$/;"	d
ADC-CALFACT	flib/./stm32l0/adc.fs	/^    ADC1 $0B4 + constant ADC-CALFACT$/;"	d
ADC-CALFACT	flib/stm32l0/adc.fs	/^    ADC1 $0B4 + constant ADC-CALFACT$/;"	d
ADC-CCR	embello/flib/stm32l0/adc.fs	/^    ADC1 $308 + constant ADC-CCR$/;"	d
ADC-CCR	flib/./stm32l0/adc.fs	/^    ADC1 $308 + constant ADC-CCR$/;"	d
ADC-CCR	flib/stm32l0/adc.fs	/^    ADC1 $308 + constant ADC-CCR$/;"	d
ADC-CFGR1	embello/flib/stm32l0/adc.fs	/^    ADC1 $00C + constant ADC-CFGR1$/;"	d
ADC-CFGR1	flib/./stm32l0/adc.fs	/^    ADC1 $00C + constant ADC-CFGR1$/;"	d
ADC-CFGR1	flib/stm32l0/adc.fs	/^    ADC1 $00C + constant ADC-CFGR1$/;"	d
ADC-CFGR2	embello/flib/stm32l0/adc.fs	/^    ADC1 $010 + constant ADC-CFGR2$/;"	d
ADC-CFGR2	flib/./stm32l0/adc.fs	/^    ADC1 $010 + constant ADC-CFGR2$/;"	d
ADC-CFGR2	flib/stm32l0/adc.fs	/^    ADC1 $010 + constant ADC-CFGR2$/;"	d
ADC-CHSELR	embello/flib/stm32l0/adc.fs	/^    ADC1 $028 + constant ADC-CHSELR$/;"	d
ADC-CHSELR	flib/./stm32l0/adc.fs	/^    ADC1 $028 + constant ADC-CHSELR$/;"	d
ADC-CHSELR	flib/stm32l0/adc.fs	/^    ADC1 $028 + constant ADC-CHSELR$/;"	d
ADC-CR	embello/flib/stm32l0/adc.fs	/^    ADC1 $008 + constant ADC-CR$/;"	d
ADC-CR	flib/./stm32l0/adc.fs	/^    ADC1 $008 + constant ADC-CR$/;"	d
ADC-CR	flib/stm32l0/adc.fs	/^    ADC1 $008 + constant ADC-CR$/;"	d
ADC-DR	embello/flib/stm32l0/adc.fs	/^    ADC1 $040 + constant ADC-DR$/;"	d
ADC-DR	flib/./stm32l0/adc.fs	/^    ADC1 $040 + constant ADC-DR$/;"	d
ADC-DR	flib/stm32l0/adc.fs	/^    ADC1 $040 + constant ADC-DR$/;"	d
ADC-IER	embello/flib/stm32l0/adc.fs	/^    ADC1 $004 + constant ADC-IER$/;"	d
ADC-IER	flib/./stm32l0/adc.fs	/^    ADC1 $004 + constant ADC-IER$/;"	d
ADC-IER	flib/stm32l0/adc.fs	/^    ADC1 $004 + constant ADC-IER$/;"	d
ADC-IN	embello/sic/main.fs	/^PB0 constant ADC-IN$/;"	d
ADC-ISR	embello/flib/stm32l0/adc.fs	/^    ADC1 $000 + constant ADC-ISR$/;"	d
ADC-ISR	flib/./stm32l0/adc.fs	/^    ADC1 $000 + constant ADC-ISR$/;"	d
ADC-ISR	flib/stm32l0/adc.fs	/^    ADC1 $000 + constant ADC-ISR$/;"	d
ADC-SMPR	embello/flib/stm32l0/adc.fs	/^    ADC1 $014 + constant ADC-SMPR$/;"	d
ADC-SMPR	flib/./stm32l0/adc.fs	/^    ADC1 $014 + constant ADC-SMPR$/;"	d
ADC-SMPR	flib/stm32l0/adc.fs	/^    ADC1 $014 + constant ADC-SMPR$/;"	d
ADC-TR	embello/flib/stm32l0/adc.fs	/^    ADC1 $020 + constant ADC-TR$/;"	d
ADC-TR	flib/./stm32l0/adc.fs	/^    ADC1 $020 + constant ADC-TR$/;"	d
ADC-TR	flib/stm32l0/adc.fs	/^    ADC1 $020 + constant ADC-TR$/;"	d
ADC1	embello/flib/stm32f1/adc.fs	/^$40012400 constant ADC1$/;"	d
ADC1	embello/flib/stm32l0/adc.fs	/^$40012400 constant ADC1$/;"	d
ADC1	flib/./stm32f1/adc.fs	/^$40012400 constant ADC1$/;"	d
ADC1	flib/./stm32l0/adc.fs	/^$40012400 constant ADC1$/;"	d
ADC1	flib/stm32f1/adc.fs	/^$40012400 constant ADC1$/;"	d
ADC1	flib/stm32l0/adc.fs	/^$40012400 constant ADC1$/;"	d
ADC1-CR1	embello/flib/stm32f1/adc.fs	/^    ADC1 $04 + constant ADC1-CR1$/;"	d
ADC1-CR1	flib/./stm32f1/adc.fs	/^    ADC1 $04 + constant ADC1-CR1$/;"	d
ADC1-CR1	flib/stm32f1/adc.fs	/^    ADC1 $04 + constant ADC1-CR1$/;"	d
ADC1-CR2	embello/flib/stm32f1/adc.fs	/^    ADC1 $08 + constant ADC1-CR2$/;"	d
ADC1-CR2	flib/./stm32f1/adc.fs	/^    ADC1 $08 + constant ADC1-CR2$/;"	d
ADC1-CR2	flib/stm32f1/adc.fs	/^    ADC1 $08 + constant ADC1-CR2$/;"	d
ADC1-DR	embello/flib/stm32f1/adc.fs	/^    ADC1 $4C + constant ADC1-DR$/;"	d
ADC1-DR	flib/./stm32f1/adc.fs	/^    ADC1 $4C + constant ADC1-DR$/;"	d
ADC1-DR	flib/stm32f1/adc.fs	/^    ADC1 $4C + constant ADC1-DR$/;"	d
ADC1-SMPR1	embello/flib/stm32f1/adc.fs	/^    ADC1 $0C + constant ADC1-SMPR1$/;"	d
ADC1-SMPR1	flib/./stm32f1/adc.fs	/^    ADC1 $0C + constant ADC1-SMPR1$/;"	d
ADC1-SMPR1	flib/stm32f1/adc.fs	/^    ADC1 $0C + constant ADC1-SMPR1$/;"	d
ADC1-SMPR2	embello/flib/stm32f1/adc.fs	/^    ADC1 $10 + constant ADC1-SMPR2$/;"	d
ADC1-SMPR2	flib/./stm32f1/adc.fs	/^    ADC1 $10 + constant ADC1-SMPR2$/;"	d
ADC1-SMPR2	flib/stm32f1/adc.fs	/^    ADC1 $10 + constant ADC1-SMPR2$/;"	d
ADC1-SQR1	embello/flib/stm32f1/adc.fs	/^    ADC1 $2C + constant ADC1-SQR1$/;"	d
ADC1-SQR1	flib/./stm32f1/adc.fs	/^    ADC1 $2C + constant ADC1-SQR1$/;"	d
ADC1-SQR1	flib/stm32f1/adc.fs	/^    ADC1 $2C + constant ADC1-SQR1$/;"	d
ADC1-SQR2	embello/flib/stm32f1/adc.fs	/^    ADC1 $30 + constant ADC1-SQR2$/;"	d
ADC1-SQR2	flib/./stm32f1/adc.fs	/^    ADC1 $30 + constant ADC1-SQR2$/;"	d
ADC1-SQR2	flib/stm32f1/adc.fs	/^    ADC1 $30 + constant ADC1-SQR2$/;"	d
ADC1-SQR3	embello/flib/stm32f1/adc.fs	/^    ADC1 $34 + constant ADC1-SQR3$/;"	d
ADC1-SQR3	flib/./stm32f1/adc.fs	/^    ADC1 $34 + constant ADC1-SQR3$/;"	d
ADC1-SQR3	flib/stm32f1/adc.fs	/^    ADC1 $34 + constant ADC1-SQR3$/;"	d
ADC1-SR	embello/flib/stm32f1/adc.fs	/^    ADC1 $00 + constant ADC1-SR$/;"	d
ADC1-SR	flib/./stm32f1/adc.fs	/^    ADC1 $00 + constant ADC1-SR$/;"	d
ADC1-SR	flib/stm32f1/adc.fs	/^    ADC1 $00 + constant ADC1-SR$/;"	d
ADJMHZ	embello/ezr/simh2/xmodem-24.asm	/^ADJMHZ:	dad	b$/;"	l
ADJMHZ	embello/ezr/simh2/xmodem.asm	/^ADJMHZ:	dad	b$/;"	l
AFIO	embello/flib/stm32f1/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	embello/flib/stm32f4/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	embello/flib/stm32f7/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	embello/flib/stm32l0/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	embello/suf/hal-stm32f1.fs	/^$40010000 constant AFIO$/;"	d
AFIO	flib/./stm32f1/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	flib/./stm32f4/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	flib/./stm32f7/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	flib/./stm32l0/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	flib/stm32f1/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	flib/stm32f4/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	flib/stm32f7/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO	flib/stm32l0/hal.fs	/^$40010000 constant AFIO$/;"	d
AFIO-EXTICR1	embello/ezr/vdisk.fs	/^AFIO $08 + constant AFIO-EXTICR1$/;"	d
AFIO-EXTICR1	embello/jz4/ex/exti.fs	/^AFIO $8 + constant AFIO-EXTICR1$/;"	d
AFIO-EXTICR1	embello/jz4/ex/rot7.fs	/^AFIO $8 + constant AFIO-EXTICR1$/;"	d
AFIO-EXTICR1	embello/jz4/ex/rot8.fs	/^AFIO $8 + constant AFIO-EXTICR1$/;"	d
AFIO-EXTICR1	embello/sic/e-pinchange.fs	/^AFIO $8 + constant AFIO-EXTICR1$/;"	d
AFIO-EXTICR2	embello/ezr/vdisk.fs	/^AFIO $0C + constant AFIO-EXTICR2$/;"	d
AFIO-EXTICR2	embello/jz4/ex/exti.fs	/^AFIO $C + constant AFIO-EXTICR2$/;"	d
AFIO-EXTICR2	embello/jz4/ex/rot7.fs	/^AFIO $C + constant AFIO-EXTICR2$/;"	d
AFIO-EXTICR2	embello/jz4/ex/rot8.fs	/^AFIO $C + constant AFIO-EXTICR2$/;"	d
AFIO-EXTICR2	embello/sic/e-pinchange.fs	/^AFIO $C + constant AFIO-EXTICR2$/;"	d
AFIO-EXTICR3	embello/ezr/vdisk.fs	/^AFIO $10 + constant AFIO-EXTICR3$/;"	d
AFIO-EXTICR4	embello/ezr/vdisk.fs	/^AFIO $14 + constant AFIO-EXTICR4$/;"	d
AFIO-MAPR	embello/flib/stm32f1/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	embello/flib/stm32f4/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	embello/flib/stm32f7/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	embello/flib/stm32l0/hal.fs	/^\\    AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	embello/suf/hal-stm32f1.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	flib/./stm32f1/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	flib/./stm32f4/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	flib/./stm32f7/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	flib/./stm32l0/hal.fs	/^\\    AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	flib/stm32f1/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	flib/stm32f4/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	flib/stm32f7/hal.fs	/^     AFIO $4 + constant AFIO-MAPR$/;"	d
AFIO-MAPR	flib/stm32l0/hal.fs	/^\\    AFIO $4 + constant AFIO-MAPR$/;"	d
ANA1	embello/rvm/board.fs	/^PA0  constant ANA1$/;"	d
ANA2	embello/rvm/board.fs	/^PA1  constant ANA2$/;"	d
ANA3	embello/rvm/board.fs	/^PA2  constant ANA3$/;"	d
ANA4	embello/rvm/board.fs	/^PA3  constant ANA4$/;"	d
ANNCTP	embello/ezr/simh2/xmodem-24.asm	/^ANNCTP:	call	ILPRNT$/;"	l
ANNCTP	embello/ezr/simh2/xmodem.asm	/^ANNCTP:	call	ILPRNT$/;"	l
APB1-I2C1-EN	embello/flib/stm32f1/i2c.fs	/^21 bit constant APB1-I2C1-EN$/;"	d
APB1-I2C1-EN	flib/./stm32f1/i2c.fs	/^21 bit constant APB1-I2C1-EN$/;"	d
APB1-I2C1-EN	flib/stm32f1/i2c.fs	/^21 bit constant APB1-I2C1-EN$/;"	d
APB1-RST-I2C1	embello/flib/stm32f1/i2c.fs	/^21 bit constant APB1-RST-I2C1$/;"	d
APB1-RST-I2C1	flib/./stm32f1/i2c.fs	/^21 bit constant APB1-RST-I2C1$/;"	d
APB1-RST-I2C1	flib/stm32f1/i2c.fs	/^21 bit constant APB1-RST-I2C1$/;"	d
APB2-AFIO-EN	embello/flib/stm32f1/i2c.fs	/^0  bit constant APB2-AFIO-EN$/;"	d
APB2-AFIO-EN	flib/./stm32f1/i2c.fs	/^0  bit constant APB2-AFIO-EN$/;"	d
APB2-AFIO-EN	flib/stm32f1/i2c.fs	/^0  bit constant APB2-AFIO-EN$/;"	d
APB2-GPIOB-EN	embello/flib/stm32f1/i2c.fs	/^3  bit constant APB2-GPIOB-EN$/;"	d
APB2-GPIOB-EN	flib/./stm32f1/i2c.fs	/^3  bit constant APB2-GPIOB-EN$/;"	d
APB2-GPIOB-EN	flib/stm32f1/i2c.fs	/^3  bit constant APB2-GPIOB-EN$/;"	d
BAD-tests	embello/flib/any/testing.fs	/^0 variable BAD-tests$/;"	d
BAD-tests	flib/./any/testing.fs	/^0 variable BAD-tests$/;"	d
BAD-tests	flib/any/testing.fs	/^0 variable BAD-tests$/;"	d
BADCLN	embello/ezr/simh2/xmodem-24.asm	/^BADCLN:	call	MSGXIT$/;"	l
BADCLN	embello/ezr/simh2/xmodem.asm	/^BADCLN:	call	MSGXIT$/;"	l
BADINP	embello/ezr/simh2/xmodem-24.asm	/^BADINP:		call	CILPRT$/;"	l
BADINP	embello/ezr/simh2/xmodem.asm	/^BADINP:		call	CILPRT$/;"	l
BADVAL	embello/ezr/simh2/xmodem-24.asm	/^BADVAL:	call	CILPRT$/;"	l
BADVAL	embello/ezr/simh2/xmodem.asm	/^BADVAL:	call	CILPRT$/;"	l
BCDISK	embello/ezr/simh2/xmodem-24.asm	/^BCDISK	equ	25	;get current disk$/;"	d
BCDISK	embello/ezr/simh2/xmodem.asm	/^BCDISK	equ	25	;get current disk$/;"	d
BCLOSE	embello/ezr/simh2/xmodem-24.asm	/^BCLOSE	equ	16	;Close disk file, FCB at de$/;"	d
BCLOSE	embello/ezr/simh2/xmodem.asm	/^BCLOSE	equ	16	;Close disk file, FCB at de$/;"	d
BCONIN	embello/ezr/simh2/xmodem-24.asm	/^BCONIN	equ	1	;Read Console Chr$/;"	d
BCONIN	embello/ezr/simh2/xmodem.asm	/^BCONIN	equ	1	;Read Console Chr$/;"	d
BDELET	embello/ezr/simh2/xmodem-24.asm	/^BDELET	equ	19	;delete file, FCB at (de)$/;"	d
BDELET	embello/ezr/simh2/xmodem.asm	/^BDELET	equ	19	;delete file, FCB at (de)$/;"	d
BDOS	embello/ezr/simh2/xmodem-24.asm	/^BDOS	equ	WBOOT+5		;BDOS Entry Point$/;"	d
BDOS	embello/ezr/simh2/xmodem.asm	/^BDOS	equ	WBOOT+5		;BDOS Entry Point$/;"	d
BDOSA	embello/ezr/simh2/xmodem-24.asm	/^BDOSA	equ	WBOOT+6		; First address of BDOS$/;"	d
BDOSA	embello/ezr/simh2/xmodem.asm	/^BDOSA	equ	WBOOT+6		; First address of BDOS$/;"	d
BINS	embello/suf/Makefile	/^BINS = $(SRCS:f-%.fs=usb-%.bin)$/;"	m
BLKSIZ	embello/ezr/simh2/xmodem-24.asm	/^BLKSIZ	equ	128	;bytes per XMODEM block$/;"	d
BLKSIZ	embello/ezr/simh2/xmodem.asm	/^BLKSIZ	equ	128	;bytes per XMODEM block$/;"	d
BLUE	embello/lnr/ex/pwm.fs	/^PA2 constant BLUE$/;"	d
BMAKE	embello/ezr/simh2/xmodem-24.asm	/^BMAKE	equ	22	;Make new file, 0FFH=BAD$/;"	d
BMAKE	embello/ezr/simh2/xmodem.asm	/^BMAKE	equ	22	;Make new file, 0FFH=BAD$/;"	d
BME.ADDR	embello/flib/i2c/bme280.fs	/^[ifndef] BME.ADDR  $76 constant BME.ADDR  [then]$/;"	d
BME.ADDR	embello/i2c/board.fs	/^$77 constant BME.ADDR  \\ due to solder jumper$/;"	d
BME.ADDR	flib/./i2c/bme280.fs	/^[ifndef] BME.ADDR  $76 constant BME.ADDR  [then]$/;"	d
BME.ADDR	flib/i2c/bme280.fs	/^[ifndef] BME.ADDR  $76 constant BME.ADDR  [then]$/;"	d
BNO-EE	embello/flib/i2c/bno055.fs	/^32 constant BNO-EE \\ offset into EEPROM where 24 calibration bytes are stored (with CRC)$/;"	d
BNO-EE	flib/./i2c/bno055.fs	/^32 constant BNO-EE \\ offset into EEPROM where 24 calibration bytes are stored (with CRC)$/;"	d
BNO-EE	flib/i2c/bno055.fs	/^32 constant BNO-EE \\ offset into EEPROM where 24 calibration bytes are stored (with CRC)$/;"	d
BOOT0-PIN	embello/qld/dev.fs	/^PA1 constant BOOT0-PIN$/;"	d
BOPEN	embello/ezr/simh2/xmodem-24.asm	/^BOPEN	equ	15	;Disk File Open$/;"	d
BOPEN	embello/ezr/simh2/xmodem.asm	/^BOPEN	equ	15	;Disk File Open$/;"	d
BPRINT	embello/ezr/simh2/xmodem-24.asm	/^BPRINT	equ	9	;Print $-terminated String$/;"	d
BPRINT	embello/ezr/simh2/xmodem.asm	/^BPRINT	equ	9	;Print $-terminated String$/;"	d
BRDCON	embello/ezr/simh2/xmodem-24.asm	/^BRDCON	equ	10	;Get Line from Console$/;"	d
BRDCON	embello/ezr/simh2/xmodem.asm	/^BRDCON	equ	10	;Get Line from Console$/;"	d
BREAD	embello/ezr/simh2/xmodem-24.asm	/^BREAD	equ	20	;Read from Disk, 0=OK, <>0=EOF$/;"	d
BREAD	embello/ezr/simh2/xmodem.asm	/^BREAD	equ	20	;Read from Disk, 0=OK, <>0=EOF$/;"	d
BSDISK	embello/ezr/simh2/xmodem-24.asm	/^BSDISK	equ	14	;select disk$/;"	d
BSDISK	embello/ezr/simh2/xmodem.asm	/^BSDISK	equ	14	;select disk$/;"	d
BSERCH	embello/ezr/simh2/xmodem-24.asm	/^BSERCH	equ	17	;Search dir for file, FCB at de$/;"	d
BSERCH	embello/ezr/simh2/xmodem.asm	/^BSERCH	equ	17	;Search dir for file, FCB at de$/;"	d
BSTDMA	embello/ezr/simh2/xmodem-24.asm	/^BSTDMA	equ	26	;Set disk buffer to (de)$/;"	d
BSTDMA	embello/ezr/simh2/xmodem.asm	/^BSTDMA	equ	26	;Set disk buffer to (de)$/;"	d
BTN	embello/ezr/pokemon.fs	/^PA8 constant BTN$/;"	d
BTN-COMMON	embello/prc2/dev.fs	/^PA8  constant BTN-COMMON$/;"	d
BTN1	embello/prc2/dev.fs	/^PB15 constant BTN1  \\ pressed = "1", open = "0"$/;"	d
BTN2	embello/prc2/dev.fs	/^PB14 constant BTN2  \\ pressed = "1", open = "0"$/;"	d
BTN3	embello/prc2/dev.fs	/^PB13 constant BTN3  \\ pressed = "1", open = "0"$/;"	d
BTN4	embello/prc2/dev.fs	/^PB12 constant BTN4  \\ pressed = "1", open = "0"$/;"	d
BUFBLK	embello/ezr/simh2/xmodem-24.asm	/^BUFBLK	equ	16	;SECBUF will be a multiple of this$/;"	d
BUFBLK	embello/ezr/simh2/xmodem.asm	/^BUFBLK	equ	16	;SECBUF will be a multiple of this$/;"	d
BUFCOUNT	embello/ezr/cpm2/wr1280k.c	9;"	d	file:
BUFSIZE	embello/ezr/cpm2/wr1280k.c	8;"	d	file:
BUSY	embello/ezr/vdisk.fs	/^PB10 constant BUSY$/;"	d
BWRITE	embello/ezr/simh2/xmodem-24.asm	/^BWRITE	equ	21	;Write next record, 0=OK, <>0=ERR$/;"	d
BWRITE	embello/ezr/simh2/xmodem.asm	/^BWRITE	equ	21	;Write next record, 0=OK, <>0=ERR$/;"	d
BYTCNT	embello/ezr/simh2/xmodem-24.asm	/^BYTCNT:			;cmd buff bytes (reuse SBUFSZ)$/;"	l
BYTCNT	embello/ezr/simh2/xmodem.asm	/^BYTCNT:			;cmd buff bytes (reuse SBUFSZ)$/;"	l
CALCRC	embello/ezr/simh2/xmodem-24.asm	/^CALCRC:	mov	d,a		;save chr$/;"	l
CALCRC	embello/ezr/simh2/xmodem.asm	/^CALCRC:	mov	d,a		;save chr$/;"	l
CCIO	embello/ezr/simh2/xmodem-24.asm	/^CCIO:	call	CMDCHR		;get next command line chr$/;"	l
CCKSUM	embello/ezr/simh2/xmodem-24.asm	/^CCKSUM:	sta	CRCFLG$/;"	l
CCKSUM	embello/ezr/simh2/xmodem.asm	/^CCKSUM:	sta	CRCFLG$/;"	l
CCLR	embello/ezr/simh2/xmodem-24.asm	/^CCLR:	dcr	b$/;"	l
CCLR	embello/ezr/simh2/xmodem.asm	/^CCLR:	dcr	b$/;"	l
CCMSG	embello/ezr/simh2/xmodem-24.asm	/^CCMSG:	db	'^C$'			;User typed ^C$/;"	d
CCMSG	embello/ezr/simh2/xmodem.asm	/^CCMSG:	db	'^C$'			;User typed ^C$/;"	d
CCTRLC	embello/ezr/simh2/xmodem-24.asm	/^CCTRLC:	mvi	a,CONST		;anything on console?$/;"	l
CCTRLC	embello/ezr/simh2/xmodem.asm	/^CCTRLC:	mvi	a,CONST		;anything on console?$/;"	l
CFGBUF	embello/ezr/simh2/xmodem-24.asm	/^CFGBUF:	ds	BLKSIZ$/;"	d
CFGBUF	embello/ezr/simh2/xmodem.asm	/^CFGBUF:	ds	BLKSIZ$/;"	d
CFGFCB	embello/ezr/simh2/xmodem-24.asm	/^CFGFCB:	db	0		;(dr) use default drive$/;"	d
CFGFCB	embello/ezr/simh2/xmodem.asm	/^CFGFCB:	db	0		;(dr) use default drive$/;"	d
CHKLUP	embello/ezr/simh2/xmodem-24.asm	/^CHKLUP:	cmp	m		;Match? (alpha order)$/;"	l
CHKLUP	embello/ezr/simh2/xmodem.asm	/^CHKLUP:	cmp	m		;Match? (alpha order)$/;"	l
CIDEL	embello/ezr/simh2/xmodem-24.asm	/^CIDEL	equ	1	;seconds before receiving when \/X0$/;"	d
CIDEL	embello/ezr/simh2/xmodem.asm	/^CIDEL	equ	1	;seconds before receiving when \/X0$/;"	d
CILOOP	embello/ezr/simh2/xmodem-24.asm	/^CILOOP:	call	GETHEX		;get an init value$/;"	l
CILOOP	embello/ezr/simh2/xmodem.asm	/^CILOOP:	call	GETHEX		;get an init value$/;"	l
CILPRT	embello/ezr/simh2/xmodem-24.asm	/^CILPRT:	call	PCRLF$/;"	l
CILPRT	embello/ezr/simh2/xmodem.asm	/^CILPRT:	call	PCRLF$/;"	l
CINIT	embello/ezr/simh2/xmodem-24.asm	/^CINIT:	nop			;8 bytes space$/;"	l
CIOG0	embello/ezr/simh2/xmodem-24.asm	/^CIOG0:	push	h$/;"	l
CIOGET	embello/ezr/simh2/xmodem-24.asm	/^CIOGET:	mvi	c,8		;max bytes for a routine$/;"	l
CKCKSM	embello/ezr/simh2/xmodem-24.asm	/^CKCKSM:	call	RXBYT1		;2nd CRC byte or cksum$/;"	l
CKCKSM	embello/ezr/simh2/xmodem.asm	/^CKCKSM:	call	RXBYT1		;2nd CRC byte or cksum$/;"	l
CLFLAG	embello/ezr/simh2/xmodem-24.asm	/^CLFLAG:			;1 means reading .CFG,$/;"	l
CLFLAG	embello/ezr/simh2/xmodem.asm	/^CLFLAG:			;1 means reading .CFG,$/;"	l
CMDBAS	embello/ezr/simh2/xmodem-24.asm	/^CMDBAS:$/;"	l
CMDBAS	embello/ezr/simh2/xmodem.asm	/^CMDBAS:$/;"	l
CMDCHR	embello/ezr/simh2/xmodem-24.asm	/^CMDCHR:	lxi	h,BYTCNT$/;"	l
CMDCHR	embello/ezr/simh2/xmodem.asm	/^CMDCHR:	lxi	h,BYTCNT$/;"	l
CMDONE	embello/ezr/simh2/xmodem-24.asm	/^CMDONE:$/;"	l
CMDONE	embello/ezr/simh2/xmodem.asm	/^CMDONE:$/;"	l
CMESSG	embello/ezr/simh2/xmodem-24.asm	/^CMESSG:	call	PCRLF		;initial new line$/;"	l
CMESSG	embello/ezr/simh2/xmodem.asm	/^CMESSG:	call	PCRLF	;initial new line$/;"	l
CMHZ	embello/ezr/simh2/xmodem-24.asm	/^CMHZ:	call	CMDCHR$/;"	l
CMHZ	embello/ezr/simh2/xmodem.asm	/^CMHZ:	call	CMDCHR$/;"	l
CMODR	embello/ezr/simh2/xmodem-24.asm	/^CMODR:	inr	a$/;"	l
CMODR	embello/ezr/simh2/xmodem.asm	/^CMODR:	inr	a$/;"	l
CMSGLP	embello/ezr/simh2/xmodem-24.asm	/^CMSGLP:	call	CMDCHR		;get next chr$/;"	l
CMSGLP	embello/ezr/simh2/xmodem.asm	/^CMSGLP:	call	CMDCHR	;get next chr$/;"	l
CMSGXT	embello/ezr/simh2/xmodem-24.asm	/^CMSGXT:	call	PCRLF$/;"	l
CMSGXT	embello/ezr/simh2/xmodem.asm	/^CMSGXT:	call	PCRLF$/;"	l
COMBUF	embello/ezr/simh2/xmodem-24.asm	/^COMBUF	equ	WBOOT+80H	;disk & cmd line buffer$/;"	d
COMBUF	embello/ezr/simh2/xmodem.asm	/^COMBUF	equ	WBOOT+80H	;disk & cmd line buffer$/;"	d
COMMA	embello/flib/uart/gps.fs	/^44 constant COMMA$/;"	d
COMMA	flib/./uart/gps.fs	/^44 constant COMMA$/;"	d
COMMA	flib/uart/gps.fs	/^44 constant COMMA$/;"	d
COMMNT	embello/ezr/simh2/xmodem-24.asm	/^COMMNT:	call	CMDCHR$/;"	l
COMMNT	embello/ezr/simh2/xmodem.asm	/^COMMNT:	call	CMDCHR$/;"	l
CONIN	embello/ezr/simh2/xmodem-24.asm	/^CONIN	equ	09h	;Console Input$/;"	d
CONIN	embello/ezr/simh2/xmodem.asm	/^CONIN	equ	09h	;Console Input$/;"	d
CONOUT	embello/ezr/simh2/xmodem-24.asm	/^CONOUT	equ	0Ch	;Console output$/;"	d
CONOUT	embello/ezr/simh2/xmodem.asm	/^CONOUT	equ	0Ch	;Console output$/;"	d
CONST	embello/ezr/simh2/xmodem-24.asm	/^CONST	equ	06h	;Console Status$/;"	d
CONST	embello/ezr/simh2/xmodem.asm	/^CONST	equ	06h	;Console Status$/;"	d
CONTO	embello/ezr/simh2/xmodem-24.asm	/^CONTO:	equ	50000\/((195+CRTIME+9)\/10)$/;"	d
CONTO	embello/ezr/simh2/xmodem.asm	/^CONTO:	equ	50000\/((205+CSTIME)\/10)$/;"	d
COUTP	embello/ezr/simh2/xmodem-24.asm	/^COUTP:	call	GTHEXM		;get port number$/;"	l
COUTP	embello/ezr/simh2/xmodem.asm	/^COUTP:	call	GTHEXM		;get port number$/;"	l
CPORT	embello/ezr/simh2/xmodem-24.asm	/^CPORT:	call	GTHEXM		;get status port$/;"	l
CPORT	embello/ezr/simh2/xmodem.asm	/^CPORT:	call	GTHEXM		;get status port$/;"	l
CPUMHZ	embello/ezr/simh2/xmodem-24.asm	/^CPUMHZ:	db	2	;CPU speed in MHz (for timeouts)$/;"	d
CPUMHZ	embello/ezr/simh2/xmodem.asm	/^CPUMHZ:	db	2	;CPU speed in MHz (for timeouts)$/;"	d
CQUIET	embello/ezr/simh2/xmodem-24.asm	/^CQUIET:	dcr	a		;a=FFh$/;"	l
CQUIET	embello/ezr/simh2/xmodem.asm	/^CQUIET:	dcr	a		;a=FFh$/;"	l
CR	embello/ezr/simh2/xmodem-24.asm	/^CR	equ	0DH		;Carriage return$/;"	d
CR	embello/ezr/simh2/xmodem.asm	/^CR	equ	0DH		;Carriage return$/;"	d
CRC16	embello/ezr/simh2/xmodem-24.asm	/^CRC16:	dw	0	;calculated CRC so far$/;"	d
CRC16	embello/ezr/simh2/xmodem.asm	/^CRC16:	dw	0	;calculated CRC so far$/;"	d
CRCFLG	embello/ezr/simh2/xmodem-24.asm	/^CRCFLG:	db	SELCRC	;0 for cksum, SELCRC for CRC$/;"	d
CRCFLG	embello/ezr/simh2/xmodem.asm	/^CRCFLG:	db	SELCRC	;0 for cksum, SELCRC for CRC$/;"	d
CRDAT	embello/ezr/simh2/xmodem-24.asm	/^CRDAT:	ora	a		;just make default faster$/;"	l
CRDONE	embello/ezr/simh2/xmodem-24.asm	/^CRDONE:	pop	h$/;"	l
CREATE	embello/ezr/simh2/xmodem-24.asm	/^CREATE:$/;"	l
CREATE	embello/ezr/simh2/xmodem.asm	/^CREATE:$/;"	l
CROTLP	embello/ezr/simh2/xmodem-24.asm	/^CROTLP:	dad	h		;16-bit shift$/;"	l
CROTLP	embello/ezr/simh2/xmodem.asm	/^CROTLP:	dad	h		;16-bit shift$/;"	l
CRSTAT	embello/ezr/simh2/xmodem-24.asm	/^CRSTAT:	xra	a		;set z flag, so that default$/;"	l
CRTIME	embello/ezr/simh2/xmodem-24.asm	/^CRTIME	equ	95	;number of cpu cycles that BIOS uses to$/;"	d
CRTIME	embello/ezr/simh2/xmodem.asm	/^CRTIME	equ	95	;number of cpu cycles that BIOS uses to$/;"	d
CSETR	embello/ezr/simh2/xmodem-24.asm	/^CSETR:	sta	XMODE$/;"	l
CSETR	embello/ezr/simh2/xmodem.asm	/^CSETR:	sta	XMODE$/;"	l
CSETS	embello/ezr/simh2/xmodem-24.asm	/^CSETS:	inr	a	;a=1$/;"	l
CSETS	embello/ezr/simh2/xmodem.asm	/^CSETS:	inr	a	;a=1$/;"	l
CSETX	embello/ezr/simh2/xmodem-24.asm	/^CSETX:	call	CMDCHR$/;"	l
CSETX	embello/ezr/simh2/xmodem.asm	/^CSETX:	call	CMDCHR$/;"	l
CSTIME	embello/ezr/simh2/xmodem-24.asm	/^CSTIME	equ	85	;number of CPU cycles that BIOS uses to$/;"	d
CSTIME	embello/ezr/simh2/xmodem.asm	/^CSTIME	equ	85	;number of CPU cycles that BIOS uses to$/;"	d
CTRLC	embello/ezr/simh2/xmodem-24.asm	/^CTRLC	equ	3		;Control-C for user-abort$/;"	d
CTRLC	embello/ezr/simh2/xmodem.asm	/^CTRLC	equ	3		;Control-C for user-abort$/;"	d
CURBLK	embello/ezr/simh2/xmodem-24.asm	/^CURBLK:	dw	0	;16-bit Current block number $/;"	d
CURBLK	embello/ezr/simh2/xmodem.asm	/^CURBLK:	dw	0	;16-bit Current block number $/;"	d
CUSTO	embello/ezr/simh2/xmodem-24.asm	/^CUSTO:	equ	50000\/((96+EXTIME+9)\/10)$/;"	d
CUSTRX	embello/ezr/simh2/xmodem-24.asm	/^CUSTRX:$/;"	l
CWDAT	embello/ezr/simh2/xmodem-24.asm	/^CWDAT:	lxi	d,TTOMSG	;default causes error$/;"	l
DAC	embello/flib/stm32f1/dac.fs	/^$40007400 constant DAC$/;"	d
DAC	flib/./stm32f1/dac.fs	/^$40007400 constant DAC$/;"	d
DAC	flib/stm32f1/dac.fs	/^$40007400 constant DAC$/;"	d
DAC-CR	embello/flib/stm32f1/dac.fs	/^     DAC $00 + constant DAC-CR$/;"	d
DAC-CR	flib/./stm32f1/dac.fs	/^     DAC $00 + constant DAC-CR$/;"	d
DAC-CR	flib/stm32f1/dac.fs	/^     DAC $00 + constant DAC-CR$/;"	d
DAC-DHR12R1	embello/flib/stm32f1/dac.fs	/^     DAC $08 + constant DAC-DHR12R1$/;"	d
DAC-DHR12R1	flib/./stm32f1/dac.fs	/^     DAC $08 + constant DAC-DHR12R1$/;"	d
DAC-DHR12R1	flib/stm32f1/dac.fs	/^     DAC $08 + constant DAC-DHR12R1$/;"	d
DAC-DHR12R2	embello/flib/stm32f1/dac.fs	/^     DAC $14 + constant DAC-DHR12R2$/;"	d
DAC-DHR12R2	flib/./stm32f1/dac.fs	/^     DAC $14 + constant DAC-DHR12R2$/;"	d
DAC-DHR12R2	flib/stm32f1/dac.fs	/^     DAC $14 + constant DAC-DHR12R2$/;"	d
DAC-DHR12RD	embello/flib/stm32f1/dac.fs	/^     DAC $20 + constant DAC-DHR12RD$/;"	d
DAC-DHR12RD	flib/./stm32f1/dac.fs	/^     DAC $20 + constant DAC-DHR12RD$/;"	d
DAC-DHR12RD	flib/stm32f1/dac.fs	/^     DAC $20 + constant DAC-DHR12RD$/;"	d
DAC-SWTRIGR	embello/flib/stm32f1/dac.fs	/^\\    DAC $04 + constant DAC-SWTRIGR$/;"	d
DAC-SWTRIGR	flib/./stm32f1/dac.fs	/^\\    DAC $04 + constant DAC-SWTRIGR$/;"	d
DAC-SWTRIGR	flib/stm32f1/dac.fs	/^\\    DAC $04 + constant DAC-SWTRIGR$/;"	d
DATAFILE	embello/ezr/cpm2/wr1280k.c	7;"	d	file:
DEBUG	embello/i2c/main.fs	/^0 constant DEBUG  \\ 0 = show on LCD, 1 = show on serial$/;"	d
DEBUG	embello/jz3/main.fs	/^0 constant DEBUG  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
DEBUG	jz3/./main.fs	/^0 constant DEBUG  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
DEBUG	jz3/main.fs	/^0 constant DEBUG  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
DECDG0	embello/ezr/simh2/xmodem-24.asm	/^DECDG0:	adi	'0'		;make digit ASCII$/;"	l
DECDG0	embello/ezr/simh2/xmodem.asm	/^DECDG0:	adi	'0'		;make digit ASCII$/;"	l
DECDIG	embello/ezr/simh2/xmodem-24.asm	/^DECDIG:	mvi	a,0FFh		;will go 1 too many times$/;"	l
DECDIG	embello/ezr/simh2/xmodem.asm	/^DECDIG:	mvi	a,0FFh		;will go 1 too many times$/;"	l
DIGLP	embello/ezr/simh2/xmodem-24.asm	/^DIGLP:	mov	d,h		;de gets prev value$/;"	l
DIGLP	embello/ezr/simh2/xmodem.asm	/^DIGLP:	mov	d,h		;de gets prev value$/;"	l
DIO2	embello/flib/spi/rf69ook.fs	/^\\ requires constant DIO2 to be defined by boards.fs$/;"	d
DIO2	flib/./spi/rf69ook.fs	/^\\ requires constant DIO2 to be defined by boards.fs$/;"	d
DIO2	flib/spi/rf69ook.fs	/^\\ requires constant DIO2 to be defined by boards.fs$/;"	d
DIRRX	embello/ezr/simh2/xmodem-24.asm	/^DIRRX:$/;"	l
DIRTO	embello/ezr/simh2/xmodem-24.asm	/^DIRTO	equ	7247$/;"	d
DIRTO	embello/ezr/simh2/xmodem.asm	/^DIRTO	equ	6329$/;"	d
DISPLAYCONTROL	embello/flib/spi/lcd-pcd8544.fs	/^$08  constant DISPLAYCONTROL$/;"	d
DISPLAYCONTROL	flib/./spi/lcd-pcd8544.fs	/^$08  constant DISPLAYCONTROL$/;"	d
DISPLAYCONTROL	flib/spi/lcd-pcd8544.fs	/^$08  constant DISPLAYCONTROL$/;"	d
DISPLAYINVERTED	embello/flib/spi/lcd-pcd8544.fs	/^$5   constant DISPLAYINVERTED$/;"	d
DISPLAYINVERTED	flib/./spi/lcd-pcd8544.fs	/^$5   constant DISPLAYINVERTED$/;"	d
DISPLAYINVERTED	flib/spi/lcd-pcd8544.fs	/^$5   constant DISPLAYINVERTED$/;"	d
DISPLAYNORMAL	embello/flib/spi/lcd-pcd8544.fs	/^$4   constant DISPLAYNORMAL$/;"	d
DISPLAYNORMAL	flib/./spi/lcd-pcd8544.fs	/^$4   constant DISPLAYNORMAL$/;"	d
DISPLAYNORMAL	flib/spi/lcd-pcd8544.fs	/^$4   constant DISPLAYNORMAL$/;"	d
DMA1	embello/ezr/vdisk.fs	/^\\ $40020000 constant DMA1$/;"	d
DMA1	embello/flib/stm32f1/adc.fs	/^$40020000 constant DMA1$/;"	d
DMA1	flib/./stm32f1/adc.fs	/^$40020000 constant DMA1$/;"	d
DMA1	flib/stm32f1/adc.fs	/^$40020000 constant DMA1$/;"	d
DMA1-CCR1	embello/flib/stm32f1/adc.fs	/^    DMA1 $08 + constant DMA1-CCR1$/;"	d
DMA1-CCR1	flib/./stm32f1/adc.fs	/^    DMA1 $08 + constant DMA1-CCR1$/;"	d
DMA1-CCR1	flib/stm32f1/adc.fs	/^    DMA1 $08 + constant DMA1-CCR1$/;"	d
DMA1-CCR4	embello/ezr/vdisk.fs	/^    DMA1 $44 + constant DMA1-CCR4$/;"	d
DMA1-CCR5	embello/ezr/vdisk.fs	/^    DMA1 $58 + constant DMA1-CCR5$/;"	d
DMA1-CMAR1	embello/flib/stm32f1/adc.fs	/^    DMA1 $14 + constant DMA1-CMAR1$/;"	d
DMA1-CMAR1	flib/./stm32f1/adc.fs	/^    DMA1 $14 + constant DMA1-CMAR1$/;"	d
DMA1-CMAR1	flib/stm32f1/adc.fs	/^    DMA1 $14 + constant DMA1-CMAR1$/;"	d
DMA1-CMAR4	embello/ezr/vdisk.fs	/^    DMA1 $50 + constant DMA1-CMAR4$/;"	d
DMA1-CMAR5	embello/ezr/vdisk.fs	/^    DMA1 $64 + constant DMA1-CMAR5$/;"	d
DMA1-CNDTR1	embello/flib/stm32f1/adc.fs	/^    DMA1 $0C + constant DMA1-CNDTR1$/;"	d
DMA1-CNDTR1	flib/./stm32f1/adc.fs	/^    DMA1 $0C + constant DMA1-CNDTR1$/;"	d
DMA1-CNDTR1	flib/stm32f1/adc.fs	/^    DMA1 $0C + constant DMA1-CNDTR1$/;"	d
DMA1-CNDTR4	embello/ezr/vdisk.fs	/^    DMA1 $48 + constant DMA1-CNDTR4$/;"	d
DMA1-CNDTR5	embello/ezr/vdisk.fs	/^    DMA1 $5C + constant DMA1-CNDTR5$/;"	d
DMA1-CPAR1	embello/flib/stm32f1/adc.fs	/^    DMA1 $10 + constant DMA1-CPAR1$/;"	d
DMA1-CPAR1	flib/./stm32f1/adc.fs	/^    DMA1 $10 + constant DMA1-CPAR1$/;"	d
DMA1-CPAR1	flib/stm32f1/adc.fs	/^    DMA1 $10 + constant DMA1-CPAR1$/;"	d
DMA1-CPAR4	embello/ezr/vdisk.fs	/^    DMA1 $4C + constant DMA1-CPAR4$/;"	d
DMA1-CPAR5	embello/ezr/vdisk.fs	/^    DMA1 $60 + constant DMA1-CPAR5$/;"	d
DMA1-IFCR	embello/ezr/vdisk.fs	/^\\   DMA1 $04 + constant DMA1-IFCR$/;"	d
DMA1-IFCR	embello/flib/stm32f1/adc.fs	/^    DMA1 $04 + constant DMA1-IFCR$/;"	d
DMA1-IFCR	flib/./stm32f1/adc.fs	/^    DMA1 $04 + constant DMA1-IFCR$/;"	d
DMA1-IFCR	flib/stm32f1/adc.fs	/^    DMA1 $04 + constant DMA1-IFCR$/;"	d
DMA1-ISR	embello/ezr/vdisk.fs	/^\\   DMA1 $00 + constant DMA1-ISR$/;"	d
DMA1-ISR	embello/flib/stm32f1/adc.fs	/^    DMA1 $00 + constant DMA1-ISR$/;"	d
DMA1-ISR	flib/./stm32f1/adc.fs	/^    DMA1 $00 + constant DMA1-ISR$/;"	d
DMA1-ISR	flib/stm32f1/adc.fs	/^    DMA1 $00 + constant DMA1-ISR$/;"	d
DMA2	embello/flib/stm32f1/dac.fs	/^$40020400 constant DMA2$/;"	d
DMA2	flib/./stm32f1/dac.fs	/^$40020400 constant DMA2$/;"	d
DMA2	flib/stm32f1/dac.fs	/^$40020400 constant DMA2$/;"	d
DMA2-CCR3	embello/flib/stm32f1/dac.fs	/^    DMA2 $30 + constant DMA2-CCR3$/;"	d
DMA2-CCR3	flib/./stm32f1/dac.fs	/^    DMA2 $30 + constant DMA2-CCR3$/;"	d
DMA2-CCR3	flib/stm32f1/dac.fs	/^    DMA2 $30 + constant DMA2-CCR3$/;"	d
DMA2-CMAR3	embello/flib/stm32f1/dac.fs	/^    DMA2 $3C + constant DMA2-CMAR3$/;"	d
DMA2-CMAR3	flib/./stm32f1/dac.fs	/^    DMA2 $3C + constant DMA2-CMAR3$/;"	d
DMA2-CMAR3	flib/stm32f1/dac.fs	/^    DMA2 $3C + constant DMA2-CMAR3$/;"	d
DMA2-CNDTR3	embello/flib/stm32f1/dac.fs	/^    DMA2 $34 + constant DMA2-CNDTR3$/;"	d
DMA2-CNDTR3	flib/./stm32f1/dac.fs	/^    DMA2 $34 + constant DMA2-CNDTR3$/;"	d
DMA2-CNDTR3	flib/stm32f1/dac.fs	/^    DMA2 $34 + constant DMA2-CNDTR3$/;"	d
DMA2-CPAR3	embello/flib/stm32f1/dac.fs	/^    DMA2 $38 + constant DMA2-CPAR3$/;"	d
DMA2-CPAR3	flib/./stm32f1/dac.fs	/^    DMA2 $38 + constant DMA2-CPAR3$/;"	d
DMA2-CPAR3	flib/stm32f1/dac.fs	/^    DMA2 $38 + constant DMA2-CPAR3$/;"	d
DOBIOS	embello/ezr/simh2/xmodem-24.asm	/^DOBIOS:	lhld	WBOOTA		;(16)get BIOS base address$/;"	l
DOBIOS	embello/ezr/simh2/xmodem.asm	/^DOBIOS:	lhld	WBOOTA		;(16)get BIOS base address$/;"	l
DOLLAR	embello/flib/uart/gps.fs	/^char $ constant DOLLAR$/;"	d
DOLLAR	flib/./uart/gps.fs	/^char $ constant DOLLAR$/;"	d
DOLLAR	flib/uart/gps.fs	/^char $ constant DOLLAR$/;"	d
DTIMOT	embello/ezr/simh2/xmodem-24.asm	/^DTIMOT:	pop	h		;here for IMODFY$/;"	l
DTIMOT	embello/ezr/simh2/xmodem.asm	/^DTIMOT:	pop	h		;here for IMODFY$/;"	l
EEPROM	embello/flib/stm32l0/eeprom.fs	/^$08080000 constant EEPROM       \\ start of eeprom$/;"	d
EEPROM	flib/./stm32l0/eeprom.fs	/^$08080000 constant EEPROM       \\ start of eeprom$/;"	d
EEPROM	flib/stm32l0/eeprom.fs	/^$08080000 constant EEPROM       \\ start of eeprom$/;"	d
ELEMSG	embello/ezr/simh2/xmodem-24.asm	/^ELEMSG:	db	(ERRLIM\/10)+'0'		;too many block retries$/;"	d
ELEMSG	embello/ezr/simh2/xmodem.asm	/^ELEMSG:	db	(ERRLIM\/10)+'0'		;too many block retries$/;"	d
ENC-A	embello/jz4/ex/exti.fs	/^PA3 constant ENC-A$/;"	d
ENC-A	embello/jz4/ex/rot1.fs	/^PA5 constant ENC-A$/;"	d
ENC-A	embello/jz4/ex/rot2.fs	/^PA3 constant ENC-A$/;"	d
ENC-A	embello/jz4/ex/rot3.fs	/^PA3 constant ENC-A$/;"	d
ENC-A	embello/jz4/ex/rot4.fs	/^PA3 constant ENC-A$/;"	d
ENC-A	embello/jz4/ex/rot5.fs	/^PA3 constant ENC-A$/;"	d
ENC-A	embello/jz4/ex/rot6.fs	/^PA3 constant ENC-A$/;"	d
ENC-A	embello/jz4/ex/rot7.fs	/^PA3 constant ENC-A$/;"	d
ENC-A	embello/jz4/ex/rot8.fs	/^PA3 constant ENC-A$/;"	d
ENC-B	embello/jz4/ex/exti.fs	/^PA5 constant ENC-B$/;"	d
ENC-B	embello/jz4/ex/rot1.fs	/^PA3 constant ENC-B$/;"	d
ENC-B	embello/jz4/ex/rot2.fs	/^PA5 constant ENC-B$/;"	d
ENC-B	embello/jz4/ex/rot3.fs	/^PA5 constant ENC-B$/;"	d
ENC-B	embello/jz4/ex/rot4.fs	/^PA5 constant ENC-B$/;"	d
ENC-B	embello/jz4/ex/rot5.fs	/^PA5 constant ENC-B$/;"	d
ENC-B	embello/jz4/ex/rot6.fs	/^PA5 constant ENC-B$/;"	d
ENC-B	embello/jz4/ex/rot7.fs	/^PA5 constant ENC-B$/;"	d
ENC-B	embello/jz4/ex/rot8.fs	/^PA5 constant ENC-B$/;"	d
ENC-C	embello/jz4/ex/exti.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENC-C	embello/jz4/ex/rot1.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENC-C	embello/jz4/ex/rot2.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENC-C	embello/jz4/ex/rot3.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENC-C	embello/jz4/ex/rot4.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENC-C	embello/jz4/ex/rot5.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENC-C	embello/jz4/ex/rot6.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENC-C	embello/jz4/ex/rot7.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENC-C	embello/jz4/ex/rot8.fs	/^PA4 constant ENC-C  \\ common$/;"	d
ENHRDR	embello/ezr/simh2/xmodem-24.asm	/^ENHRDR:	db	0	;01 for RDR: that returns with$/;"	d
ENHRDR	embello/ezr/simh2/xmodem.asm	/^ENHRDR:	db	0	;nz for RDR: that returns with$/;"	d
EOF	embello/ezr/simh2/xmodem-24.asm	/^EOF	equ	1Ah		;^Z end of XMODEM.CFG file$/;"	d
EOF	embello/ezr/simh2/xmodem.asm	/^EOF	equ	1Ah		;^Z end of XMODEM.CFG file$/;"	d
EOFLAG	embello/ezr/simh2/xmodem-24.asm	/^EOFLAG:	db	1	;EOF flag (<>0 means true)$/;"	d
EOFLAG	embello/ezr/simh2/xmodem.asm	/^EOFLAG:	db	1	;EOF flag (<>0 means true)$/;"	d
EOT	embello/ezr/simh2/xmodem-24.asm	/^EOT	equ	4		;End XMODEM session$/;"	d
EOT	embello/ezr/simh2/xmodem.asm	/^EOT	equ	4		;End XMODEM session$/;"	d
ERRCNT	embello/ezr/simh2/xmodem-24.asm	/^ERRCNT:	db	0	;Error count$/;"	d
ERRCNT	embello/ezr/simh2/xmodem.asm	/^ERRCNT:	db	0	;Error count$/;"	d
ERRLIM	embello/ezr/simh2/xmodem-24.asm	/^ERRLIM	equ	10	;Max error-retries. 10 is standard.$/;"	d
ERRLIM	embello/ezr/simh2/xmodem.asm	/^ERRLIM	equ	10	;Max error-retries. 10 is standard.$/;"	d
ERRSRC	embello/ezr/simh2/xmodem-24.asm	/^ERRSRC:	lda	CLFLAG		;command line or XMODEM.CFG?$/;"	l
ERRSRC	embello/ezr/simh2/xmodem.asm	/^ERRSRC:	lda	CLFLAG		;command line or XMODEM.CFG?$/;"	l
EWFMSG	embello/ezr/simh2/xmodem-24.asm	/^EWFMSG:	db	'disk write fail$'	;CP\/M error$/;"	d
EWFMSG	embello/ezr/simh2/xmodem.asm	/^EWFMSG:	db	'disk write fail$'	;CP\/M error$/;"	d
EXIT	embello/ezr/simh2/xmodem-24.asm	/^EXIT:	jmp	WBOOT		;go to CP\/M$/;"	l
EXIT	embello/ezr/simh2/xmodem.asm	/^EXIT:	jmp	WBOOT		;go to CP\/M$/;"	l
EXTENDEDINSTRUCTION	embello/flib/spi/lcd-pcd8544.fs	/^$01  constant EXTENDEDINSTRUCTION$/;"	d
EXTENDEDINSTRUCTION	flib/./spi/lcd-pcd8544.fs	/^$01  constant EXTENDEDINSTRUCTION$/;"	d
EXTENDEDINSTRUCTION	flib/spi/lcd-pcd8544.fs	/^$01  constant EXTENDEDINSTRUCTION$/;"	d
EXTI	embello/ezr/vdisk.fs	/^$40010400 constant EXTI$/;"	d
EXTI	embello/flib/stm32l0/sleep.fs	/^$40010400 constant EXTI$/;"	d
EXTI	embello/jz4/ex/exti.fs	/^\\ $40010400 constant EXTI$/;"	d
EXTI	embello/jz4/ex/rot7.fs	/^\\ $40010400 constant EXTI$/;"	d
EXTI	embello/jz4/ex/rot8.fs	/^\\ $40010400 constant EXTI$/;"	d
EXTI	embello/sic/e-pinchange.fs	/^$40010400 constant EXTI$/;"	d
EXTI	flib/./stm32l0/sleep.fs	/^$40010400 constant EXTI$/;"	d
EXTI	flib/stm32l0/sleep.fs	/^$40010400 constant EXTI$/;"	d
EXTI-EMR	embello/flib/stm32l0/sleep.fs	/^     EXTI $04 + constant EXTI-EMR$/;"	d
EXTI-EMR	flib/./stm32l0/sleep.fs	/^     EXTI $04 + constant EXTI-EMR$/;"	d
EXTI-EMR	flib/stm32l0/sleep.fs	/^     EXTI $04 + constant EXTI-EMR$/;"	d
EXTI-FTSR	embello/ezr/vdisk.fs	/^    EXTI $0C + constant EXTI-FTSR$/;"	d
EXTI-FTSR	embello/flib/stm32l0/sleep.fs	/^\\    EXTI $0C + constant EXTI-FTSR$/;"	d
EXTI-FTSR	embello/jz4/ex/exti.fs	/^    EXTI $0C + constant EXTI-FTSR$/;"	d
EXTI-FTSR	embello/jz4/ex/rot7.fs	/^    EXTI $0C + constant EXTI-FTSR$/;"	d
EXTI-FTSR	embello/jz4/ex/rot8.fs	/^    EXTI $0C + constant EXTI-FTSR$/;"	d
EXTI-FTSR	embello/sic/e-pinchange.fs	/^    EXTI $0C + constant EXTI-FTSR$/;"	d
EXTI-FTSR	flib/./stm32l0/sleep.fs	/^\\    EXTI $0C + constant EXTI-FTSR$/;"	d
EXTI-FTSR	flib/stm32l0/sleep.fs	/^\\    EXTI $0C + constant EXTI-FTSR$/;"	d
EXTI-IMR	embello/ezr/vdisk.fs	/^    EXTI $00 + constant EXTI-IMR$/;"	d
EXTI-IMR	embello/flib/stm32l0/sleep.fs	/^     EXTI $00 + constant EXTI-IMR$/;"	d
EXTI-IMR	embello/jz4/ex/exti.fs	/^\\   EXTI $00 + constant EXTI-IMR$/;"	d
EXTI-IMR	embello/jz4/ex/rot7.fs	/^\\   EXTI $00 + constant EXTI-IMR$/;"	d
EXTI-IMR	embello/jz4/ex/rot8.fs	/^\\   EXTI $00 + constant EXTI-IMR$/;"	d
EXTI-IMR	embello/sic/e-pinchange.fs	/^    EXTI $00 + constant EXTI-IMR$/;"	d
EXTI-IMR	flib/./stm32l0/sleep.fs	/^     EXTI $00 + constant EXTI-IMR$/;"	d
EXTI-IMR	flib/stm32l0/sleep.fs	/^     EXTI $00 + constant EXTI-IMR$/;"	d
EXTI-PR	embello/ezr/vdisk.fs	/^    EXTI $14 + constant EXTI-PR$/;"	d
EXTI-PR	embello/flib/stm32l0/sleep.fs	/^     EXTI $14 + constant EXTI-PR$/;"	d
EXTI-PR	embello/jz4/ex/exti.fs	/^\\   EXTI $14 + constant EXTI-PR$/;"	d
EXTI-PR	embello/jz4/ex/rot7.fs	/^\\   EXTI $14 + constant EXTI-PR$/;"	d
EXTI-PR	embello/jz4/ex/rot8.fs	/^\\   EXTI $14 + constant EXTI-PR$/;"	d
EXTI-PR	embello/sic/e-pinchange.fs	/^    EXTI $14 + constant EXTI-PR$/;"	d
EXTI-PR	flib/./stm32l0/sleep.fs	/^     EXTI $14 + constant EXTI-PR$/;"	d
EXTI-PR	flib/stm32l0/sleep.fs	/^     EXTI $14 + constant EXTI-PR$/;"	d
EXTI-RTSR	embello/ezr/vdisk.fs	/^    EXTI $08 + constant EXTI-RTSR$/;"	d
EXTI-RTSR	embello/flib/stm32l0/sleep.fs	/^\\    EXTI $08 + constant EXTI-RTSR$/;"	d
EXTI-RTSR	embello/jz4/ex/exti.fs	/^    EXTI $08 + constant EXTI-RTSR$/;"	d
EXTI-RTSR	embello/jz4/ex/rot7.fs	/^    EXTI $08 + constant EXTI-RTSR$/;"	d
EXTI-RTSR	embello/jz4/ex/rot8.fs	/^    EXTI $08 + constant EXTI-RTSR$/;"	d
EXTI-RTSR	embello/sic/e-pinchange.fs	/^    EXTI $08 + constant EXTI-RTSR$/;"	d
EXTI-RTSR	flib/./stm32l0/sleep.fs	/^\\    EXTI $08 + constant EXTI-RTSR$/;"	d
EXTI-RTSR	flib/stm32l0/sleep.fs	/^\\    EXTI $08 + constant EXTI-RTSR$/;"	d
EXTI-SWIER	embello/flib/stm32l0/sleep.fs	/^\\    EXTI $10 + constant EXTI-SWIER$/;"	d
EXTI-SWIER	flib/./stm32l0/sleep.fs	/^\\    EXTI $10 + constant EXTI-SWIER$/;"	d
EXTI-SWIER	flib/stm32l0/sleep.fs	/^\\    EXTI $10 + constant EXTI-SWIER$/;"	d
EXTIME	embello/ezr/simh2/xmodem-24.asm	/^EXTIME	equ	135	;Number of cycles an external receive$/;"	d
FALSE	embello/ezr/simh2/xmodem-24.asm	/^FALSE	equ	0$/;"	d
FALSE	embello/ezr/simh2/xmodem.asm	/^FALSE	equ	0$/;"	d
FBDONE	embello/ezr/simh2/xmodem-24.asm	/^FBDONE:	lxi	h,SECBUF	;Point SECPTR to start$/;"	l
FBDONE	embello/ezr/simh2/xmodem.asm	/^FBDONE:	lxi	h,SECBUF	;Point SECPTR to start$/;"	l
FCB	embello/ezr/simh2/xmodem-24.asm	/^FCB	equ	WBOOT+5CH	;CP\/M file control blk$/;"	d
FCB	embello/ezr/simh2/xmodem.asm	/^FCB	equ	WBOOT+5CH	;CP\/M file control blk$/;"	d
FCBCLR	embello/ezr/simh2/xmodem-24.asm	/^FCBCLR	equ	24		;# of bytes to clear,$/;"	d
FCBCLR	embello/ezr/simh2/xmodem.asm	/^FCBCLR	equ	24		;# of bytes to clear,$/;"	d
FCBDR	embello/ezr/simh2/xmodem-24.asm	/^FCBDR	equ	FCB		;Drive Descriptor$/;"	d
FCBDR	embello/ezr/simh2/xmodem.asm	/^FCBDR	equ	FCB		;Drive Descriptor$/;"	d
FCBEXT	embello/ezr/simh2/xmodem-24.asm	/^FCBEXT	equ	FCB+12		;File extent within FCB$/;"	d
FCBEXT	embello/ezr/simh2/xmodem.asm	/^FCBEXT	equ	FCB+12		;File extent within FCB$/;"	d
FCBFN	embello/ezr/simh2/xmodem-24.asm	/^FCBFN	equ	FCB+1		;File name (8 chrs)$/;"	d
FCBFN	embello/ezr/simh2/xmodem.asm	/^FCBFN	equ	FCB+1		;File name (8 chrs)$/;"	d
FCBFT	embello/ezr/simh2/xmodem-24.asm	/^FCBFT	equ	FCB+9		;File Type (3 chrs)$/;"	d
FCBFT	embello/ezr/simh2/xmodem.asm	/^FCBFT	equ	FCB+9		;File Type (3 chrs)$/;"	d
FCBLUP	embello/ezr/simh2/xmodem-24.asm	/^FCBLUP:	mov	m,a$/;"	l
FCBLUP	embello/ezr/simh2/xmodem.asm	/^FCBLUP:	mov	m,a$/;"	l
FCERR	embello/ezr/simh2/xmodem-24.asm	/^FCERR:	call	MSGXIT$/;"	l
FCERR	embello/ezr/simh2/xmodem.asm	/^FCERR:	call	MSGXIT$/;"	l
FCLOSE	embello/ezr/simh2/xmodem-24.asm	/^FCLOSE:	lxi	d,FCB		;FCB describes the file$/;"	l
FCLOSE	embello/ezr/simh2/xmodem.asm	/^FCLOSE:	lxi	d,FCB		;FCB describes the file$/;"	l
FDELET	embello/ezr/simh2/xmodem-24.asm	/^FDELET:	mvi	c,BDELET	;delete existing file$/;"	l
FDELET	embello/ezr/simh2/xmodem.asm	/^FDELET:	mvi	c,BDELET	;delete existing file$/;"	l
FILBUF	embello/ezr/simh2/xmodem-24.asm	/^FILBUF:	lda	EOFLAG		;Have we seen the EOF?$/;"	l
FILBUF	embello/ezr/simh2/xmodem.asm	/^FILBUF:	lda	EOFLAG		;Have we seen the EOF?$/;"	l
FILNEX	embello/ezr/simh2/xmodem-24.asm	/^FILNEX:	xra	a		;no sectors yet$/;"	l
FILNEX	embello/ezr/simh2/xmodem.asm	/^FILNEX:$/;"	l
FLASH	embello/flib/stm32f1/hal.fs	/^$40022000 constant FLASH$/;"	d
FLASH	embello/flib/stm32f4/hal.fs	/^$40023C00 constant FLASH$/;"	d
FLASH	embello/flib/stm32f7/hal.fs	/^$40023C00 constant FLASH$/;"	d
FLASH	embello/flib/stm32l0/hal.fs	/^$40022000 constant FLASH$/;"	d
FLASH	embello/suf/hal-stm32f1.fs	/^$40022000 constant FLASH$/;"	d
FLASH	flib/./stm32f1/hal.fs	/^$40022000 constant FLASH$/;"	d
FLASH	flib/./stm32f4/hal.fs	/^$40023C00 constant FLASH$/;"	d
FLASH	flib/./stm32f7/hal.fs	/^$40023C00 constant FLASH$/;"	d
FLASH	flib/./stm32l0/hal.fs	/^$40022000 constant FLASH$/;"	d
FLASH	flib/stm32f1/hal.fs	/^$40022000 constant FLASH$/;"	d
FLASH	flib/stm32f4/hal.fs	/^$40023C00 constant FLASH$/;"	d
FLASH	flib/stm32f7/hal.fs	/^$40023C00 constant FLASH$/;"	d
FLASH	flib/stm32l0/hal.fs	/^$40022000 constant FLASH$/;"	d
FLASH-ACR	embello/flib/stm32f1/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	embello/flib/stm32f4/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	embello/flib/stm32f7/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	embello/flib/stm32l0/hal.fs	/^   FLASH $00 + constant FLASH-ACR$/;"	d
FLASH-ACR	embello/suf/hal-stm32f1.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	flib/./stm32f1/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	flib/./stm32f4/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	flib/./stm32f7/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	flib/./stm32l0/hal.fs	/^   FLASH $00 + constant FLASH-ACR$/;"	d
FLASH-ACR	flib/stm32f1/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	flib/stm32f4/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	flib/stm32f7/hal.fs	/^    FLASH $0 + constant FLASH-ACR$/;"	d
FLASH-ACR	flib/stm32l0/hal.fs	/^   FLASH $00 + constant FLASH-ACR$/;"	d
FLASH_ACR	embello/kb7/clock.fs	/^$40023C00      constant FLASH_ACR$/;"	d
FLASH_PECR	embello/flib/stm32l0/eeprom.fs	/^$40022004 constant FLASH_PECR   \\ flash\/eeprom control register$/;"	d
FLASH_PECR	flib/./stm32l0/eeprom.fs	/^$40022004 constant FLASH_PECR   \\ flash\/eeprom control register$/;"	d
FLASH_PECR	flib/stm32l0/eeprom.fs	/^$40022004 constant FLASH_PECR   \\ flash\/eeprom control register$/;"	d
FLASH_PEKEYR	embello/flib/stm32l0/eeprom.fs	/^$4002200C constant FLASH_PEKEYR \\ key register to unlock flash\/eeprom$/;"	d
FLASH_PEKEYR	flib/./stm32l0/eeprom.fs	/^$4002200C constant FLASH_PEKEYR \\ key register to unlock flash\/eeprom$/;"	d
FLASH_PEKEYR	flib/stm32l0/eeprom.fs	/^$4002200C constant FLASH_PEKEYR \\ key register to unlock flash\/eeprom$/;"	d
FLASH_SR	embello/flib/stm32l0/eeprom.fs	/^$40022018 constant FLASH_SR     \\ flash status register$/;"	d
FLASH_SR	flib/./stm32l0/eeprom.fs	/^$40022018 constant FLASH_SR     \\ flash status register$/;"	d
FLASH_SR	flib/stm32l0/eeprom.fs	/^$40022018 constant FLASH_SR     \\ flash status register$/;"	d
FLUSH.MAX	embello/jz3/ook/rf69ook-polling.fs	/^5000 R.TSAMPLE \/ constant FLUSH.MAX$/;"	d
FLUSH.MAX	jz3/./ook/rf69ook-polling.fs	/^5000 R.TSAMPLE \/ constant FLUSH.MAX$/;"	d
FLUSH.MAX	jz3/ook/rf69ook-polling.fs	/^5000 R.TSAMPLE \/ constant FLUSH.MAX$/;"	d
FMT:IMU	tracker/tracker.fs	/^13 constant FMT:IMU \\ packet format for IMU info$/;"	d
FOFAIL	embello/ezr/simh2/xmodem-24.asm	/^FOFAIL:	call	CMSGXT	;Exit w\/ this message$/;"	l
FOFAIL	embello/ezr/simh2/xmodem.asm	/^FOFAIL:	call	CMSGXT	;Exit w\/ this message$/;"	l
FOPEN	embello/ezr/simh2/xmodem-24.asm	/^FOPEN:	lxi	d,FCB		;FCB describes file to open$/;"	l
FOPEN	embello/ezr/simh2/xmodem.asm	/^FOPEN:	lxi	d,FCB		;FCB describes file to open$/;"	l
FSMC-BCR1	embello/flib/fsmc/tft-r61505u.fs	/^$A0000000 constant FSMC-BCR1$/;"	d
FSMC-BCR1	flib/./fsmc/tft-r61505u.fs	/^$A0000000 constant FSMC-BCR1$/;"	d
FSMC-BCR1	flib/fsmc/tft-r61505u.fs	/^$A0000000 constant FSMC-BCR1$/;"	d
FSMC-BTR1	embello/flib/fsmc/tft-r61505u.fs	/^$A0000004 constant FSMC-BTR1$/;"	d
FSMC-BTR1	flib/./fsmc/tft-r61505u.fs	/^$A0000004 constant FSMC-BTR1$/;"	d
FSMC-BTR1	flib/fsmc/tft-r61505u.fs	/^$A0000004 constant FSMC-BTR1$/;"	d
FUNCTIONSET	embello/flib/spi/lcd-pcd8544.fs	/^$20  constant FUNCTIONSET$/;"	d
FUNCTIONSET	flib/./spi/lcd-pcd8544.fs	/^$20  constant FUNCTIONSET$/;"	d
FUNCTIONSET	flib/spi/lcd-pcd8544.fs	/^$20  constant FUNCTIONSET$/;"	d
GETACK	embello/ezr/simh2/xmodem-24.asm	/^GETACK:	$/;"	l
GETACK	embello/ezr/simh2/xmodem.asm	/^GETACK:	$/;"	l
GETBLK	embello/ezr/simh2/xmodem-24.asm	/^GETBLK:$/;"	l
GETBLK	embello/ezr/simh2/xmodem.asm	/^GETBLK:$/;"	l
GETCON	embello/ezr/simh2/xmodem-24.asm	/^GETCON:	mvi	a,CONIN		;read the typed chr$/;"	l
GETCON	embello/ezr/simh2/xmodem.asm	/^GETCON:	mvi	a,CONIN		;read the typed chr$/;"	l
GETHEX	embello/ezr/simh2/xmodem-24.asm	/^GETHEX:	call	WSKIP		;skip whitespace, get a chr$/;"	l
GETHEX	embello/ezr/simh2/xmodem.asm	/^GETHEX:	call	WSKIP		;skip whitespace, get a chr$/;"	l
GHBACK	embello/ezr/simh2/xmodem-24.asm	/^GHBACK:	dcx	d		;back up$/;"	l
GHBACK	embello/ezr/simh2/xmodem.asm	/^GHBACK:	dcx	d		;back up$/;"	l
GHNIB	embello/ezr/simh2/xmodem-24.asm	/^GHNIB:	call	CMDCHR		;get a character$/;"	l
GHNIB	embello/ezr/simh2/xmodem.asm	/^GHNIB:	call	CMDCHR		;get a character$/;"	l
GIOG1	embello/ezr/simh2/xmodem-24.asm	/^GIOG1:	mov	m,a$/;"	l
GOBDOS	embello/ezr/simh2/xmodem-24.asm	/^GOBDOS:	push	h$/;"	l
GOBDOS	embello/ezr/simh2/xmodem.asm	/^GOBDOS:	push	h$/;"	l
GOBIOS	embello/ezr/simh2/xmodem-24.asm	/^GOBIOS:	push	h		;(11)$/;"	l
GOBIOS	embello/ezr/simh2/xmodem.asm	/^GOBIOS:	push	h		;(11)$/;"	l
GPIO-BASE	embello/flib/stm32f1/io-orig.fs	/^$40010800 constant GPIO-BASE$/;"	d
GPIO-BASE	embello/flib/stm32f1/io.fs	/^$40010800 constant GPIO-BASE$/;"	d
GPIO-BASE	embello/flib/stm32f4/io.fs	/^$40020000 constant GPIO-BASE$/;"	d
GPIO-BASE	embello/flib/stm32l0/io.fs	/^$50000000 constant GPIO-BASE$/;"	d
GPIO-BASE	flib/./stm32f1/io-orig.fs	/^$40010800 constant GPIO-BASE$/;"	d
GPIO-BASE	flib/./stm32f1/io.fs	/^$40010800 constant GPIO-BASE$/;"	d
GPIO-BASE	flib/./stm32f4/io.fs	/^$40020000 constant GPIO-BASE$/;"	d
GPIO-BASE	flib/./stm32l0/io.fs	/^$50000000 constant GPIO-BASE$/;"	d
GPIO-BASE	flib/stm32f1/io-orig.fs	/^$40010800 constant GPIO-BASE$/;"	d
GPIO-BASE	flib/stm32f1/io.fs	/^$40010800 constant GPIO-BASE$/;"	d
GPIO-BASE	flib/stm32f4/io.fs	/^$40020000 constant GPIO-BASE$/;"	d
GPIO-BASE	flib/stm32l0/io.fs	/^$50000000 constant GPIO-BASE$/;"	d
GPIO.AFRH	embello/flib/stm32f4/io.fs	/^      $24 constant GPIO.AFRH    \\ Reset 0 Alternate function high register$/;"	d
GPIO.AFRH	embello/flib/stm32l0/io.fs	/^      $24 constant GPIO.AFRH    \\ Reset 0 Alternate function high register$/;"	d
GPIO.AFRH	flib/./stm32f4/io.fs	/^      $24 constant GPIO.AFRH    \\ Reset 0 Alternate function high register$/;"	d
GPIO.AFRH	flib/./stm32l0/io.fs	/^      $24 constant GPIO.AFRH    \\ Reset 0 Alternate function high register$/;"	d
GPIO.AFRH	flib/stm32f4/io.fs	/^      $24 constant GPIO.AFRH    \\ Reset 0 Alternate function high register$/;"	d
GPIO.AFRH	flib/stm32l0/io.fs	/^      $24 constant GPIO.AFRH    \\ Reset 0 Alternate function high register$/;"	d
GPIO.AFRL	embello/flib/stm32f4/io.fs	/^      $20 constant GPIO.AFRL    \\ Reset 0 Alternate function  low register$/;"	d
GPIO.AFRL	embello/flib/stm32l0/io.fs	/^      $20 constant GPIO.AFRL    \\ Reset 0 Alternate function  low register$/;"	d
GPIO.AFRL	flib/./stm32f4/io.fs	/^      $20 constant GPIO.AFRL    \\ Reset 0 Alternate function  low register$/;"	d
GPIO.AFRL	flib/./stm32l0/io.fs	/^      $20 constant GPIO.AFRL    \\ Reset 0 Alternate function  low register$/;"	d
GPIO.AFRL	flib/stm32f4/io.fs	/^      $20 constant GPIO.AFRL    \\ Reset 0 Alternate function  low register$/;"	d
GPIO.AFRL	flib/stm32l0/io.fs	/^      $20 constant GPIO.AFRL    \\ Reset 0 Alternate function  low register$/;"	d
GPIO.BRR	embello/flib/stm32f1/io-orig.fs	/^      $14 constant GPIO.BRR   \\ reset 0         port Bit Reset Register$/;"	d
GPIO.BRR	embello/flib/stm32f1/io.fs	/^      $14 constant GPIO.BRR   \\ reset 0         port Bit Reset Register$/;"	d
GPIO.BRR	flib/./stm32f1/io-orig.fs	/^      $14 constant GPIO.BRR   \\ reset 0         port Bit Reset Register$/;"	d
GPIO.BRR	flib/./stm32f1/io.fs	/^      $14 constant GPIO.BRR   \\ reset 0         port Bit Reset Register$/;"	d
GPIO.BRR	flib/stm32f1/io-orig.fs	/^      $14 constant GPIO.BRR   \\ reset 0         port Bit Reset Register$/;"	d
GPIO.BRR	flib/stm32f1/io.fs	/^      $14 constant GPIO.BRR   \\ reset 0         port Bit Reset Register$/;"	d
GPIO.BSRR	embello/flib/stm32f1/io-orig.fs	/^      $10 constant GPIO.BSRR  \\ reset 0         port Bit Set\/Reset Reg$/;"	d
GPIO.BSRR	embello/flib/stm32f1/io.fs	/^      $10 constant GPIO.BSRR  \\ reset 0         port Bit Set\/Reset Reg$/;"	d
GPIO.BSRR	embello/flib/stm32f4/io.fs	/^      $18 constant GPIO.BSRR    \\ WO      Bit set\/reset register$/;"	d
GPIO.BSRR	embello/flib/stm32l0/io.fs	/^      $18 constant GPIO.BSRR    \\ WO      Bit set\/reset register$/;"	d
GPIO.BSRR	flib/./stm32f1/io-orig.fs	/^      $10 constant GPIO.BSRR  \\ reset 0         port Bit Set\/Reset Reg$/;"	d
GPIO.BSRR	flib/./stm32f1/io.fs	/^      $10 constant GPIO.BSRR  \\ reset 0         port Bit Set\/Reset Reg$/;"	d
GPIO.BSRR	flib/./stm32f4/io.fs	/^      $18 constant GPIO.BSRR    \\ WO      Bit set\/reset register$/;"	d
GPIO.BSRR	flib/./stm32l0/io.fs	/^      $18 constant GPIO.BSRR    \\ WO      Bit set\/reset register$/;"	d
GPIO.BSRR	flib/stm32f1/io-orig.fs	/^      $10 constant GPIO.BSRR  \\ reset 0         port Bit Set\/Reset Reg$/;"	d
GPIO.BSRR	flib/stm32f1/io.fs	/^      $10 constant GPIO.BSRR  \\ reset 0         port Bit Set\/Reset Reg$/;"	d
GPIO.BSRR	flib/stm32f4/io.fs	/^      $18 constant GPIO.BSRR    \\ WO      Bit set\/reset register$/;"	d
GPIO.BSRR	flib/stm32l0/io.fs	/^      $18 constant GPIO.BSRR    \\ WO      Bit set\/reset register$/;"	d
GPIO.CRH	embello/flib/stm32f1/io-orig.fs	/^      $04 constant GPIO.CRH   \\ reset $44444444 port Conf Register High$/;"	d
GPIO.CRH	embello/flib/stm32f1/io.fs	/^      $04 constant GPIO.CRH   \\ reset $44444444 port Conf Register High$/;"	d
GPIO.CRH	flib/./stm32f1/io-orig.fs	/^      $04 constant GPIO.CRH   \\ reset $44444444 port Conf Register High$/;"	d
GPIO.CRH	flib/./stm32f1/io.fs	/^      $04 constant GPIO.CRH   \\ reset $44444444 port Conf Register High$/;"	d
GPIO.CRH	flib/stm32f1/io-orig.fs	/^      $04 constant GPIO.CRH   \\ reset $44444444 port Conf Register High$/;"	d
GPIO.CRH	flib/stm32f1/io.fs	/^      $04 constant GPIO.CRH   \\ reset $44444444 port Conf Register High$/;"	d
GPIO.CRL	embello/flib/stm32f1/io-orig.fs	/^      $00 constant GPIO.CRL   \\ reset $44444444 port Conf Register Low$/;"	d
GPIO.CRL	embello/flib/stm32f1/io.fs	/^      $00 constant GPIO.CRL   \\ reset $44444444 port Conf Register Low$/;"	d
GPIO.CRL	flib/./stm32f1/io-orig.fs	/^      $00 constant GPIO.CRL   \\ reset $44444444 port Conf Register Low$/;"	d
GPIO.CRL	flib/./stm32f1/io.fs	/^      $00 constant GPIO.CRL   \\ reset $44444444 port Conf Register Low$/;"	d
GPIO.CRL	flib/stm32f1/io-orig.fs	/^      $00 constant GPIO.CRL   \\ reset $44444444 port Conf Register Low$/;"	d
GPIO.CRL	flib/stm32f1/io.fs	/^      $00 constant GPIO.CRL   \\ reset $44444444 port Conf Register Low$/;"	d
GPIO.IDR	embello/flib/stm32f1/io-orig.fs	/^      $08 constant GPIO.IDR   \\ RO              Input Data Register$/;"	d
GPIO.IDR	embello/flib/stm32f1/io.fs	/^      $08 constant GPIO.IDR   \\ RO              Input Data Register$/;"	d
GPIO.IDR	embello/flib/stm32f4/io.fs	/^      $10 constant GPIO.IDR     \\ RO      Input Data Register$/;"	d
GPIO.IDR	embello/flib/stm32l0/io.fs	/^      $10 constant GPIO.IDR     \\ RO      Input Data Register$/;"	d
GPIO.IDR	flib/./stm32f1/io-orig.fs	/^      $08 constant GPIO.IDR   \\ RO              Input Data Register$/;"	d
GPIO.IDR	flib/./stm32f1/io.fs	/^      $08 constant GPIO.IDR   \\ RO              Input Data Register$/;"	d
GPIO.IDR	flib/./stm32f4/io.fs	/^      $10 constant GPIO.IDR     \\ RO      Input Data Register$/;"	d
GPIO.IDR	flib/./stm32l0/io.fs	/^      $10 constant GPIO.IDR     \\ RO      Input Data Register$/;"	d
GPIO.IDR	flib/stm32f1/io-orig.fs	/^      $08 constant GPIO.IDR   \\ RO              Input Data Register$/;"	d
GPIO.IDR	flib/stm32f1/io.fs	/^      $08 constant GPIO.IDR   \\ RO              Input Data Register$/;"	d
GPIO.IDR	flib/stm32f4/io.fs	/^      $10 constant GPIO.IDR     \\ RO      Input Data Register$/;"	d
GPIO.IDR	flib/stm32l0/io.fs	/^      $10 constant GPIO.IDR     \\ RO      Input Data Register$/;"	d
GPIO.MODER	embello/flib/stm32f4/io.fs	/^      $00 constant GPIO.MODER   \\ Reset 0 Port Mode Register$/;"	d
GPIO.MODER	embello/flib/stm32l0/io.fs	/^      $00 constant GPIO.MODER   \\ Reset 0 Port Mode Register$/;"	d
GPIO.MODER	flib/./stm32f4/io.fs	/^      $00 constant GPIO.MODER   \\ Reset 0 Port Mode Register$/;"	d
GPIO.MODER	flib/./stm32l0/io.fs	/^      $00 constant GPIO.MODER   \\ Reset 0 Port Mode Register$/;"	d
GPIO.MODER	flib/stm32f4/io.fs	/^      $00 constant GPIO.MODER   \\ Reset 0 Port Mode Register$/;"	d
GPIO.MODER	flib/stm32l0/io.fs	/^      $00 constant GPIO.MODER   \\ Reset 0 Port Mode Register$/;"	d
GPIO.ODR	embello/flib/stm32f1/io-orig.fs	/^      $0C constant GPIO.ODR   \\ reset 0         Output Data Register$/;"	d
GPIO.ODR	embello/flib/stm32f1/io.fs	/^      $0C constant GPIO.ODR   \\ reset 0         Output Data Register$/;"	d
GPIO.ODR	embello/flib/stm32f4/io.fs	/^      $14 constant GPIO.ODR     \\ Reset 0 Output Data Register$/;"	d
GPIO.ODR	embello/flib/stm32l0/io.fs	/^      $14 constant GPIO.ODR     \\ Reset 0 Output Data Register$/;"	d
GPIO.ODR	flib/./stm32f1/io-orig.fs	/^      $0C constant GPIO.ODR   \\ reset 0         Output Data Register$/;"	d
GPIO.ODR	flib/./stm32f1/io.fs	/^      $0C constant GPIO.ODR   \\ reset 0         Output Data Register$/;"	d
GPIO.ODR	flib/./stm32f4/io.fs	/^      $14 constant GPIO.ODR     \\ Reset 0 Output Data Register$/;"	d
GPIO.ODR	flib/./stm32l0/io.fs	/^      $14 constant GPIO.ODR     \\ Reset 0 Output Data Register$/;"	d
GPIO.ODR	flib/stm32f1/io-orig.fs	/^      $0C constant GPIO.ODR   \\ reset 0         Output Data Register$/;"	d
GPIO.ODR	flib/stm32f1/io.fs	/^      $0C constant GPIO.ODR   \\ reset 0         Output Data Register$/;"	d
GPIO.ODR	flib/stm32f4/io.fs	/^      $14 constant GPIO.ODR     \\ Reset 0 Output Data Register$/;"	d
GPIO.ODR	flib/stm32l0/io.fs	/^      $14 constant GPIO.ODR     \\ Reset 0 Output Data Register$/;"	d
GPIO.OSPEEDR	embello/flib/stm32f4/io.fs	/^      $08 constant GPIO.OSPEEDR \\ Reset 0 Output Speed Register$/;"	d
GPIO.OSPEEDR	embello/flib/stm32l0/io.fs	/^      $08 constant GPIO.OSPEEDR \\ Reset 0 Output Speed Register$/;"	d
GPIO.OSPEEDR	flib/./stm32f4/io.fs	/^      $08 constant GPIO.OSPEEDR \\ Reset 0 Output Speed Register$/;"	d
GPIO.OSPEEDR	flib/./stm32l0/io.fs	/^      $08 constant GPIO.OSPEEDR \\ Reset 0 Output Speed Register$/;"	d
GPIO.OSPEEDR	flib/stm32f4/io.fs	/^      $08 constant GPIO.OSPEEDR \\ Reset 0 Output Speed Register$/;"	d
GPIO.OSPEEDR	flib/stm32l0/io.fs	/^      $08 constant GPIO.OSPEEDR \\ Reset 0 Output Speed Register$/;"	d
GPIO.OTYPER	embello/flib/stm32f4/io.fs	/^      $04 constant GPIO.OTYPER  \\ Reset 0 Port Output type register$/;"	d
GPIO.OTYPER	embello/flib/stm32l0/io.fs	/^      $04 constant GPIO.OTYPER  \\ Reset 0 Port Output type register$/;"	d
GPIO.OTYPER	flib/./stm32f4/io.fs	/^      $04 constant GPIO.OTYPER  \\ Reset 0 Port Output type register$/;"	d
GPIO.OTYPER	flib/./stm32l0/io.fs	/^      $04 constant GPIO.OTYPER  \\ Reset 0 Port Output type register$/;"	d
GPIO.OTYPER	flib/stm32f4/io.fs	/^      $04 constant GPIO.OTYPER  \\ Reset 0 Port Output type register$/;"	d
GPIO.OTYPER	flib/stm32l0/io.fs	/^      $04 constant GPIO.OTYPER  \\ Reset 0 Port Output type register$/;"	d
GPIO.PUPDR	embello/flib/stm32f4/io.fs	/^      $0C constant GPIO.PUPDR   \\ Reset 0 Pullup \/ Pulldown $/;"	d
GPIO.PUPDR	embello/flib/stm32l0/io.fs	/^      $0C constant GPIO.PUPDR   \\ Reset 0 Pullup \/ Pulldown $/;"	d
GPIO.PUPDR	flib/./stm32f4/io.fs	/^      $0C constant GPIO.PUPDR   \\ Reset 0 Pullup \/ Pulldown $/;"	d
GPIO.PUPDR	flib/./stm32l0/io.fs	/^      $0C constant GPIO.PUPDR   \\ Reset 0 Pullup \/ Pulldown $/;"	d
GPIO.PUPDR	flib/stm32f4/io.fs	/^      $0C constant GPIO.PUPDR   \\ Reset 0 Pullup \/ Pulldown $/;"	d
GPIO.PUPDR	flib/stm32l0/io.fs	/^      $0C constant GPIO.PUPDR   \\ Reset 0 Pullup \/ Pulldown $/;"	d
GPRMC	embello/flib/uart/gps.fs	/^$8A constant GPRMC \\ packet format$/;"	d
GPRMC	flib/./uart/gps.fs	/^$8A constant GPRMC \\ packet format$/;"	d
GPRMC	flib/uart/gps.fs	/^$8A constant GPRMC \\ packet format$/;"	d
GREEN	embello/lnr/ex/pwm.fs	/^PA1 constant GREEN$/;"	d
GTHEXM	embello/ezr/simh2/xmodem-24.asm	/^GTHEXM:	push	h$/;"	l
GTHEXM	embello/ezr/simh2/xmodem.asm	/^GTHEXM:	push	h$/;"	l
GTMODE	embello/ezr/simh2/xmodem-24.asm	/^GTMODE:	mvi	b,NAKTO		;Long timeout$/;"	l
GTMODE	embello/ezr/simh2/xmodem.asm	/^GTMODE:	mvi	b,NAKTO		;Long timeout$/;"	l
HC1	embello/ezr/simh2/xmodem-24.asm	/^HC1:	sui	'0'$/;"	l
HC1	embello/ezr/simh2/xmodem.asm	/^HC1:	sui	'0'$/;"	l
HEATER	embello/prc2/dev.fs	/^PB8  constant HEATER  \\ on = "1", off = "0"$/;"	d
HEX2BN	embello/ezr/simh2/xmodem-24.asm	/^HEX2BN:	cpi	'9'+1		;below ASCII 9?$/;"	l
HEX2BN	embello/ezr/simh2/xmodem.asm	/^HEX2BN:	cpi	'9'+1		;below ASCII 9?$/;"	l
HLPEXT	embello/ezr/simh2/xmodem-24.asm	/^HLPEXT:	call	CILPRT		;print this message$/;"	l
HLPEXT	embello/ezr/simh2/xmodem.asm	/^HLPEXT:	call	CILPRT		;print this message$/;"	l
HPRE/1	embello/kb7/clock.fs	/^$0 constant HPRE\/1$/;"	d
HPRE/128	embello/kb7/clock.fs	/^$D constant HPRE\/128$/;"	d
HPRE/16	embello/kb7/clock.fs	/^$B constant HPRE\/16$/;"	d
HPRE/2	embello/kb7/clock.fs	/^$8 constant HPRE\/2$/;"	d
HPRE/256	embello/kb7/clock.fs	/^$E constant HPRE\/256$/;"	d
HPRE/4	embello/kb7/clock.fs	/^$9 constant HPRE\/4$/;"	d
HPRE/512	embello/kb7/clock.fs	/^$F constant HPRE\/512$/;"	d
HPRE/64	embello/kb7/clock.fs	/^$C constant HPRE\/64$/;"	d
HPRE/8	embello/kb7/clock.fs	/^$A constant HPRE\/8$/;"	d
HSE_CLK_HZ	embello/kb7/clock.fs	/^8000000 constant HSE_CLK_HZ$/;"	d
HSI_CLK_HZ	embello/kb7/clock.fs	/^16000000 constant HSI_CLK_HZ$/;"	d
I2C.DELAY	embello/ezr/core.fs	/^\\ 9 constant I2C.DELAY$/;"	d
I2C.DELAY	embello/prc2/core.fs	/^9 constant I2C.DELAY$/;"	d
I2C.DELAY	embello/qld/core.fs	/^9 constant I2C.DELAY$/;"	d
I2C.DELAY	embello/tex/board.fs	/^99 constant I2C.DELAY$/;"	d
I2C1	embello/flib/stm32f1/i2c.fs	/^$40005400 constant I2C1$/;"	d
I2C1	embello/flib/stm32l0/i2c.fs	/^$40005400 constant I2C1$/;"	d
I2C1	flib/./stm32f1/i2c.fs	/^$40005400 constant I2C1$/;"	d
I2C1	flib/./stm32l0/i2c.fs	/^$40005400 constant I2C1$/;"	d
I2C1	flib/stm32f1/i2c.fs	/^$40005400 constant I2C1$/;"	d
I2C1	flib/stm32l0/i2c.fs	/^$40005400 constant I2C1$/;"	d
I2C1-CCR	embello/flib/stm32f1/i2c.fs	/^     I2C1 $1C + constant I2C1-CCR$/;"	d
I2C1-CCR	flib/./stm32f1/i2c.fs	/^     I2C1 $1C + constant I2C1-CCR$/;"	d
I2C1-CCR	flib/stm32f1/i2c.fs	/^     I2C1 $1C + constant I2C1-CCR$/;"	d
I2C1-CR1	embello/flib/stm32f1/i2c.fs	/^     I2C1 $00 + constant I2C1-CR1$/;"	d
I2C1-CR1	embello/flib/stm32l0/i2c.fs	/^     I2C1 $00 + constant I2C1-CR1$/;"	d
I2C1-CR1	flib/./stm32f1/i2c.fs	/^     I2C1 $00 + constant I2C1-CR1$/;"	d
I2C1-CR1	flib/./stm32l0/i2c.fs	/^     I2C1 $00 + constant I2C1-CR1$/;"	d
I2C1-CR1	flib/stm32f1/i2c.fs	/^     I2C1 $00 + constant I2C1-CR1$/;"	d
I2C1-CR1	flib/stm32l0/i2c.fs	/^     I2C1 $00 + constant I2C1-CR1$/;"	d
I2C1-CR2	embello/flib/stm32f1/i2c.fs	/^     I2C1 $04 + constant I2C1-CR2$/;"	d
I2C1-CR2	embello/flib/stm32l0/i2c.fs	/^     I2C1 $04 + constant I2C1-CR2$/;"	d
I2C1-CR2	flib/./stm32f1/i2c.fs	/^     I2C1 $04 + constant I2C1-CR2$/;"	d
I2C1-CR2	flib/./stm32l0/i2c.fs	/^     I2C1 $04 + constant I2C1-CR2$/;"	d
I2C1-CR2	flib/stm32f1/i2c.fs	/^     I2C1 $04 + constant I2C1-CR2$/;"	d
I2C1-CR2	flib/stm32l0/i2c.fs	/^     I2C1 $04 + constant I2C1-CR2$/;"	d
I2C1-DR	embello/flib/stm32f1/i2c.fs	/^     I2C1 $10 + constant I2C1-DR$/;"	d
I2C1-DR	flib/./stm32f1/i2c.fs	/^     I2C1 $10 + constant I2C1-DR$/;"	d
I2C1-DR	flib/stm32f1/i2c.fs	/^     I2C1 $10 + constant I2C1-DR$/;"	d
I2C1-ICR	embello/flib/stm32l0/i2c.fs	/^     I2C1 $1C + constant I2C1-ICR$/;"	d
I2C1-ICR	flib/./stm32l0/i2c.fs	/^     I2C1 $1C + constant I2C1-ICR$/;"	d
I2C1-ICR	flib/stm32l0/i2c.fs	/^     I2C1 $1C + constant I2C1-ICR$/;"	d
I2C1-ISR	embello/flib/stm32l0/i2c.fs	/^     I2C1 $18 + constant I2C1-ISR$/;"	d
I2C1-ISR	flib/./stm32l0/i2c.fs	/^     I2C1 $18 + constant I2C1-ISR$/;"	d
I2C1-ISR	flib/stm32l0/i2c.fs	/^     I2C1 $18 + constant I2C1-ISR$/;"	d
I2C1-OAR1	embello/flib/stm32f1/i2c.fs	/^     I2C1 $08 + constant I2C1-OAR1$/;"	d
I2C1-OAR1	embello/flib/stm32l0/i2c.fs	/^\\    I2C1 $08 + constant I2C1-OAR1$/;"	d
I2C1-OAR1	flib/./stm32f1/i2c.fs	/^     I2C1 $08 + constant I2C1-OAR1$/;"	d
I2C1-OAR1	flib/./stm32l0/i2c.fs	/^\\    I2C1 $08 + constant I2C1-OAR1$/;"	d
I2C1-OAR1	flib/stm32f1/i2c.fs	/^     I2C1 $08 + constant I2C1-OAR1$/;"	d
I2C1-OAR1	flib/stm32l0/i2c.fs	/^\\    I2C1 $08 + constant I2C1-OAR1$/;"	d
I2C1-OAR2	embello/flib/stm32f1/i2c.fs	/^     I2C1 $0C + constant I2C1-OAR2$/;"	d
I2C1-OAR2	embello/flib/stm32l0/i2c.fs	/^\\    I2C1 $0C + constant I2C1-OAR2$/;"	d
I2C1-OAR2	flib/./stm32f1/i2c.fs	/^     I2C1 $0C + constant I2C1-OAR2$/;"	d
I2C1-OAR2	flib/./stm32l0/i2c.fs	/^\\    I2C1 $0C + constant I2C1-OAR2$/;"	d
I2C1-OAR2	flib/stm32f1/i2c.fs	/^     I2C1 $0C + constant I2C1-OAR2$/;"	d
I2C1-OAR2	flib/stm32l0/i2c.fs	/^\\    I2C1 $0C + constant I2C1-OAR2$/;"	d
I2C1-PXCR	embello/flib/stm32l0/i2c.fs	/^\\    I2C1 $20 + constant I2C1-PXCR$/;"	d
I2C1-PXCR	flib/./stm32l0/i2c.fs	/^\\    I2C1 $20 + constant I2C1-PXCR$/;"	d
I2C1-PXCR	flib/stm32l0/i2c.fs	/^\\    I2C1 $20 + constant I2C1-PXCR$/;"	d
I2C1-RXDR	embello/flib/stm32l0/i2c.fs	/^     I2C1 $24 + constant I2C1-RXDR$/;"	d
I2C1-RXDR	flib/./stm32l0/i2c.fs	/^     I2C1 $24 + constant I2C1-RXDR$/;"	d
I2C1-RXDR	flib/stm32l0/i2c.fs	/^     I2C1 $24 + constant I2C1-RXDR$/;"	d
I2C1-SR1	embello/flib/stm32f1/i2c.fs	/^     I2C1 $14 + constant I2C1-SR1$/;"	d
I2C1-SR1	flib/./stm32f1/i2c.fs	/^     I2C1 $14 + constant I2C1-SR1$/;"	d
I2C1-SR1	flib/stm32f1/i2c.fs	/^     I2C1 $14 + constant I2C1-SR1$/;"	d
I2C1-SR2	embello/flib/stm32f1/i2c.fs	/^     I2C1 $18 + constant I2C1-SR2$/;"	d
I2C1-SR2	flib/./stm32f1/i2c.fs	/^     I2C1 $18 + constant I2C1-SR2$/;"	d
I2C1-SR2	flib/stm32f1/i2c.fs	/^     I2C1 $18 + constant I2C1-SR2$/;"	d
I2C1-TIMEOUTR	embello/flib/stm32l0/i2c.fs	/^\\    I2C1 $14 + constant I2C1-TIMEOUTR$/;"	d
I2C1-TIMEOUTR	flib/./stm32l0/i2c.fs	/^\\    I2C1 $14 + constant I2C1-TIMEOUTR$/;"	d
I2C1-TIMEOUTR	flib/stm32l0/i2c.fs	/^\\    I2C1 $14 + constant I2C1-TIMEOUTR$/;"	d
I2C1-TIMINGR	embello/flib/stm32l0/i2c.fs	/^     I2C1 $10 + constant I2C1-TIMINGR$/;"	d
I2C1-TIMINGR	flib/./stm32l0/i2c.fs	/^     I2C1 $10 + constant I2C1-TIMINGR$/;"	d
I2C1-TIMINGR	flib/stm32l0/i2c.fs	/^     I2C1 $10 + constant I2C1-TIMINGR$/;"	d
I2C1-TRISE	embello/flib/stm32f1/i2c.fs	/^     I2C1 $20 + constant I2C1-TRISE$/;"	d
I2C1-TRISE	flib/./stm32f1/i2c.fs	/^     I2C1 $20 + constant I2C1-TRISE$/;"	d
I2C1-TRISE	flib/stm32f1/i2c.fs	/^     I2C1 $20 + constant I2C1-TRISE$/;"	d
I2C1-TXDR	embello/flib/stm32l0/i2c.fs	/^     I2C1 $28 + constant I2C1-TXDR$/;"	d
I2C1-TXDR	flib/./stm32l0/i2c.fs	/^     I2C1 $28 + constant I2C1-TXDR$/;"	d
I2C1-TXDR	flib/stm32l0/i2c.fs	/^     I2C1 $28 + constant I2C1-TXDR$/;"	d
I2C2	embello/flib/stm32f1/i2c.fs	/^$40005800 constant I2C2$/;"	d
I2C2	flib/./stm32f1/i2c.fs	/^$40005800 constant I2C2$/;"	d
I2C2	flib/stm32f1/i2c.fs	/^$40005800 constant I2C2$/;"	d
ICOMBF	embello/ezr/simh2/xmodem-24.asm	/^ICOMBF:	ds	80$/;"	d
ICOMBF	embello/ezr/simh2/xmodem.asm	/^ICOMBF:	ds	80$/;"	d
ILPRNT	embello/ezr/simh2/xmodem-24.asm	/^ILPRNT:	xthl			;Save hl, get msg addr$/;"	l
ILPRNT	embello/ezr/simh2/xmodem.asm	/^ILPRNT:	xthl			;Save hl, get msg addr$/;"	l
IMODE-ADC	embello/flib/stm32f1/io-orig.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	embello/flib/stm32f1/io.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	embello/flib/stm32f4/io.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	embello/flib/stm32l0/io.fs	/^%0001100 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	flib/./stm32f1/io-orig.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	flib/./stm32f1/io.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	flib/./stm32f4/io.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	flib/./stm32l0/io.fs	/^%0001100 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	flib/stm32f1/io-orig.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	flib/stm32f1/io.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	flib/stm32f4/io.fs	/^%0000 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-ADC	flib/stm32l0/io.fs	/^%0001100 constant IMODE-ADC    \\ input, analog$/;"	d
IMODE-FLOAT	embello/flib/stm32f1/io-orig.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	embello/flib/stm32f1/io.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	embello/flib/stm32f4/io.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	embello/flib/stm32l0/io.fs	/^%0000000 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	flib/./stm32f1/io-orig.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	flib/./stm32f1/io.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	flib/./stm32f4/io.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	flib/./stm32l0/io.fs	/^%0000000 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	flib/stm32f1/io-orig.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	flib/stm32f1/io.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	flib/stm32f4/io.fs	/^%0100 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-FLOAT	flib/stm32l0/io.fs	/^%0000000 constant IMODE-FLOAT  \\ input, floating$/;"	d
IMODE-HIGH	embello/flib/stm32l0/io.fs	/^%0010000 constant IMODE-HIGH   \\ input, pull up$/;"	d
IMODE-HIGH	flib/./stm32l0/io.fs	/^%0010000 constant IMODE-HIGH   \\ input, pull up$/;"	d
IMODE-HIGH	flib/stm32l0/io.fs	/^%0010000 constant IMODE-HIGH   \\ input, pull up$/;"	d
IMODE-LOW	embello/flib/stm32l0/io.fs	/^%0100000 constant IMODE-LOW    \\ input, pull down$/;"	d
IMODE-LOW	flib/./stm32l0/io.fs	/^%0100000 constant IMODE-LOW    \\ input, pull down$/;"	d
IMODE-LOW	flib/stm32l0/io.fs	/^%0100000 constant IMODE-LOW    \\ input, pull down$/;"	d
IMODE-PULL	embello/flib/stm32f1/io-orig.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODE-PULL	embello/flib/stm32f1/io.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODE-PULL	embello/flib/stm32f4/io.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODE-PULL	flib/./stm32f1/io-orig.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODE-PULL	flib/./stm32f1/io.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODE-PULL	flib/./stm32f4/io.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODE-PULL	flib/stm32f1/io-orig.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODE-PULL	flib/stm32f1/io.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODE-PULL	flib/stm32f4/io.fs	/^%1000 constant IMODE-PULL   \\ input, pull-up\/down$/;"	d
IMODFY	embello/ezr/simh2/xmodem-24.asm	/^IMODFY:	in	SIOSTA		;(10+1)status port (modified)$/;"	l
IMODFY	embello/ezr/simh2/xmodem.asm	/^IMODFY:	in	SIOSTA		;(10+1)status port (modified)$/;"	l
INIT	embello/ezr/simh2/xmodem-24.asm	/^INIT:	sub	a		;test for 8080 or Z80$/;"	l
INIT	embello/ezr/simh2/xmodem.asm	/^INIT:	sub	a		;test for 8080 or Z80$/;"	l
IO-PIN	embello/jz1/ex/iorate.fs	/^PA0 constant IO-PIN$/;"	d
IO-PIN	jz1/./ex/iorate.fs	/^PA0 constant IO-PIN$/;"	d
IO-PIN	jz1/ex/iorate.fs	/^PA0 constant IO-PIN$/;"	d
IO-PORTS	embello/flib/stm32l0/hal.fs	/^[ifndef] IO-PORTS  3 constant IO-PORTS  [then]  \\ A..C$/;"	d
IO-PORTS	flib/./stm32l0/hal.fs	/^[ifndef] IO-PORTS  3 constant IO-PORTS  [then]  \\ A..C$/;"	d
IO-PORTS	flib/stm32l0/hal.fs	/^[ifndef] IO-PORTS  3 constant IO-PORTS  [then]  \\ A..C$/;"	d
IO.GPIO	embello/jz1/ex/iorate.fs	/^IO-PIN io-base constant IO.GPIO$/;"	d
IO.GPIO	jz1/./ex/iorate.fs	/^IO-PIN io-base constant IO.GPIO$/;"	d
IO.GPIO	jz1/ex/iorate.fs	/^IO-PIN io-base constant IO.GPIO$/;"	d
IO.PIN	embello/jz1/ex/iorate.fs	/^IO-PIN io#     constant IO.PIN$/;"	d
IO.PIN	jz1/./ex/iorate.fs	/^IO-PIN io#     constant IO.PIN$/;"	d
IO.PIN	jz1/ex/iorate.fs	/^IO-PIN io#     constant IO.PIN$/;"	d
IOBYTE	embello/ezr/simh2/xmodem-24.asm	/^IOBYTE	equ	WBOOT+3$/;"	d
IOBYTE	embello/ezr/simh2/xmodem.asm	/^IOBYTE	equ	WBOOT+3$/;"	d
IPLOOP	embello/ezr/simh2/xmodem-24.asm	/^IPLOOP:	mov	a,m$/;"	l
IPLOOP	embello/ezr/simh2/xmodem.asm	/^IPLOOP:	mov	a,m$/;"	l
IPORT	embello/ezr/simh2/xmodem-24.asm	/^IPORT:	out	0		;port address gets modified$/;"	l
IPORT	embello/ezr/simh2/xmodem.asm	/^IPORT:	out	0		;gets modified$/;"	l
IS8080	embello/ezr/simh2/xmodem-24.asm	/^IS8080:$/;"	l
IS8080	embello/ezr/simh2/xmodem.asm	/^IS8080:$/;"	l
ISTACK	embello/ezr/simh2/xmodem-24.asm	/^ISTACK:$/;"	l
ISTACK	embello/ezr/simh2/xmodem.asm	/^ISTACK:$/;"	l
JZOP	embello/ezr/simh2/xmodem.asm	/^JZOP	equ	0CAh		;JZ opcode$/;"	d
KEY1	embello/eee/core.fs	/^PB5  constant KEY1$/;"	d
KEY2	embello/eee/core.fs	/^PB4  constant KEY2$/;"	d
KEY3	embello/eee/core.fs	/^PB3  constant KEY3$/;"	d
KEY4	embello/eee/core.fs	/^PA15 constant KEY4$/;"	d
LCD-RAM	embello/flib/fsmc/tft-r61505u.fs	/^$60020000 constant LCD-RAM$/;"	d
LCD-RAM	flib/./fsmc/tft-r61505u.fs	/^$60020000 constant LCD-RAM$/;"	d
LCD-RAM	flib/fsmc/tft-r61505u.fs	/^$60020000 constant LCD-RAM$/;"	d
LCD-REG	embello/flib/fsmc/tft-r61505u.fs	/^$60000000 constant LCD-REG$/;"	d
LCD-REG	flib/./fsmc/tft-r61505u.fs	/^$60000000 constant LCD-REG$/;"	d
LCD-REG	flib/fsmc/tft-r61505u.fs	/^$60000000 constant LCD-REG$/;"	d
LCD_CD	embello/flib/spi/lcd-pcd8544.fs	/^PB10 constant LCD_CD$/;"	d
LCD_CD	flib/./spi/lcd-pcd8544.fs	/^PB10 constant LCD_CD$/;"	d
LCD_CD	flib/spi/lcd-pcd8544.fs	/^PB10 constant LCD_CD$/;"	d
LCD_HEIGHT	embello/flib/spi/lcd-pcd8544.fs	/^48   constant LCD_HEIGHT$/;"	d
LCD_HEIGHT	flib/./spi/lcd-pcd8544.fs	/^48   constant LCD_HEIGHT$/;"	d
LCD_HEIGHT	flib/spi/lcd-pcd8544.fs	/^48   constant LCD_HEIGHT$/;"	d
LCD_RESET	embello/flib/spi/lcd-pcd8544.fs	/^PB2  constant LCD_RESET$/;"	d
LCD_RESET	flib/./spi/lcd-pcd8544.fs	/^PB2  constant LCD_RESET$/;"	d
LCD_RESET	flib/spi/lcd-pcd8544.fs	/^PB2  constant LCD_RESET$/;"	d
LCD_ROW_HEIGHT	embello/flib/spi/lcd-pcd8544.fs	/^6    constant LCD_ROW_HEIGHT$/;"	d
LCD_ROW_HEIGHT	flib/./spi/lcd-pcd8544.fs	/^6    constant LCD_ROW_HEIGHT$/;"	d
LCD_ROW_HEIGHT	flib/spi/lcd-pcd8544.fs	/^6    constant LCD_ROW_HEIGHT$/;"	d
LCD_WIDTH	embello/flib/spi/lcd-pcd8544.fs	/^84   constant LCD_WIDTH$/;"	d
LCD_WIDTH	flib/./spi/lcd-pcd8544.fs	/^84   constant LCD_WIDTH$/;"	d
LCD_WIDTH	flib/spi/lcd-pcd8544.fs	/^84   constant LCD_WIDTH$/;"	d
LDIR	embello/ezr/simh2/xmodem-24.asm	/^LDIR:	mov	a,m$/;"	l
LDIR	embello/ezr/simh2/xmodem.asm	/^LDIR:	mov	a,m$/;"	l
LED	central/board.fs	/^PA1 constant LED$/;"	d
LED	embello/ezr/vdisk.fs	/^PA1  constant LED$/;"	d
LED	embello/i2c/board.fs	/^PA15 constant LED$/;"	d
LED	embello/jz1/board.fs	/^PA15 constant LED$/;"	d
LED	embello/jz3/board.fs	/^PB5 constant LED$/;"	d
LED	embello/jz4/board.fs	/^PA8 constant LED$/;"	d
LED	embello/lnr/board.fs	/^PA15 constant LED$/;"	d
LED	embello/prc2/board.fs	/^PC13 constant LED$/;"	d
LED	embello/qld/board.fs	/^PC13 constant LED$/;"	d
LED	embello/rfc/core.fs	/^PC13 constant LED$/;"	d
LED	embello/rvm/board.fs	/^PA15 constant LED$/;"	d
LED	embello/ten/board.fs	/^PC13 constant LED$/;"	d
LED	embello/tex/board.fs	/^PA1 constant LED$/;"	d
LED	embello/wpp/dev.fs	/^PC13 constant LED$/;"	d
LED	jz1/./board.fs	/^PA15 constant LED$/;"	d
LED	jz1/board.fs	/^PA15 constant LED$/;"	d
LED	jz3/./board.fs	/^PB5 constant LED$/;"	d
LED	jz3/board.fs	/^PB5 constant LED$/;"	d
LED	oledtemp/board.fs	/^PA15 constant LED$/;"	d
LED1	embello/eee/core.fs	/^PA12 constant LED1$/;"	d
LED1	embello/g6s/ex/tasks.fs	/^PA12 constant LED1$/;"	d
LED1	embello/g6s/ex/timers.fs	/^PA12 constant LED1$/;"	d
LED1	embello/i2c/main.fs	/^PA0  constant LED1$/;"	d
LED1	embello/zeb/dev.fs	/^PC0 constant LED1$/;"	d
LED2	embello/eee/core.fs	/^PA11 constant LED2$/;"	d
LED2	embello/g6s/ex/tasks.fs	/^PA11 constant LED2$/;"	d
LED2	embello/g6s/ex/timers.fs	/^PA11 constant LED2$/;"	d
LED2	embello/i2c/main.fs	/^PA1  constant LED2$/;"	d
LED2	embello/zeb/dev.fs	/^PD3 constant LED2$/;"	d
LED3	embello/eee/core.fs	/^PA10 constant LED3  \\ RX$/;"	d
LED3	embello/g6s/ex/tasks.fs	/^PA8  constant LED3$/;"	d
LED3	embello/g6s/ex/timers.fs	/^PA8  constant LED3$/;"	d
LED3	embello/i2c/main.fs	/^PA2  constant LED3$/;"	d
LED3	embello/prc2/dev.fs	/^PB11 constant LED3  \\ on = "1", off = "0" - heartbeat blinker$/;"	d
LED4	embello/eee/core.fs	/^PA9  constant LED4  \\ TX$/;"	d
LED4	embello/g6s/ex/tasks.fs	/^PB2  constant LED4$/;"	d
LED4	embello/g6s/ex/timers.fs	/^PB2  constant LED4$/;"	d
LED4	embello/i2c/main.fs	/^PA3  constant LED4$/;"	d
LED4	embello/prc2/dev.fs	/^PB10 constant LED4  \\ on = "1", off = "0"$/;"	d
LED5	embello/eee/core.fs	/^PA8  constant LED5$/;"	d
LED5	embello/i2c/main.fs	/^PA11 constant LED5$/;"	d
LED5	embello/prc2/dev.fs	/^PB1  constant LED5  \\ on = "1", off = "0"$/;"	d
LED6	embello/eee/core.fs	/^PB2  constant LED6$/;"	d
LED6	embello/i2c/main.fs	/^PA12 constant LED6$/;"	d
LED6	embello/prc2/dev.fs	/^PB0  constant LED6  \\ on = "1", off = "0"$/;"	d
LF	embello/ezr/simh2/xmodem-24.asm	/^LF	equ	0AH		;Linefeed$/;"	d
LF	embello/ezr/simh2/xmodem.asm	/^LF	equ	0AH		;Linefeed$/;"	d
LF	embello/flib/uart/gps.fs	/^10 constant LF$/;"	d
LF	flib/./uart/gps.fs	/^10 constant LF$/;"	d
LF	flib/uart/gps.fs	/^10 constant LF$/;"	d
LF	follower/hc05.fs	/^10 constant LF$/;"	d
LPTIM-ARR	embello/flib/stm32l0/sleep.fs	/^   LPTIM1 $18 + constant LPTIM-ARR$/;"	d
LPTIM-ARR	flib/./stm32l0/sleep.fs	/^   LPTIM1 $18 + constant LPTIM-ARR$/;"	d
LPTIM-ARR	flib/stm32l0/sleep.fs	/^   LPTIM1 $18 + constant LPTIM-ARR$/;"	d
LPTIM-CFGR	embello/flib/stm32l0/sleep.fs	/^   LPTIM1 $0C + constant LPTIM-CFGR$/;"	d
LPTIM-CFGR	flib/./stm32l0/sleep.fs	/^   LPTIM1 $0C + constant LPTIM-CFGR$/;"	d
LPTIM-CFGR	flib/stm32l0/sleep.fs	/^   LPTIM1 $0C + constant LPTIM-CFGR$/;"	d
LPTIM-CMP	embello/flib/stm32l0/sleep.fs	/^   LPTIM1 $14 + constant LPTIM-CMP$/;"	d
LPTIM-CMP	flib/./stm32l0/sleep.fs	/^   LPTIM1 $14 + constant LPTIM-CMP$/;"	d
LPTIM-CMP	flib/stm32l0/sleep.fs	/^   LPTIM1 $14 + constant LPTIM-CMP$/;"	d
LPTIM-CNT	embello/flib/stm32l0/sleep.fs	/^   LPTIM1 $1C + constant LPTIM-CNT$/;"	d
LPTIM-CNT	flib/./stm32l0/sleep.fs	/^   LPTIM1 $1C + constant LPTIM-CNT$/;"	d
LPTIM-CNT	flib/stm32l0/sleep.fs	/^   LPTIM1 $1C + constant LPTIM-CNT$/;"	d
LPTIM-CR	embello/flib/stm32l0/sleep.fs	/^   LPTIM1 $10 + constant LPTIM-CR$/;"	d
LPTIM-CR	flib/./stm32l0/sleep.fs	/^   LPTIM1 $10 + constant LPTIM-CR$/;"	d
LPTIM-CR	flib/stm32l0/sleep.fs	/^   LPTIM1 $10 + constant LPTIM-CR$/;"	d
LPTIM-ICR	embello/flib/stm32l0/sleep.fs	/^   LPTIM1 $04 + constant LPTIM-ICR$/;"	d
LPTIM-ICR	flib/./stm32l0/sleep.fs	/^   LPTIM1 $04 + constant LPTIM-ICR$/;"	d
LPTIM-ICR	flib/stm32l0/sleep.fs	/^   LPTIM1 $04 + constant LPTIM-ICR$/;"	d
LPTIM-IER	embello/flib/stm32l0/sleep.fs	/^   LPTIM1 $08 + constant LPTIM-IER$/;"	d
LPTIM-IER	flib/./stm32l0/sleep.fs	/^   LPTIM1 $08 + constant LPTIM-IER$/;"	d
LPTIM-IER	flib/stm32l0/sleep.fs	/^   LPTIM1 $08 + constant LPTIM-IER$/;"	d
LPTIM-ISR	embello/flib/stm32l0/sleep.fs	/^   LPTIM1 $00 + constant LPTIM-ISR$/;"	d
LPTIM-ISR	flib/./stm32l0/sleep.fs	/^   LPTIM1 $00 + constant LPTIM-ISR$/;"	d
LPTIM-ISR	flib/stm32l0/sleep.fs	/^   LPTIM1 $00 + constant LPTIM-ISR$/;"	d
LPTIM1	embello/flib/stm32l0/sleep.fs	/^$40007C00 constant LPTIM1$/;"	d
LPTIM1	flib/./stm32l0/sleep.fs	/^$40007C00 constant LPTIM1$/;"	d
LPTIM1	flib/stm32l0/sleep.fs	/^$40007C00 constant LPTIM1$/;"	d
M1A	embello/wpp/dev.fs	/^PA0 constant M1A$/;"	d
M1B	embello/wpp/dev.fs	/^PA1 constant M1B$/;"	d
M1C	embello/wpp/dev.fs	/^PA2 constant M1C$/;"	d
M1D	embello/wpp/dev.fs	/^PA3 constant M1D$/;"	d
M2A	embello/wpp/dev.fs	/^PA4 constant M2A$/;"	d
M2B	embello/wpp/dev.fs	/^PA5 constant M2B$/;"	d
M2C	embello/wpp/dev.fs	/^PA6 constant M2C$/;"	d
M2D	embello/wpp/dev.fs	/^PA7 constant M2D$/;"	d
MAX-TIMED	embello/flib/any/timed.fs	/^[ifndef] MAX-TIMED  8 constant MAX-TIMED [then]$/;"	d
MAX-TIMED	flib/./any/timed.fs	/^[ifndef] MAX-TIMED  8 constant MAX-TIMED [then]$/;"	d
MAX-TIMED	flib/any/timed.fs	/^[ifndef] MAX-TIMED  8 constant MAX-TIMED [then]$/;"	d
MCP.ADDR	embello/flib/i2c/mcp3424.fs	/^[ifndef] MCP.ADDR  $68 constant MCP.ADDR  [then]$/;"	d
MCP.ADDR	flib/./i2c/mcp3424.fs	/^[ifndef] MCP.ADDR  $68 constant MCP.ADDR  [then]$/;"	d
MCP.ADDR	flib/i2c/mcp3424.fs	/^[ifndef] MCP.ADDR  $68 constant MCP.ADDR  [then]$/;"	d
MISO	embello/flib/any/spi-bb.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	embello/flib/stm32f1/spi.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	embello/flib/stm32l0/spi.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	embello/jz3/board.fs	/^\\ PA6 constant MISO$/;"	d
MISO	embello/jz4/board.fs	/^PB4 constant MISO$/;"	d
MISO	flib/./any/spi-bb.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	flib/./stm32f1/spi.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	flib/./stm32l0/spi.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	flib/any/spi-bb.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	flib/stm32f1/spi.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	flib/stm32l0/spi.fs	/^[ifndef] MISO  PA6 constant MISO  [then]$/;"	d
MISO	jz3/./board.fs	/^\\ PA6 constant MISO$/;"	d
MISO	jz3/board.fs	/^\\ PA6 constant MISO$/;"	d
MISO2	embello/flib/stm32f1/spi2.fs	/^[ifndef] MISO2  PB14 constant MISO2  [then]$/;"	d
MISO2	flib/./stm32f1/spi2.fs	/^[ifndef] MISO2  PB14 constant MISO2  [then]$/;"	d
MISO2	flib/stm32f1/spi2.fs	/^[ifndef] MISO2  PB14 constant MISO2  [then]$/;"	d
MODIO	embello/ezr/simh2/xmodem-24.asm	/^MODIO:	mov	m,e		;install status port$/;"	l
MODIO	embello/ezr/simh2/xmodem.asm	/^MODIO:	mov	m,e		;install status port$/;"	l
MODIO1	embello/ezr/simh2/xmodem-24.asm	/^MODIO1:$/;"	l
MODIO1	embello/ezr/simh2/xmodem.asm	/^MODIO1:$/;"	l
MOSI	embello/flib/any/spi-bb.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	embello/flib/stm32f1/spi.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	embello/flib/stm32l0/spi.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	embello/jz3/board.fs	/^\\ PA7 constant MOSI$/;"	d
MOSI	embello/jz4/board.fs	/^PB5 constant MOSI$/;"	d
MOSI	flib/./any/spi-bb.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	flib/./stm32f1/spi.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	flib/./stm32l0/spi.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	flib/any/spi-bb.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	flib/stm32f1/spi.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	flib/stm32l0/spi.fs	/^[ifndef] MOSI  PA7 constant MOSI  [then]$/;"	d
MOSI	jz3/./board.fs	/^\\ PA7 constant MOSI$/;"	d
MOSI	jz3/board.fs	/^\\ PA7 constant MOSI$/;"	d
MOSI2	embello/flib/stm32f1/spi2.fs	/^[ifndef] MOSI2  PB15 constant MOSI2  [then]$/;"	d
MOSI2	flib/./stm32f1/spi2.fs	/^[ifndef] MOSI2  PB15 constant MOSI2  [then]$/;"	d
MOSI2	flib/stm32f1/spi2.fs	/^[ifndef] MOSI2  PB15 constant MOSI2  [then]$/;"	d
MRDONE	embello/ezr/simh2/xmodem.asm	/^MRDONE:	ora	a		;clear carry		$/;"	l
MSGXIT	embello/ezr/simh2/xmodem-24.asm	/^MSGXIT:	pop	d		;Get message address$/;"	l
MSGXIT	embello/ezr/simh2/xmodem.asm	/^MSGXIT:	pop	d		;Get message address$/;"	l
N	embello/jz1/ex/leds.fs	/^100 constant N$/;"	d
N	jz1/./ex/leds.fs	/^100 constant N$/;"	d
N	jz1/ex/leds.fs	/^100 constant N$/;"	d
NAK	embello/ezr/simh2/xmodem-24.asm	/^NAK	equ	15H		;XMODEM block negative ACK$/;"	d
NAK	embello/ezr/simh2/xmodem.asm	/^NAK	equ	15H		;XMODEM block negative ACK$/;"	d
NAKCHR	embello/ezr/simh2/xmodem-24.asm	/^NAKCHR:	db	NAK	;current NAK chr$/;"	d
NAKCHR	embello/ezr/simh2/xmodem.asm	/^NAKCHR:	db	NAK	;current NAK chr$/;"	d
NAKTO	embello/ezr/simh2/xmodem-24.asm	/^NAKTO	equ	90	;(90)receiver to send init NAK$/;"	d
NAKTO	embello/ezr/simh2/xmodem.asm	/^NAKTO	equ	90	;(90)receiver to send init NAK$/;"	d
NAMSG	embello/ezr/simh2/xmodem-24.asm	/^NAMSG:	db	'no init from receiver$'$/;"	d
NAMSG	embello/ezr/simh2/xmodem.asm	/^NAMSG:	db	'no init from receiver$'$/;"	d
NFILES	embello/flib/spi/sdcard.fs	/^4 constant NFILES$/;"	d
NFILES	flib/./spi/sdcard.fs	/^4 constant NFILES$/;"	d
NFILES	flib/spi/sdcard.fs	/^4 constant NFILES$/;"	d
NOCFG	embello/ezr/simh2/xmodem-24.asm	/^NOCFG:$/;"	l
NOCFG	embello/ezr/simh2/xmodem.asm	/^NOCFG:$/;"	l
NUM	embello/cag/ex/io.fs	/^  100000 constant NUM$/;"	d
NUM	embello/g6s/ex/io.fs	/^  100000 constant NUM$/;"	d
NUM/5	embello/cag/ex/io.fs	/^ NUM 5 \/ constant NUM\/5$/;"	d
NUM/5	embello/g6s/ex/io.fs	/^ NUM 5 \/ constant NUM\/5$/;"	d
NVIC-EN0R	embello/ezr/vdisk.fs	/^$E000E100 constant NVIC-EN0R \\ IRQ 0 to 31 Set Enable Register$/;"	d
NVIC-EN0R	embello/flib/stm32l0/uart2-irq.fs	/^$E000E100 constant NVIC-EN0R \\ IRQ 0 to 31 Set Enable Register$/;"	d
NVIC-EN0R	embello/jz4/ex/exti.fs	/^$E000E100 constant NVIC-EN0R \\ IRQ 0 to 31 Set Enable Register$/;"	d
NVIC-EN0R	embello/jz4/ex/rot7.fs	/^$E000E100 constant NVIC-EN0R \\ IRQ 0 to 31 Set Enable Register$/;"	d
NVIC-EN0R	embello/jz4/ex/rot8.fs	/^$E000E100 constant NVIC-EN0R \\ IRQ 0 to 31 Set Enable Register$/;"	d
NVIC-EN0R	embello/sic/e-pinchange.fs	/^$E000E100 constant NVIC-EN0R \\ IRQ 0 to 31 Set Enable Register$/;"	d
NVIC-EN0R	flib/./stm32l0/uart2-irq.fs	/^$E000E100 constant NVIC-EN0R \\ IRQ 0 to 31 Set Enable Register$/;"	d
NVIC-EN0R	flib/stm32l0/uart2-irq.fs	/^$E000E100 constant NVIC-EN0R \\ IRQ 0 to 31 Set Enable Register$/;"	d
NVIC-EN1R	embello/flib/stm32f1/uart2-irq.fs	/^$E000E104 constant NVIC-EN1R \\ IRQ 32 to 63 Set Enable Register$/;"	d
NVIC-EN1R	flib/./stm32f1/uart2-irq.fs	/^$E000E104 constant NVIC-EN1R \\ IRQ 32 to 63 Set Enable Register$/;"	d
NVIC-EN1R	flib/stm32f1/uart2-irq.fs	/^$E000E104 constant NVIC-EN1R \\ IRQ 32 to 63 Set Enable Register$/;"	d
OD.DONE	embello/jz3/ook/ook-decoder.fs	/^  1 constant OD.DONE$/;"	d
OD.DONE	jz3/./ook/ook-decoder.fs	/^  1 constant OD.DONE$/;"	d
OD.DONE	jz3/ook/ook-decoder.fs	/^  1 constant OD.DONE$/;"	d
OD.IDLE	embello/jz3/ook/ook-decoder.fs	/^  0 constant OD.IDLE$/;"	d
OD.IDLE	jz3/./ook/ook-decoder.fs	/^  0 constant OD.IDLE$/;"	d
OD.IDLE	jz3/ook/ook-decoder.fs	/^  0 constant OD.IDLE$/;"	d
OD.OK	embello/jz3/ook/ook-decoder.fs	/^  2 constant OD.OK$/;"	d
OD.OK	jz3/./ook/ook-decoder.fs	/^  2 constant OD.OK$/;"	d
OD.OK	jz3/ook/ook-decoder.fs	/^  2 constant OD.OK$/;"	d
OD.SMAX	embello/jz3/ook/ook-decoder.fs	/^  32 constant OD.SMAX$/;"	d
OD.SMAX	jz3/./ook/ook-decoder.fs	/^  32 constant OD.SMAX$/;"	d
OD.SMAX	jz3/ook/ook-decoder.fs	/^  32 constant OD.SMAX$/;"	d
OD.T0	embello/jz3/ook/ook-decoder.fs	/^  3 constant OD.T0$/;"	d
OD.T0	jz3/./ook/ook-decoder.fs	/^  3 constant OD.T0$/;"	d
OD.T0	jz3/ook/ook-decoder.fs	/^  3 constant OD.T0$/;"	d
OD.T1	embello/jz3/ook/ook-decoder.fs	/^  4 constant OD.T1$/;"	d
OD.T1	jz3/./ook/ook-decoder.fs	/^  4 constant OD.T1$/;"	d
OD.T1	jz3/ook/ook-decoder.fs	/^  4 constant OD.T1$/;"	d
OD.T2	embello/jz3/ook/ook-decoder.fs	/^  5 constant OD.T2$/;"	d
OD.T2	jz3/./ook/ook-decoder.fs	/^  5 constant OD.T2$/;"	d
OD.T2	jz3/ook/ook-decoder.fs	/^  5 constant OD.T2$/;"	d
OD.T3	embello/jz3/ook/ook-decoder.fs	/^  6 constant OD.T3$/;"	d
OD.T3	jz3/./ook/ook-decoder.fs	/^  6 constant OD.T3$/;"	d
OD.T3	jz3/ook/ook-decoder.fs	/^  6 constant OD.T3$/;"	d
OK-tests	embello/flib/any/testing.fs	/^0 variable OK-tests$/;"	d
OK-tests	flib/./any/testing.fs	/^0 variable OK-tests$/;"	d
OK-tests	flib/any/testing.fs	/^0 variable OK-tests$/;"	d
OLED	oledtemp/rftemp.fs	/^0 variable OLED   \\ whether OLED is present$/;"	d
OLED.LARGE	central/board.fs	/^1 constant OLED.LARGE  \\ display size: 0 = 128x32, 1 = 128x64 (default)$/;"	d
OLED.LARGE	embello/flib/i2c/ssd1306.fs	/^[ifndef] OLED.LARGE  1 constant OLED.LARGE  [then]  \\ 0 = 128x32, 1 = 128x64$/;"	d
OLED.LARGE	embello/g6u/board.fs	/^0 constant OLED.LARGE  \\ display size: 0 = 128x32, 1 = 128x64 (default)$/;"	d
OLED.LARGE	embello/tex/board.fs	/^0 constant OLED.LARGE  \\ display size: 0 = 128x32, 1 = 128x64 (default)$/;"	d
OLED.LARGE	flib/./i2c/ssd1306.fs	/^[ifndef] OLED.LARGE  1 constant OLED.LARGE  [then]  \\ 0 = 128x32, 1 = 128x64$/;"	d
OLED.LARGE	flib/i2c/ssd1306.fs	/^[ifndef] OLED.LARGE  1 constant OLED.LARGE  [then]  \\ 0 = 128x32, 1 = 128x64$/;"	d
OMODE-AF-OD	embello/flib/stm32f1/io-orig.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	embello/flib/stm32f1/io.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	embello/flib/stm32f4/io.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	embello/flib/stm32l0/io.fs	/^%1001010 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	flib/./stm32f1/io-orig.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	flib/./stm32f1/io.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	flib/./stm32f4/io.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	flib/./stm32l0/io.fs	/^%1001010 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	flib/stm32f1/io-orig.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	flib/stm32f1/io.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	flib/stm32f4/io.fs	/^%1101 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-OD	flib/stm32l0/io.fs	/^%1001010 constant OMODE-AF-OD  \\ alternate function, open drain$/;"	d
OMODE-AF-PP	embello/flib/stm32f1/io-orig.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	embello/flib/stm32f1/io.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	embello/flib/stm32f4/io.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	embello/flib/stm32l0/io.fs	/^%0001010 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	flib/./stm32f1/io-orig.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	flib/./stm32f1/io.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	flib/./stm32f4/io.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	flib/./stm32l0/io.fs	/^%0001010 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	flib/stm32f1/io-orig.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	flib/stm32f1/io.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	flib/stm32f4/io.fs	/^%1001 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-AF-PP	flib/stm32l0/io.fs	/^%0001010 constant OMODE-AF-PP  \\ alternate function, push-pull$/;"	d
OMODE-FAST	embello/flib/stm32f1/io-orig.fs	/^  %10 constant OMODE-FAST   \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	embello/flib/stm32f1/io.fs	/^%10 constant OMODE-FAST  \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	embello/flib/stm32f4/io.fs	/^  %10 constant OMODE-FAST   \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	embello/flib/stm32l0/io.fs	/^ 1 constant OMODE-FAST  \\ add to OMODE-* for 35 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	flib/./stm32f1/io-orig.fs	/^  %10 constant OMODE-FAST   \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	flib/./stm32f1/io.fs	/^%10 constant OMODE-FAST  \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	flib/./stm32f4/io.fs	/^  %10 constant OMODE-FAST   \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	flib/./stm32l0/io.fs	/^ 1 constant OMODE-FAST  \\ add to OMODE-* for 35 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	flib/stm32f1/io-orig.fs	/^  %10 constant OMODE-FAST   \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	flib/stm32f1/io.fs	/^%10 constant OMODE-FAST  \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	flib/stm32f4/io.fs	/^  %10 constant OMODE-FAST   \\ add to OMODE-* for 50 MHz iso 10 MHz drive$/;"	d
OMODE-FAST	flib/stm32l0/io.fs	/^ 1 constant OMODE-FAST  \\ add to OMODE-* for 35 MHz iso 10 MHz drive$/;"	d
OMODE-OD	embello/flib/stm32f1/io-orig.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	embello/flib/stm32f1/io.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	embello/flib/stm32f4/io.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	embello/flib/stm32l0/io.fs	/^%1000110 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	flib/./stm32f1/io-orig.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	flib/./stm32f1/io.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	flib/./stm32f4/io.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	flib/./stm32l0/io.fs	/^%1000110 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	flib/stm32f1/io-orig.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	flib/stm32f1/io.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	flib/stm32f4/io.fs	/^%0101 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-OD	flib/stm32l0/io.fs	/^%1000110 constant OMODE-OD     \\ output, open drain$/;"	d
OMODE-PP	embello/flib/stm32f1/io-orig.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	embello/flib/stm32f1/io.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	embello/flib/stm32f4/io.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	embello/flib/stm32l0/io.fs	/^%0000110 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	flib/./stm32f1/io-orig.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	flib/./stm32f1/io.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	flib/./stm32f4/io.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	flib/./stm32l0/io.fs	/^%0000110 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	flib/stm32f1/io-orig.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	flib/stm32f1/io.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	flib/stm32f4/io.fs	/^%0001 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-PP	flib/stm32l0/io.fs	/^%0000110 constant OMODE-PP     \\ output, push-pull$/;"	d
OMODE-SLOW	embello/flib/stm32f1/io-orig.fs	/^  %01 constant OMODE-SLOW   \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	embello/flib/stm32f1/io.fs	/^%01 constant OMODE-SLOW  \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	embello/flib/stm32f4/io.fs	/^  %01 constant OMODE-SLOW   \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	embello/flib/stm32l0/io.fs	/^-1 constant OMODE-SLOW  \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	flib/./stm32f1/io-orig.fs	/^  %01 constant OMODE-SLOW   \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	flib/./stm32f1/io.fs	/^%01 constant OMODE-SLOW  \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	flib/./stm32f4/io.fs	/^  %01 constant OMODE-SLOW   \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	flib/./stm32l0/io.fs	/^-1 constant OMODE-SLOW  \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	flib/stm32f1/io-orig.fs	/^  %01 constant OMODE-SLOW   \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	flib/stm32f1/io.fs	/^%01 constant OMODE-SLOW  \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	flib/stm32f4/io.fs	/^  %01 constant OMODE-SLOW   \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-SLOW	flib/stm32l0/io.fs	/^-1 constant OMODE-SLOW  \\ add to OMODE-* for 2 MHz iso 10 MHz drive$/;"	d
OMODE-WEAK	embello/flib/stm32l0/io.fs	/^-2 constant OMODE-WEAK  \\ add to OMODE-* for 400 KHz iso 10 MHz drive$/;"	d
OMODE-WEAK	flib/./stm32l0/io.fs	/^-2 constant OMODE-WEAK  \\ add to OMODE-* for 400 KHz iso 10 MHz drive$/;"	d
OMODE-WEAK	flib/stm32l0/io.fs	/^-2 constant OMODE-WEAK  \\ add to OMODE-* for 400 KHz iso 10 MHz drive$/;"	d
OMODFY	embello/ezr/simh2/xmodem-24.asm	/^OMODFY:	in	SIOSTA		;(10+1)status port (modified)$/;"	l
OMODFY	embello/ezr/simh2/xmodem.asm	/^OMODFY:	in	SIOSTA		;(10+1)status port (modified)$/;"	l
OOK.ALEN	embello/flib/spi/rf69ook.fs	/^    5 constant OOK.ALEN$/;"	d
OOK.ALEN	flib/./spi/rf69ook.fs	/^    5 constant OOK.ALEN$/;"	d
OOK.ALEN	flib/spi/rf69ook.fs	/^    5 constant OOK.ALEN$/;"	d
OOK.RSSI.BUFEXP	embello/flib/spi/rf69ook.fs	/^    3 constant OOK.RSSI.BUFEXP \\ powers of 2 for efficientcy$/;"	d
OOK.RSSI.BUFEXP	flib/./spi/rf69ook.fs	/^    3 constant OOK.RSSI.BUFEXP \\ powers of 2 for efficientcy$/;"	d
OOK.RSSI.BUFEXP	flib/spi/rf69ook.fs	/^    3 constant OOK.RSSI.BUFEXP \\ powers of 2 for efficientcy$/;"	d
OOK.RSSI.OFFSET	embello/flib/spi/rf69ook.fs	/^    3 constant OOK.RSSI.OFFSET$/;"	d
OOK.RSSI.OFFSET	flib/./spi/rf69ook.fs	/^    3 constant OOK.RSSI.OFFSET$/;"	d
OOK.RSSI.OFFSET	flib/spi/rf69ook.fs	/^    3 constant OOK.RSSI.OFFSET$/;"	d
OOK.RSSI.QLEN	embello/flib/spi/rf69ook.fs	/^      constant OOK.RSSI.QLEN$/;"	d
OOK.RSSI.QLEN	flib/./spi/rf69ook.fs	/^      constant OOK.RSSI.QLEN$/;"	d
OOK.RSSI.QLEN	flib/spi/rf69ook.fs	/^      constant OOK.RSSI.QLEN$/;"	d
OOK.RSSI.SIZE	embello/flib/spi/rf69ook.fs	/^      constant OOK.RSSI.SIZE$/;"	d
OOK.RSSI.SIZE	flib/./spi/rf69ook.fs	/^      constant OOK.RSSI.SIZE$/;"	d
OOK.RSSI.SIZE	flib/spi/rf69ook.fs	/^      constant OOK.RSSI.SIZE$/;"	d
OPPROT-OUT	embello/sic/main.fs	/^PB5 constant OPPROT-OUT$/;"	d
OPTERR	embello/ezr/simh2/xmodem-24.asm	/^OPTERR:	sta	PAR1		;put it in error msg$/;"	l
OPTERR	embello/ezr/simh2/xmodem.asm	/^OPTERR:	sta	PAR1		;put it in error msg$/;"	l
OPTLUP	embello/ezr/simh2/xmodem-24.asm	/^OPTLUP:	call	WSKIP		;skip whitespace$/;"	l
OPTLUP	embello/ezr/simh2/xmodem.asm	/^OPTLUP:	call	WSKIP		;skip whitespace$/;"	l
OPTTAB	embello/ezr/simh2/xmodem-24.asm	/^OPTTAB:	db	'C',CCKSUM-CMDBAS	;Select checksum mode$/;"	d
OPTTAB	embello/ezr/simh2/xmodem.asm	/^OPTTAB:	db	'C',CCKSUM-CMDBAS	;Select checksum mode$/;"	d
OUT	embello/jz4/ex/tone.fs	/^PA4 constant OUT$/;"	d
PA0	embello/flib/pkg/pins100.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	embello/flib/pkg/pins144.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	embello/flib/pkg/pins32.fs	/^0 0  io constant PA0      1 0  io constant PB0$/;"	d
PA0	embello/flib/pkg/pins36.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	embello/flib/pkg/pins48.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	embello/flib/pkg/pins64.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/./pkg/pins100.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/./pkg/pins144.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/./pkg/pins32.fs	/^0 0  io constant PA0      1 0  io constant PB0$/;"	d
PA0	flib/./pkg/pins36.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/./pkg/pins48.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/./pkg/pins64.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/pkg/pins100.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/pkg/pins144.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/pkg/pins32.fs	/^0 0  io constant PA0      1 0  io constant PB0$/;"	d
PA0	flib/pkg/pins36.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/pkg/pins48.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA0	flib/pkg/pins64.fs	/^0 0  io constant PA0      1 0  io constant PB0      3 0  io constant PD0$/;"	d
PA1	embello/flib/pkg/pins100.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	embello/flib/pkg/pins144.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	embello/flib/pkg/pins32.fs	/^0 1  io constant PA1      1 1  io constant PB1$/;"	d
PA1	embello/flib/pkg/pins36.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	embello/flib/pkg/pins48.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	embello/flib/pkg/pins64.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/./pkg/pins100.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/./pkg/pins144.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/./pkg/pins32.fs	/^0 1  io constant PA1      1 1  io constant PB1$/;"	d
PA1	flib/./pkg/pins36.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/./pkg/pins48.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/./pkg/pins64.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/pkg/pins100.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/pkg/pins144.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/pkg/pins32.fs	/^0 1  io constant PA1      1 1  io constant PB1$/;"	d
PA1	flib/pkg/pins36.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/pkg/pins48.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA1	flib/pkg/pins64.fs	/^0 1  io constant PA1      1 1  io constant PB1      3 1  io constant PD1$/;"	d
PA10	embello/flib/pkg/pins100.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	embello/flib/pkg/pins144.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	embello/flib/pkg/pins32.fs	/^0 10 io constant PA10$/;"	d
PA10	embello/flib/pkg/pins36.fs	/^0 10 io constant PA10$/;"	d
PA10	embello/flib/pkg/pins48.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	embello/flib/pkg/pins64.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	flib/./pkg/pins100.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	flib/./pkg/pins144.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	flib/./pkg/pins32.fs	/^0 10 io constant PA10$/;"	d
PA10	flib/./pkg/pins36.fs	/^0 10 io constant PA10$/;"	d
PA10	flib/./pkg/pins48.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	flib/./pkg/pins64.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	flib/pkg/pins100.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	flib/pkg/pins144.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	flib/pkg/pins32.fs	/^0 10 io constant PA10$/;"	d
PA10	flib/pkg/pins36.fs	/^0 10 io constant PA10$/;"	d
PA10	flib/pkg/pins48.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA10	flib/pkg/pins64.fs	/^0 10 io constant PA10     1 10 io constant PB10$/;"	d
PA11	embello/flib/pkg/pins100.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	embello/flib/pkg/pins144.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	embello/flib/pkg/pins32.fs	/^0 11 io constant PA11$/;"	d
PA11	embello/flib/pkg/pins36.fs	/^0 11 io constant PA11$/;"	d
PA11	embello/flib/pkg/pins48.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	embello/flib/pkg/pins64.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	flib/./pkg/pins100.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	flib/./pkg/pins144.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	flib/./pkg/pins32.fs	/^0 11 io constant PA11$/;"	d
PA11	flib/./pkg/pins36.fs	/^0 11 io constant PA11$/;"	d
PA11	flib/./pkg/pins48.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	flib/./pkg/pins64.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	flib/pkg/pins100.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	flib/pkg/pins144.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	flib/pkg/pins32.fs	/^0 11 io constant PA11$/;"	d
PA11	flib/pkg/pins36.fs	/^0 11 io constant PA11$/;"	d
PA11	flib/pkg/pins48.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA11	flib/pkg/pins64.fs	/^0 11 io constant PA11     1 11 io constant PB11$/;"	d
PA12	embello/flib/pkg/pins100.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	embello/flib/pkg/pins144.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	embello/flib/pkg/pins32.fs	/^0 12 io constant PA12$/;"	d
PA12	embello/flib/pkg/pins36.fs	/^0 12 io constant PA12$/;"	d
PA12	embello/flib/pkg/pins48.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	embello/flib/pkg/pins64.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	flib/./pkg/pins100.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	flib/./pkg/pins144.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	flib/./pkg/pins32.fs	/^0 12 io constant PA12$/;"	d
PA12	flib/./pkg/pins36.fs	/^0 12 io constant PA12$/;"	d
PA12	flib/./pkg/pins48.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	flib/./pkg/pins64.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	flib/pkg/pins100.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	flib/pkg/pins144.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	flib/pkg/pins32.fs	/^0 12 io constant PA12$/;"	d
PA12	flib/pkg/pins36.fs	/^0 12 io constant PA12$/;"	d
PA12	flib/pkg/pins48.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA12	flib/pkg/pins64.fs	/^0 12 io constant PA12     1 12 io constant PB12$/;"	d
PA13	embello/flib/pkg/pins100.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	embello/flib/pkg/pins144.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	embello/flib/pkg/pins32.fs	/^0 13 io constant PA13$/;"	d
PA13	embello/flib/pkg/pins36.fs	/^0 13 io constant PA13$/;"	d
PA13	embello/flib/pkg/pins48.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	embello/flib/pkg/pins64.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	flib/./pkg/pins100.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	flib/./pkg/pins144.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	flib/./pkg/pins32.fs	/^0 13 io constant PA13$/;"	d
PA13	flib/./pkg/pins36.fs	/^0 13 io constant PA13$/;"	d
PA13	flib/./pkg/pins48.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	flib/./pkg/pins64.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	flib/pkg/pins100.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	flib/pkg/pins144.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	flib/pkg/pins32.fs	/^0 13 io constant PA13$/;"	d
PA13	flib/pkg/pins36.fs	/^0 13 io constant PA13$/;"	d
PA13	flib/pkg/pins48.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA13	flib/pkg/pins64.fs	/^0 13 io constant PA13     1 13 io constant PB13     2 13 io constant PC13$/;"	d
PA14	embello/flib/pkg/pins100.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	embello/flib/pkg/pins144.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	embello/flib/pkg/pins32.fs	/^0 14 io constant PA14     2 14 io constant PC14$/;"	d
PA14	embello/flib/pkg/pins36.fs	/^0 14 io constant PA14$/;"	d
PA14	embello/flib/pkg/pins48.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	embello/flib/pkg/pins64.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	flib/./pkg/pins100.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	flib/./pkg/pins144.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	flib/./pkg/pins32.fs	/^0 14 io constant PA14     2 14 io constant PC14$/;"	d
PA14	flib/./pkg/pins36.fs	/^0 14 io constant PA14$/;"	d
PA14	flib/./pkg/pins48.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	flib/./pkg/pins64.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	flib/pkg/pins100.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	flib/pkg/pins144.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	flib/pkg/pins32.fs	/^0 14 io constant PA14     2 14 io constant PC14$/;"	d
PA14	flib/pkg/pins36.fs	/^0 14 io constant PA14$/;"	d
PA14	flib/pkg/pins48.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA14	flib/pkg/pins64.fs	/^0 14 io constant PA14     1 14 io constant PB14     2 14 io constant PC14$/;"	d
PA15	embello/flib/pkg/pins100.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	embello/flib/pkg/pins144.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	embello/flib/pkg/pins32.fs	/^0 15 io constant PA15     2 15 io constant PC15$/;"	d
PA15	embello/flib/pkg/pins36.fs	/^0 15 io constant PA15$/;"	d
PA15	embello/flib/pkg/pins48.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	embello/flib/pkg/pins64.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	flib/./pkg/pins100.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	flib/./pkg/pins144.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	flib/./pkg/pins32.fs	/^0 15 io constant PA15     2 15 io constant PC15$/;"	d
PA15	flib/./pkg/pins36.fs	/^0 15 io constant PA15$/;"	d
PA15	flib/./pkg/pins48.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	flib/./pkg/pins64.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	flib/pkg/pins100.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	flib/pkg/pins144.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	flib/pkg/pins32.fs	/^0 15 io constant PA15     2 15 io constant PC15$/;"	d
PA15	flib/pkg/pins36.fs	/^0 15 io constant PA15$/;"	d
PA15	flib/pkg/pins48.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA15	flib/pkg/pins64.fs	/^0 15 io constant PA15     1 15 io constant PB15     2 15 io constant PC15$/;"	d
PA2	embello/flib/pkg/pins100.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	embello/flib/pkg/pins144.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	embello/flib/pkg/pins32.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	embello/flib/pkg/pins36.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	embello/flib/pkg/pins48.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	embello/flib/pkg/pins64.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/./pkg/pins100.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/./pkg/pins144.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/./pkg/pins32.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/./pkg/pins36.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/./pkg/pins48.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/./pkg/pins64.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/pkg/pins100.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/pkg/pins144.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/pkg/pins32.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/pkg/pins36.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/pkg/pins48.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA2	flib/pkg/pins64.fs	/^0 2  io constant PA2      1 2  io constant PB2$/;"	d
PA3	embello/flib/pkg/pins100.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	embello/flib/pkg/pins144.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	embello/flib/pkg/pins32.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	embello/flib/pkg/pins36.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	embello/flib/pkg/pins48.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	embello/flib/pkg/pins64.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/./pkg/pins100.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/./pkg/pins144.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/./pkg/pins32.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/./pkg/pins36.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/./pkg/pins48.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/./pkg/pins64.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/pkg/pins100.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/pkg/pins144.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/pkg/pins32.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/pkg/pins36.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/pkg/pins48.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA3	flib/pkg/pins64.fs	/^0 3  io constant PA3      1 3  io constant PB3$/;"	d
PA4	embello/flib/pkg/pins100.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	embello/flib/pkg/pins144.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	embello/flib/pkg/pins32.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	embello/flib/pkg/pins36.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	embello/flib/pkg/pins48.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	embello/flib/pkg/pins64.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/./pkg/pins100.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/./pkg/pins144.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/./pkg/pins32.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/./pkg/pins36.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/./pkg/pins48.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/./pkg/pins64.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/pkg/pins100.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/pkg/pins144.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/pkg/pins32.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/pkg/pins36.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/pkg/pins48.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA4	flib/pkg/pins64.fs	/^0 4  io constant PA4      1 4  io constant PB4$/;"	d
PA5	embello/flib/pkg/pins100.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	embello/flib/pkg/pins144.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	embello/flib/pkg/pins32.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	embello/flib/pkg/pins36.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	embello/flib/pkg/pins48.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	embello/flib/pkg/pins64.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/./pkg/pins100.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/./pkg/pins144.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/./pkg/pins32.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/./pkg/pins36.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/./pkg/pins48.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/./pkg/pins64.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/pkg/pins100.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/pkg/pins144.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/pkg/pins32.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/pkg/pins36.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/pkg/pins48.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA5	flib/pkg/pins64.fs	/^0 5  io constant PA5      1 5  io constant PB5$/;"	d
PA6	embello/flib/pkg/pins100.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	embello/flib/pkg/pins144.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	embello/flib/pkg/pins32.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	embello/flib/pkg/pins36.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	embello/flib/pkg/pins48.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	embello/flib/pkg/pins64.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/./pkg/pins100.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/./pkg/pins144.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/./pkg/pins32.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/./pkg/pins36.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/./pkg/pins48.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/./pkg/pins64.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/pkg/pins100.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/pkg/pins144.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/pkg/pins32.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/pkg/pins36.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/pkg/pins48.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA6	flib/pkg/pins64.fs	/^0 6  io constant PA6      1 6  io constant PB6$/;"	d
PA7	embello/flib/pkg/pins100.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	embello/flib/pkg/pins144.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	embello/flib/pkg/pins32.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	embello/flib/pkg/pins36.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	embello/flib/pkg/pins48.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	embello/flib/pkg/pins64.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/./pkg/pins100.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/./pkg/pins144.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/./pkg/pins32.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/./pkg/pins36.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/./pkg/pins48.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/./pkg/pins64.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/pkg/pins100.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/pkg/pins144.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/pkg/pins32.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/pkg/pins36.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/pkg/pins48.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA7	flib/pkg/pins64.fs	/^0 7  io constant PA7      1 7  io constant PB7$/;"	d
PA8	embello/flib/pkg/pins100.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	embello/flib/pkg/pins144.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	embello/flib/pkg/pins32.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	embello/flib/pkg/pins36.fs	/^0 8  io constant PA8$/;"	d
PA8	embello/flib/pkg/pins48.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	embello/flib/pkg/pins64.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/./pkg/pins100.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/./pkg/pins144.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/./pkg/pins32.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/./pkg/pins36.fs	/^0 8  io constant PA8$/;"	d
PA8	flib/./pkg/pins48.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/./pkg/pins64.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/pkg/pins100.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/pkg/pins144.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/pkg/pins32.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/pkg/pins36.fs	/^0 8  io constant PA8$/;"	d
PA8	flib/pkg/pins48.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA8	flib/pkg/pins64.fs	/^0 8  io constant PA8      1 8  io constant PB8$/;"	d
PA9	embello/flib/pkg/pins100.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	embello/flib/pkg/pins144.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	embello/flib/pkg/pins32.fs	/^0 9  io constant PA9$/;"	d
PA9	embello/flib/pkg/pins36.fs	/^0 9  io constant PA9$/;"	d
PA9	embello/flib/pkg/pins48.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	embello/flib/pkg/pins64.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	flib/./pkg/pins100.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	flib/./pkg/pins144.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	flib/./pkg/pins32.fs	/^0 9  io constant PA9$/;"	d
PA9	flib/./pkg/pins36.fs	/^0 9  io constant PA9$/;"	d
PA9	flib/./pkg/pins48.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	flib/./pkg/pins64.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	flib/pkg/pins100.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	flib/pkg/pins144.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	flib/pkg/pins32.fs	/^0 9  io constant PA9$/;"	d
PA9	flib/pkg/pins36.fs	/^0 9  io constant PA9$/;"	d
PA9	flib/pkg/pins48.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PA9	flib/pkg/pins64.fs	/^0 9  io constant PA9      1 9  io constant PB9$/;"	d
PACACK	embello/ezr/simh2/xmodem-24.asm	/^PACACK	equ	'+'	;Sent\/Received a good block$/;"	d
PACACK	embello/ezr/simh2/xmodem.asm	/^PACACK	equ	'+'	;Sent\/Received a good block$/;"	d
PACCNT	embello/ezr/simh2/xmodem-24.asm	/^PACCNT:	db	PACLIN-1 ;Current column position for$/;"	d
PACCNT	embello/ezr/simh2/xmodem.asm	/^PACCNT:	db	PACLIN-1 ;Current column position for$/;"	d
PACERR	embello/ezr/simh2/xmodem-24.asm	/^PACERR:	mvi	c,PACNAK$/;"	l
PACERR	embello/ezr/simh2/xmodem.asm	/^PACERR:	mvi	c,PACNAK$/;"	l
PACIFY	embello/ezr/simh2/xmodem-24.asm	/^PACIFY:	lda	PACCNT		;pacifiers enabled?$/;"	l
PACIFY	embello/ezr/simh2/xmodem.asm	/^PACIFY:	lda	PACCNT		;pacifiers enabled?$/;"	l
PACLIN	embello/ezr/simh2/xmodem-24.asm	/^PACLIN	equ	60	;pacifiers per line$/;"	d
PACLIN	embello/ezr/simh2/xmodem.asm	/^PACLIN	equ	60	;pacifiers per line$/;"	d
PACNAK	embello/ezr/simh2/xmodem-24.asm	/^PACNAK	equ	'-'	;Sent\/Received a NAK$/;"	d
PACNAK	embello/ezr/simh2/xmodem.asm	/^PACNAK	equ	'-'	;Sent\/Received a NAK$/;"	d
PACOK	embello/ezr/simh2/xmodem-24.asm	/^PACOK:	mvi	c,PACACK$/;"	l
PACOK	embello/ezr/simh2/xmodem.asm	/^PACOK:	mvi	c,PACACK$/;"	l
PAR1	embello/ezr/simh2/xmodem-24.asm	/^PAR1:	db	'&'		;parameter goes here$/;"	d
PAR1	embello/ezr/simh2/xmodem.asm	/^PAR1:	db	'&'		;parameter goes here$/;"	d
PARSE	embello/ezr/simh2/xmodem-24.asm	/^PARSE:$/;"	l
PARSE	embello/ezr/simh2/xmodem.asm	/^PARSE:$/;"	l
PC0	embello/flib/pkg/pins100.fs	/^2 0  io constant PC0                                4 0  io constant PE0$/;"	d
PC0	embello/flib/pkg/pins144.fs	/^2 0  io constant PC0                                4 0  io constant PE0$/;"	d
PC0	embello/flib/pkg/pins64.fs	/^2 0  io constant PC0$/;"	d
PC0	flib/./pkg/pins100.fs	/^2 0  io constant PC0                                4 0  io constant PE0$/;"	d
PC0	flib/./pkg/pins144.fs	/^2 0  io constant PC0                                4 0  io constant PE0$/;"	d
PC0	flib/./pkg/pins64.fs	/^2 0  io constant PC0$/;"	d
PC0	flib/pkg/pins100.fs	/^2 0  io constant PC0                                4 0  io constant PE0$/;"	d
PC0	flib/pkg/pins144.fs	/^2 0  io constant PC0                                4 0  io constant PE0$/;"	d
PC0	flib/pkg/pins64.fs	/^2 0  io constant PC0$/;"	d
PC1	embello/flib/pkg/pins100.fs	/^2 1  io constant PC1                                4 1  io constant PE1$/;"	d
PC1	embello/flib/pkg/pins144.fs	/^2 1  io constant PC1                                4 1  io constant PE1$/;"	d
PC1	embello/flib/pkg/pins64.fs	/^2 1  io constant PC1$/;"	d
PC1	flib/./pkg/pins100.fs	/^2 1  io constant PC1                                4 1  io constant PE1$/;"	d
PC1	flib/./pkg/pins144.fs	/^2 1  io constant PC1                                4 1  io constant PE1$/;"	d
PC1	flib/./pkg/pins64.fs	/^2 1  io constant PC1$/;"	d
PC1	flib/pkg/pins100.fs	/^2 1  io constant PC1                                4 1  io constant PE1$/;"	d
PC1	flib/pkg/pins144.fs	/^2 1  io constant PC1                                4 1  io constant PE1$/;"	d
PC1	flib/pkg/pins64.fs	/^2 1  io constant PC1$/;"	d
PC10	embello/flib/pkg/pins100.fs	/^2 10 io constant PC10     3 10 io constant PD10     4 10 io constant PE10$/;"	d
PC10	embello/flib/pkg/pins144.fs	/^2 10 io constant PC10     3 10 io constant PD10     4 10 io constant PE10$/;"	d
PC10	embello/flib/pkg/pins64.fs	/^2 10 io constant PC10$/;"	d
PC10	flib/./pkg/pins100.fs	/^2 10 io constant PC10     3 10 io constant PD10     4 10 io constant PE10$/;"	d
PC10	flib/./pkg/pins144.fs	/^2 10 io constant PC10     3 10 io constant PD10     4 10 io constant PE10$/;"	d
PC10	flib/./pkg/pins64.fs	/^2 10 io constant PC10$/;"	d
PC10	flib/pkg/pins100.fs	/^2 10 io constant PC10     3 10 io constant PD10     4 10 io constant PE10$/;"	d
PC10	flib/pkg/pins144.fs	/^2 10 io constant PC10     3 10 io constant PD10     4 10 io constant PE10$/;"	d
PC10	flib/pkg/pins64.fs	/^2 10 io constant PC10$/;"	d
PC11	embello/flib/pkg/pins100.fs	/^2 11 io constant PC11     3 11 io constant PD11     4 11 io constant PE11$/;"	d
PC11	embello/flib/pkg/pins144.fs	/^2 11 io constant PC11     3 11 io constant PD11     4 11 io constant PE11$/;"	d
PC11	embello/flib/pkg/pins64.fs	/^2 11 io constant PC11$/;"	d
PC11	flib/./pkg/pins100.fs	/^2 11 io constant PC11     3 11 io constant PD11     4 11 io constant PE11$/;"	d
PC11	flib/./pkg/pins144.fs	/^2 11 io constant PC11     3 11 io constant PD11     4 11 io constant PE11$/;"	d
PC11	flib/./pkg/pins64.fs	/^2 11 io constant PC11$/;"	d
PC11	flib/pkg/pins100.fs	/^2 11 io constant PC11     3 11 io constant PD11     4 11 io constant PE11$/;"	d
PC11	flib/pkg/pins144.fs	/^2 11 io constant PC11     3 11 io constant PD11     4 11 io constant PE11$/;"	d
PC11	flib/pkg/pins64.fs	/^2 11 io constant PC11$/;"	d
PC12	embello/flib/pkg/pins100.fs	/^2 12 io constant PC12     3 12 io constant PD12     4 12 io constant PE12$/;"	d
PC12	embello/flib/pkg/pins144.fs	/^2 12 io constant PC12     3 12 io constant PD12     4 12 io constant PE12$/;"	d
PC12	embello/flib/pkg/pins64.fs	/^2 12 io constant PC12$/;"	d
PC12	flib/./pkg/pins100.fs	/^2 12 io constant PC12     3 12 io constant PD12     4 12 io constant PE12$/;"	d
PC12	flib/./pkg/pins144.fs	/^2 12 io constant PC12     3 12 io constant PD12     4 12 io constant PE12$/;"	d
PC12	flib/./pkg/pins64.fs	/^2 12 io constant PC12$/;"	d
PC12	flib/pkg/pins100.fs	/^2 12 io constant PC12     3 12 io constant PD12     4 12 io constant PE12$/;"	d
PC12	flib/pkg/pins144.fs	/^2 12 io constant PC12     3 12 io constant PD12     4 12 io constant PE12$/;"	d
PC12	flib/pkg/pins64.fs	/^2 12 io constant PC12$/;"	d
PC2	embello/flib/pkg/pins100.fs	/^2 2  io constant PC2      3 2  io constant PD2      4 2  io constant PE2$/;"	d
PC2	embello/flib/pkg/pins144.fs	/^2 2  io constant PC2      3 2  io constant PD2      4 2  io constant PE2$/;"	d
PC2	embello/flib/pkg/pins64.fs	/^2 2  io constant PC2$/;"	d
PC2	flib/./pkg/pins100.fs	/^2 2  io constant PC2      3 2  io constant PD2      4 2  io constant PE2$/;"	d
PC2	flib/./pkg/pins144.fs	/^2 2  io constant PC2      3 2  io constant PD2      4 2  io constant PE2$/;"	d
PC2	flib/./pkg/pins64.fs	/^2 2  io constant PC2$/;"	d
PC2	flib/pkg/pins100.fs	/^2 2  io constant PC2      3 2  io constant PD2      4 2  io constant PE2$/;"	d
PC2	flib/pkg/pins144.fs	/^2 2  io constant PC2      3 2  io constant PD2      4 2  io constant PE2$/;"	d
PC2	flib/pkg/pins64.fs	/^2 2  io constant PC2$/;"	d
PC3	embello/flib/pkg/pins100.fs	/^2 3  io constant PC3      3 3  io constant PD3      4 3  io constant PE3$/;"	d
PC3	embello/flib/pkg/pins144.fs	/^2 3  io constant PC3      3 3  io constant PD3      4 3  io constant PE3$/;"	d
PC3	embello/flib/pkg/pins64.fs	/^2 3  io constant PC3$/;"	d
PC3	flib/./pkg/pins100.fs	/^2 3  io constant PC3      3 3  io constant PD3      4 3  io constant PE3$/;"	d
PC3	flib/./pkg/pins144.fs	/^2 3  io constant PC3      3 3  io constant PD3      4 3  io constant PE3$/;"	d
PC3	flib/./pkg/pins64.fs	/^2 3  io constant PC3$/;"	d
PC3	flib/pkg/pins100.fs	/^2 3  io constant PC3      3 3  io constant PD3      4 3  io constant PE3$/;"	d
PC3	flib/pkg/pins144.fs	/^2 3  io constant PC3      3 3  io constant PD3      4 3  io constant PE3$/;"	d
PC3	flib/pkg/pins64.fs	/^2 3  io constant PC3$/;"	d
PC4	embello/flib/pkg/pins100.fs	/^2 4  io constant PC4      3 4  io constant PD4      4 4  io constant PE4$/;"	d
PC4	embello/flib/pkg/pins144.fs	/^2 4  io constant PC4      3 4  io constant PD4      4 4  io constant PE4$/;"	d
PC4	embello/flib/pkg/pins64.fs	/^2 4  io constant PC4$/;"	d
PC4	flib/./pkg/pins100.fs	/^2 4  io constant PC4      3 4  io constant PD4      4 4  io constant PE4$/;"	d
PC4	flib/./pkg/pins144.fs	/^2 4  io constant PC4      3 4  io constant PD4      4 4  io constant PE4$/;"	d
PC4	flib/./pkg/pins64.fs	/^2 4  io constant PC4$/;"	d
PC4	flib/pkg/pins100.fs	/^2 4  io constant PC4      3 4  io constant PD4      4 4  io constant PE4$/;"	d
PC4	flib/pkg/pins144.fs	/^2 4  io constant PC4      3 4  io constant PD4      4 4  io constant PE4$/;"	d
PC4	flib/pkg/pins64.fs	/^2 4  io constant PC4$/;"	d
PC5	embello/flib/pkg/pins100.fs	/^2 5  io constant PC5      3 5  io constant PD5      4 5  io constant PE5$/;"	d
PC5	embello/flib/pkg/pins144.fs	/^2 5  io constant PC5      3 5  io constant PD5      4 5  io constant PE5$/;"	d
PC5	embello/flib/pkg/pins64.fs	/^2 5  io constant PC5$/;"	d
PC5	flib/./pkg/pins100.fs	/^2 5  io constant PC5      3 5  io constant PD5      4 5  io constant PE5$/;"	d
PC5	flib/./pkg/pins144.fs	/^2 5  io constant PC5      3 5  io constant PD5      4 5  io constant PE5$/;"	d
PC5	flib/./pkg/pins64.fs	/^2 5  io constant PC5$/;"	d
PC5	flib/pkg/pins100.fs	/^2 5  io constant PC5      3 5  io constant PD5      4 5  io constant PE5$/;"	d
PC5	flib/pkg/pins144.fs	/^2 5  io constant PC5      3 5  io constant PD5      4 5  io constant PE5$/;"	d
PC5	flib/pkg/pins64.fs	/^2 5  io constant PC5$/;"	d
PC6	embello/flib/pkg/pins100.fs	/^2 6  io constant PC6      3 6  io constant PD6      4 6  io constant PE6$/;"	d
PC6	embello/flib/pkg/pins144.fs	/^2 6  io constant PC6      3 6  io constant PD6      4 6  io constant PE6$/;"	d
PC6	embello/flib/pkg/pins64.fs	/^2 6  io constant PC6$/;"	d
PC6	flib/./pkg/pins100.fs	/^2 6  io constant PC6      3 6  io constant PD6      4 6  io constant PE6$/;"	d
PC6	flib/./pkg/pins144.fs	/^2 6  io constant PC6      3 6  io constant PD6      4 6  io constant PE6$/;"	d
PC6	flib/./pkg/pins64.fs	/^2 6  io constant PC6$/;"	d
PC6	flib/pkg/pins100.fs	/^2 6  io constant PC6      3 6  io constant PD6      4 6  io constant PE6$/;"	d
PC6	flib/pkg/pins144.fs	/^2 6  io constant PC6      3 6  io constant PD6      4 6  io constant PE6$/;"	d
PC6	flib/pkg/pins64.fs	/^2 6  io constant PC6$/;"	d
PC7	embello/flib/pkg/pins100.fs	/^2 7  io constant PC7      3 7  io constant PD7      4 7  io constant PE7$/;"	d
PC7	embello/flib/pkg/pins144.fs	/^2 7  io constant PC7      3 7  io constant PD7      4 7  io constant PE7$/;"	d
PC7	embello/flib/pkg/pins64.fs	/^2 7  io constant PC7$/;"	d
PC7	flib/./pkg/pins100.fs	/^2 7  io constant PC7      3 7  io constant PD7      4 7  io constant PE7$/;"	d
PC7	flib/./pkg/pins144.fs	/^2 7  io constant PC7      3 7  io constant PD7      4 7  io constant PE7$/;"	d
PC7	flib/./pkg/pins64.fs	/^2 7  io constant PC7$/;"	d
PC7	flib/pkg/pins100.fs	/^2 7  io constant PC7      3 7  io constant PD7      4 7  io constant PE7$/;"	d
PC7	flib/pkg/pins144.fs	/^2 7  io constant PC7      3 7  io constant PD7      4 7  io constant PE7$/;"	d
PC7	flib/pkg/pins64.fs	/^2 7  io constant PC7$/;"	d
PC8	embello/flib/pkg/pins100.fs	/^2 8  io constant PC8      3 8  io constant PD8      4 8  io constant PE8$/;"	d
PC8	embello/flib/pkg/pins144.fs	/^2 8  io constant PC8      3 8  io constant PD8      4 8  io constant PE8$/;"	d
PC8	embello/flib/pkg/pins64.fs	/^2 8  io constant PC8$/;"	d
PC8	flib/./pkg/pins100.fs	/^2 8  io constant PC8      3 8  io constant PD8      4 8  io constant PE8$/;"	d
PC8	flib/./pkg/pins144.fs	/^2 8  io constant PC8      3 8  io constant PD8      4 8  io constant PE8$/;"	d
PC8	flib/./pkg/pins64.fs	/^2 8  io constant PC8$/;"	d
PC8	flib/pkg/pins100.fs	/^2 8  io constant PC8      3 8  io constant PD8      4 8  io constant PE8$/;"	d
PC8	flib/pkg/pins144.fs	/^2 8  io constant PC8      3 8  io constant PD8      4 8  io constant PE8$/;"	d
PC8	flib/pkg/pins64.fs	/^2 8  io constant PC8$/;"	d
PC9	embello/flib/pkg/pins100.fs	/^2 9  io constant PC9      3 9  io constant PD9      4 9  io constant PE9$/;"	d
PC9	embello/flib/pkg/pins144.fs	/^2 9  io constant PC9      3 9  io constant PD9      4 9  io constant PE9$/;"	d
PC9	embello/flib/pkg/pins64.fs	/^2 9  io constant PC9$/;"	d
PC9	flib/./pkg/pins100.fs	/^2 9  io constant PC9      3 9  io constant PD9      4 9  io constant PE9$/;"	d
PC9	flib/./pkg/pins144.fs	/^2 9  io constant PC9      3 9  io constant PD9      4 9  io constant PE9$/;"	d
PC9	flib/./pkg/pins64.fs	/^2 9  io constant PC9$/;"	d
PC9	flib/pkg/pins100.fs	/^2 9  io constant PC9      3 9  io constant PD9      4 9  io constant PE9$/;"	d
PC9	flib/pkg/pins144.fs	/^2 9  io constant PC9      3 9  io constant PD9      4 9  io constant PE9$/;"	d
PC9	flib/pkg/pins64.fs	/^2 9  io constant PC9$/;"	d
PCKSUM	embello/ezr/simh2/xmodem-24.asm	/^PCKSUM:	call	ILPRNT$/;"	l
PCKSUM	embello/ezr/simh2/xmodem.asm	/^PCKSUM:	call	ILPRNT$/;"	l
PCRC	embello/ezr/simh2/xmodem-24.asm	/^PCRC:	call	ILPRNT$/;"	l
PCRC	embello/ezr/simh2/xmodem.asm	/^PCRC:	call	ILPRNT$/;"	l
PCRLF	embello/ezr/simh2/xmodem-24.asm	/^PCRLF:	call	ILPRNT$/;"	l
PCRLF	embello/ezr/simh2/xmodem.asm	/^PCRLF:	call	ILPRNT$/;"	l
PCSNT	embello/ezr/simh2/xmodem-24.asm	/^PCSNT:	lda	PACCNT		;quiet mode?$/;"	l
PCSNT	embello/ezr/simh2/xmodem.asm	/^PCSNT:	lda	PACCNT		;quiet mode?$/;"	l
PD13	embello/flib/pkg/pins100.fs	/^                          3 13 io constant PD13     4 13 io constant PE13$/;"	d
PD13	embello/flib/pkg/pins144.fs	/^                          3 13 io constant PD13     4 13 io constant PE13$/;"	d
PD13	flib/./pkg/pins100.fs	/^                          3 13 io constant PD13     4 13 io constant PE13$/;"	d
PD13	flib/./pkg/pins144.fs	/^                          3 13 io constant PD13     4 13 io constant PE13$/;"	d
PD13	flib/pkg/pins100.fs	/^                          3 13 io constant PD13     4 13 io constant PE13$/;"	d
PD13	flib/pkg/pins144.fs	/^                          3 13 io constant PD13     4 13 io constant PE13$/;"	d
PD14	embello/flib/pkg/pins100.fs	/^                          3 14 io constant PD14     4 14 io constant PE14$/;"	d
PD14	embello/flib/pkg/pins144.fs	/^                          3 14 io constant PD14     4 14 io constant PE14$/;"	d
PD14	flib/./pkg/pins100.fs	/^                          3 14 io constant PD14     4 14 io constant PE14$/;"	d
PD14	flib/./pkg/pins144.fs	/^                          3 14 io constant PD14     4 14 io constant PE14$/;"	d
PD14	flib/pkg/pins100.fs	/^                          3 14 io constant PD14     4 14 io constant PE14$/;"	d
PD14	flib/pkg/pins144.fs	/^                          3 14 io constant PD14     4 14 io constant PE14$/;"	d
PD15	embello/flib/pkg/pins100.fs	/^                          3 15 io constant PD15     4 15 io constant PE15$/;"	d
PD15	embello/flib/pkg/pins144.fs	/^                          3 15 io constant PD15     4 15 io constant PE15$/;"	d
PD15	flib/./pkg/pins100.fs	/^                          3 15 io constant PD15     4 15 io constant PE15$/;"	d
PD15	flib/./pkg/pins144.fs	/^                          3 15 io constant PD15     4 15 io constant PE15$/;"	d
PD15	flib/pkg/pins100.fs	/^                          3 15 io constant PD15     4 15 io constant PE15$/;"	d
PD15	flib/pkg/pins144.fs	/^                          3 15 io constant PD15     4 15 io constant PE15$/;"	d
PD2	embello/flib/pkg/pins64.fs	/^3 2  io constant PD2$/;"	d
PD2	flib/./pkg/pins64.fs	/^3 2  io constant PD2$/;"	d
PD2	flib/pkg/pins64.fs	/^3 2  io constant PD2$/;"	d
PDEC16	embello/ezr/simh2/xmodem-24.asm	/^PDEC16:	mvi	d,0		;Suppress leading 0's$/;"	l
PDEC16	embello/ezr/simh2/xmodem.asm	/^PDEC16:	mvi	d,0		;Suppress leading 0's$/;"	l
PEN	embello/wpp/dev.fs	/^PB0 constant PEN$/;"	d
PERLINE	embello/ezr/cpm2/bin2fs.go	/^const PERLINE = 32$/;"	c
PF0	embello/flib/pkg/pins144.fs	/^5 0  io constant PF0      6 0  io constant PG0$/;"	d
PF0	flib/./pkg/pins144.fs	/^5 0  io constant PF0      6 0  io constant PG0$/;"	d
PF0	flib/pkg/pins144.fs	/^5 0  io constant PF0      6 0  io constant PG0$/;"	d
PF1	embello/flib/pkg/pins144.fs	/^5 1  io constant PF1      6 1  io constant PG1$/;"	d
PF1	flib/./pkg/pins144.fs	/^5 1  io constant PF1      6 1  io constant PG1$/;"	d
PF1	flib/pkg/pins144.fs	/^5 1  io constant PF1      6 1  io constant PG1$/;"	d
PF10	embello/flib/pkg/pins144.fs	/^5 10 io constant PF10     6 10 io constant PG10$/;"	d
PF10	flib/./pkg/pins144.fs	/^5 10 io constant PF10     6 10 io constant PG10$/;"	d
PF10	flib/pkg/pins144.fs	/^5 10 io constant PF10     6 10 io constant PG10$/;"	d
PF11	embello/flib/pkg/pins144.fs	/^5 11 io constant PF11     6 11 io constant PG11$/;"	d
PF11	flib/./pkg/pins144.fs	/^5 11 io constant PF11     6 11 io constant PG11$/;"	d
PF11	flib/pkg/pins144.fs	/^5 11 io constant PF11     6 11 io constant PG11$/;"	d
PF12	embello/flib/pkg/pins144.fs	/^5 12 io constant PF12     6 12 io constant PG12$/;"	d
PF12	flib/./pkg/pins144.fs	/^5 12 io constant PF12     6 12 io constant PG12$/;"	d
PF12	flib/pkg/pins144.fs	/^5 12 io constant PF12     6 12 io constant PG12$/;"	d
PF13	embello/flib/pkg/pins144.fs	/^5 13 io constant PF13     6 13 io constant PG13$/;"	d
PF13	flib/./pkg/pins144.fs	/^5 13 io constant PF13     6 13 io constant PG13$/;"	d
PF13	flib/pkg/pins144.fs	/^5 13 io constant PF13     6 13 io constant PG13$/;"	d
PF14	embello/flib/pkg/pins144.fs	/^5 14 io constant PF14     6 14 io constant PG14$/;"	d
PF14	flib/./pkg/pins144.fs	/^5 14 io constant PF14     6 14 io constant PG14$/;"	d
PF14	flib/pkg/pins144.fs	/^5 14 io constant PF14     6 14 io constant PG14$/;"	d
PF15	embello/flib/pkg/pins144.fs	/^5 15 io constant PF15     6 15 io constant PG15$/;"	d
PF15	flib/./pkg/pins144.fs	/^5 15 io constant PF15     6 15 io constant PG15$/;"	d
PF15	flib/pkg/pins144.fs	/^5 15 io constant PF15     6 15 io constant PG15$/;"	d
PF2	embello/flib/pkg/pins144.fs	/^5 2  io constant PF2      6 2  io constant PG2$/;"	d
PF2	flib/./pkg/pins144.fs	/^5 2  io constant PF2      6 2  io constant PG2$/;"	d
PF2	flib/pkg/pins144.fs	/^5 2  io constant PF2      6 2  io constant PG2$/;"	d
PF3	embello/flib/pkg/pins144.fs	/^5 3  io constant PF3      6 3  io constant PG3$/;"	d
PF3	flib/./pkg/pins144.fs	/^5 3  io constant PF3      6 3  io constant PG3$/;"	d
PF3	flib/pkg/pins144.fs	/^5 3  io constant PF3      6 3  io constant PG3$/;"	d
PF4	embello/flib/pkg/pins144.fs	/^5 4  io constant PF4      6 4  io constant PG4$/;"	d
PF4	flib/./pkg/pins144.fs	/^5 4  io constant PF4      6 4  io constant PG4$/;"	d
PF4	flib/pkg/pins144.fs	/^5 4  io constant PF4      6 4  io constant PG4$/;"	d
PF5	embello/flib/pkg/pins144.fs	/^5 5  io constant PF5      6 5  io constant PG5$/;"	d
PF5	flib/./pkg/pins144.fs	/^5 5  io constant PF5      6 5  io constant PG5$/;"	d
PF5	flib/pkg/pins144.fs	/^5 5  io constant PF5      6 5  io constant PG5$/;"	d
PF6	embello/flib/pkg/pins144.fs	/^5 6  io constant PF6      6 6  io constant PG6$/;"	d
PF6	flib/./pkg/pins144.fs	/^5 6  io constant PF6      6 6  io constant PG6$/;"	d
PF6	flib/pkg/pins144.fs	/^5 6  io constant PF6      6 6  io constant PG6$/;"	d
PF7	embello/flib/pkg/pins144.fs	/^5 7  io constant PF7      6 7  io constant PG7$/;"	d
PF7	flib/./pkg/pins144.fs	/^5 7  io constant PF7      6 7  io constant PG7$/;"	d
PF7	flib/pkg/pins144.fs	/^5 7  io constant PF7      6 7  io constant PG7$/;"	d
PF8	embello/flib/pkg/pins144.fs	/^5 8  io constant PF8      6 8  io constant PG8$/;"	d
PF8	flib/./pkg/pins144.fs	/^5 8  io constant PF8      6 8  io constant PG8$/;"	d
PF8	flib/pkg/pins144.fs	/^5 8  io constant PF8      6 8  io constant PG8$/;"	d
PF9	embello/flib/pkg/pins144.fs	/^5 9  io constant PF9      6 9  io constant PG9$/;"	d
PF9	flib/./pkg/pins144.fs	/^5 9  io constant PF9      6 9  io constant PG9$/;"	d
PF9	flib/pkg/pins144.fs	/^5 9  io constant PF9      6 9  io constant PG9$/;"	d
PIN	embello/cag/ex/io.fs	/^     PA0 constant PIN$/;"	d
PIN	embello/g6s/ex/io.fs	/^     PA0 constant PIN$/;"	d
PLLP/2	embello/kb7/clock.fs	/^$0 constant PLLP\/2$/;"	d
PLLP/4	embello/kb7/clock.fs	/^$1 constant PLLP\/4$/;"	d
PLLP/6	embello/kb7/clock.fs	/^$2 constant PLLP\/6$/;"	d
PLLP/8	embello/kb7/clock.fs	/^$3 constant PLLP\/8$/;"	d
PPRE/1	embello/kb7/clock.fs	/^$0 constant PPRE\/1$/;"	d
PPRE/16	embello/kb7/clock.fs	/^$7 constant PPRE\/16$/;"	d
PPRE/2	embello/kb7/clock.fs	/^$4 constant PPRE\/2$/;"	d
PPRE/4	embello/kb7/clock.fs	/^$5 constant PPRE\/4$/;"	d
PPRE/8	embello/kb7/clock.fs	/^$6 constant PPRE\/8$/;"	d
PRGLUP	embello/ezr/simh2/xmodem-24.asm	/^PRGLUP:	lxi	d,SYNMSG	;Sync error message$/;"	l
PRGLUP	embello/ezr/simh2/xmodem.asm	/^PRGLUP:	lxi	d,SYNMSG	;Sync error message$/;"	l
PRINTA	embello/ezr/simh2/xmodem-24.asm	/^PRINTA:	mov	c,a		;value to c for PRINTC$/;"	l
PRINTA	embello/ezr/simh2/xmodem.asm	/^PRINTA:	mov	c,a		;value to c for PRINTC$/;"	l
PRINTC	embello/ezr/simh2/xmodem-24.asm	/^PRINTC:	mvi	a,CONOUT$/;"	l
PRINTC	embello/ezr/simh2/xmodem.asm	/^PRINTC:	mvi	a,CONOUT$/;"	l
PRINTF	embello/ezr/simh2/xmodem-24.asm	/^PRINTF:	mvi	c,BPRINT$/;"	l
PRINTF	embello/ezr/simh2/xmodem.asm	/^PRINTF:	mvi	c,BPRINT$/;"	l
PUNCH	embello/ezr/simh2/xmodem-24.asm	/^PUNCH	equ	12h	;punch output$/;"	d
PUNCH	embello/ezr/simh2/xmodem.asm	/^PUNCH	equ	12h	;punch output$/;"	d
PURGE	embello/ezr/simh2/xmodem-24.asm	/^PURGE:	mvi	b,0		;count 255 chrs$/;"	l
PURGE	embello/ezr/simh2/xmodem.asm	/^PURGE:	mvi	b,0		;count 255 chrs$/;"	l
PWM-OUT	embello/sic/main.fs	/^PB6 constant PWM-OUT$/;"	d
PWR	embello/flib/stm32f1/rtc.fs	/^$40007000 constant PWR$/;"	d
PWR	embello/flib/stm32l0/sleep.fs	/^$40007000 constant PWR$/;"	d
PWR	flib/./stm32f1/rtc.fs	/^$40007000 constant PWR$/;"	d
PWR	flib/./stm32l0/sleep.fs	/^$40007000 constant PWR$/;"	d
PWR	flib/stm32f1/rtc.fs	/^$40007000 constant PWR$/;"	d
PWR	flib/stm32l0/sleep.fs	/^$40007000 constant PWR$/;"	d
PWR-CR	embello/flib/stm32f1/rtc.fs	/^      PWR $0 + constant PWR-CR$/;"	d
PWR-CR	embello/flib/stm32l0/sleep.fs	/^      PWR $0 + constant PWR-CR$/;"	d
PWR-CR	embello/jz1/ex/clock.fs	/^$40007000 constant PWR-CR$/;"	d
PWR-CR	flib/./stm32f1/rtc.fs	/^      PWR $0 + constant PWR-CR$/;"	d
PWR-CR	flib/./stm32l0/sleep.fs	/^      PWR $0 + constant PWR-CR$/;"	d
PWR-CR	flib/stm32f1/rtc.fs	/^      PWR $0 + constant PWR-CR$/;"	d
PWR-CR	flib/stm32l0/sleep.fs	/^      PWR $0 + constant PWR-CR$/;"	d
PWR-CR	jz1/./ex/clock.fs	/^$40007000 constant PWR-CR$/;"	d
PWR-CR	jz1/ex/clock.fs	/^$40007000 constant PWR-CR$/;"	d
PWR-CSR	embello/flib/stm32l0/sleep.fs	/^      PWR $4 + constant PWR-CSR$/;"	d
PWR-CSR	flib/./stm32l0/sleep.fs	/^      PWR $4 + constant PWR-CSR$/;"	d
PWR-CSR	flib/stm32l0/sleep.fs	/^      PWR $4 + constant PWR-CSR$/;"	d
PWR_BASE	embello/kb7/clock.fs	/^$40007000      constant PWR_BASE         \\ PWR base address$/;"	d
PWR_CR1	embello/kb7/clock.fs	/^$00 PWR_BASE + constant PWR_CR1          \\ PWR power control register$/;"	d
PWR_CSR1	embello/kb7/clock.fs	/^$04 PWR_BASE + constant PWR_CSR1         \\ PWR power control\/status register$/;"	d
R.2^MSBEATS	embello/jz3/ook/rf69ook-polling.fs	/^5 constant R.2^MSBEATS$/;"	d
R.2^MSBEATS	jz3/./ook/rf69ook-polling.fs	/^5 constant R.2^MSBEATS$/;"	d
R.2^MSBEATS	jz3/ook/rf69ook-polling.fs	/^5 constant R.2^MSBEATS$/;"	d
R.MSBEATS	embello/jz3/ook/rf69ook-polling.fs	/^1 R.2^MSBEATS lshift constant R.MSBEATS \\ power of two for fast millis function$/;"	d
R.MSBEATS	jz3/./ook/rf69ook-polling.fs	/^1 R.2^MSBEATS lshift constant R.MSBEATS \\ power of two for fast millis function$/;"	d
R.MSBEATS	jz3/ook/rf69ook-polling.fs	/^1 R.2^MSBEATS lshift constant R.MSBEATS \\ power of two for fast millis function$/;"	d
R.MSSTAT	embello/jz3/ook/rf69ook-polling.fs	/^10000 constant R.MSSTAT$/;"	d
R.MSSTAT	jz3/./ook/rf69ook-polling.fs	/^10000 constant R.MSSTAT$/;"	d
R.MSSTAT	jz3/ook/rf69ook-polling.fs	/^10000 constant R.MSSTAT$/;"	d
R.TSAMPLE	embello/jz3/ook/rf69ook-polling.fs	/^1000 \/ R.MSBEATS constant R.TSAMPLE$/;"	d
R.TSAMPLE	jz3/./ook/rf69ook-polling.fs	/^1000 \/ R.MSBEATS constant R.TSAMPLE$/;"	d
R.TSAMPLE	jz3/ook/rf69ook-polling.fs	/^1000 \/ R.MSBEATS constant R.TSAMPLE$/;"	d
RADIO	embello/i2c/main.fs	/^0 constant RADIO  \\ 0 = no radio present, 1 = radio present$/;"	d
RATE	embello/jz3/main.fs	/^10 constant RATE  \\ seconds between readings$/;"	d
RATE	jz3/./main.fs	/^10 constant RATE  \\ seconds between readings$/;"	d
RATE	jz3/main.fs	/^10 constant RATE  \\ seconds between readings$/;"	d
RCC	embello/flib/stm32f1/hal.fs	/^$40021000 constant RCC$/;"	d
RCC	embello/flib/stm32f1/i2c.fs	/^\\ $40021000 constant RCC$/;"	d
RCC	embello/flib/stm32f4/hal.fs	/^$40023800 constant RCC$/;"	d
RCC	embello/flib/stm32f7/hal.fs	/^$40023800 constant RCC$/;"	d
RCC	embello/flib/stm32l0/hal.fs	/^$40021000 constant RCC$/;"	d
RCC	embello/suf/hal-stm32f1.fs	/^$40021000 constant RCC$/;"	d
RCC	flib/./stm32f1/hal.fs	/^$40021000 constant RCC$/;"	d
RCC	flib/./stm32f1/i2c.fs	/^\\ $40021000 constant RCC$/;"	d
RCC	flib/./stm32f4/hal.fs	/^$40023800 constant RCC$/;"	d
RCC	flib/./stm32f7/hal.fs	/^$40023800 constant RCC$/;"	d
RCC	flib/./stm32l0/hal.fs	/^$40021000 constant RCC$/;"	d
RCC	flib/stm32f1/hal.fs	/^$40021000 constant RCC$/;"	d
RCC	flib/stm32f1/i2c.fs	/^\\ $40021000 constant RCC$/;"	d
RCC	flib/stm32f4/hal.fs	/^$40023800 constant RCC$/;"	d
RCC	flib/stm32f7/hal.fs	/^$40023800 constant RCC$/;"	d
RCC	flib/stm32l0/hal.fs	/^$40021000 constant RCC$/;"	d
RCC-AHBENR	embello/flib/stm32f1/hal.fs	/^     RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	embello/flib/stm32f1/i2c.fs	/^     RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	embello/flib/stm32l0/hal.fs	/^     RCC $30 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	embello/prc2/board.fs	/^\\ RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	embello/qld/board.fs	/^\\ RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	embello/ten/board.fs	/^\\ RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	embello/tex/board.fs	/^\\ RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	flib/./stm32f1/hal.fs	/^     RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	flib/./stm32f1/i2c.fs	/^     RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	flib/./stm32l0/hal.fs	/^     RCC $30 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	flib/stm32f1/hal.fs	/^     RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	flib/stm32f1/i2c.fs	/^     RCC $14 + constant RCC-AHBENR$/;"	d
RCC-AHBENR	flib/stm32l0/hal.fs	/^     RCC $30 + constant RCC-AHBENR$/;"	d
RCC-APB1ENR	embello/flib/stm32f1/hal.fs	/^     RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	embello/flib/stm32f1/i2c.fs	/^\\    RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	embello/flib/stm32f4/hal.fs	/^\\ ?  RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	embello/flib/stm32f7/hal.fs	/^\\ ?  RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	embello/flib/stm32l0/hal.fs	/^     RCC $38 + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	embello/suf/hal-stm32f1.fs	/^     RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/./stm32f1/hal.fs	/^     RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/./stm32f1/i2c.fs	/^\\    RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/./stm32f4/hal.fs	/^\\ ?  RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/./stm32f7/hal.fs	/^\\ ?  RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/./stm32l0/hal.fs	/^     RCC $38 + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/stm32f1/hal.fs	/^     RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/stm32f1/i2c.fs	/^\\    RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/stm32f4/hal.fs	/^\\ ?  RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/stm32f7/hal.fs	/^\\ ?  RCC $1C + constant RCC-APB1ENR$/;"	d
RCC-APB1ENR	flib/stm32l0/hal.fs	/^     RCC $38 + constant RCC-APB1ENR$/;"	d
RCC-APB1RSTR	embello/flib/stm32f1/hal.fs	/^     RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	embello/flib/stm32f1/i2c.fs	/^     RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	embello/flib/stm32f4/hal.fs	/^\\ ?  RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	embello/flib/stm32f7/hal.fs	/^\\ ?  RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	embello/flib/stm32l0/hal.fs	/^     RCC $28 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/./stm32f1/hal.fs	/^     RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/./stm32f1/i2c.fs	/^     RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/./stm32f4/hal.fs	/^\\ ?  RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/./stm32f7/hal.fs	/^\\ ?  RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/./stm32l0/hal.fs	/^     RCC $28 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/stm32f1/hal.fs	/^     RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/stm32f1/i2c.fs	/^     RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/stm32f4/hal.fs	/^\\ ?  RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/stm32f7/hal.fs	/^\\ ?  RCC $10 + constant RCC-APB1RSTR$/;"	d
RCC-APB1RSTR	flib/stm32l0/hal.fs	/^     RCC $28 + constant RCC-APB1RSTR$/;"	d
RCC-APB1SMENR	embello/flib/stm32l0/sleep.fs	/^     RCC $48 + constant RCC-APB1SMENR$/;"	d
RCC-APB1SMENR	flib/./stm32l0/sleep.fs	/^     RCC $48 + constant RCC-APB1SMENR$/;"	d
RCC-APB1SMENR	flib/stm32l0/sleep.fs	/^     RCC $48 + constant RCC-APB1SMENR$/;"	d
RCC-APB2ENR	embello/bme/dev.fs	/^RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/flib/stm32f1/hal.fs	/^     RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/flib/stm32f1/i2c.fs	/^\\    RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/flib/stm32f4/hal.fs	/^\\ ?  RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/flib/stm32f7/hal.fs	/^\\ ?  RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/flib/stm32l0/hal.fs	/^     RCC $34 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/prc2/board.fs	/^\\ RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/qld/board.fs	/^\\ RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/suf/hal-stm32f1.fs	/^     RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/ten/board.fs	/^\\ RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/tex/board.fs	/^\\ RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	embello/zeb/dev.fs	/^RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/./stm32f1/hal.fs	/^     RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/./stm32f1/i2c.fs	/^\\    RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/./stm32f4/hal.fs	/^\\ ?  RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/./stm32f7/hal.fs	/^\\ ?  RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/./stm32l0/hal.fs	/^     RCC $34 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/stm32f1/hal.fs	/^     RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/stm32f1/i2c.fs	/^\\    RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/stm32f4/hal.fs	/^\\ ?  RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/stm32f7/hal.fs	/^\\ ?  RCC $18 + constant RCC-APB2ENR$/;"	d
RCC-APB2ENR	flib/stm32l0/hal.fs	/^     RCC $34 + constant RCC-APB2ENR$/;"	d
RCC-BDCR	embello/flib/stm32f1/rtc.fs	/^     RCC $20 + constant RCC-BDCR$/;"	d
RCC-BDCR	flib/./stm32f1/rtc.fs	/^     RCC $20 + constant RCC-BDCR$/;"	d
RCC-BDCR	flib/stm32f1/rtc.fs	/^     RCC $20 + constant RCC-BDCR$/;"	d
RCC-CCIPR	embello/flib/stm32l0/hal.fs	/^     RCC $4C + constant RCC-CCIPR$/;"	d
RCC-CCIPR	flib/./stm32l0/hal.fs	/^     RCC $4C + constant RCC-CCIPR$/;"	d
RCC-CCIPR	flib/stm32l0/hal.fs	/^     RCC $4C + constant RCC-CCIPR$/;"	d
RCC-CFGR	embello/flib/stm32f1/hal.fs	/^     RCC $04 + constant RCC-CFGR$/;"	d
RCC-CFGR	embello/flib/stm32f1/i2c.fs	/^\\    RCC $04 + constant RCC-CFGR$/;"	d
RCC-CFGR	embello/flib/stm32f4/hal.fs	/^     RCC $08 + constant RCC-CFGR$/;"	d
RCC-CFGR	embello/flib/stm32f7/hal.fs	/^     RCC $08 + constant RCC-CFGR$/;"	d
RCC-CFGR	embello/flib/stm32l0/hal.fs	/^     RCC $0C + constant RCC-CFGR$/;"	d
RCC-CFGR	embello/suf/hal-stm32f1.fs	/^     RCC $04 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/./stm32f1/hal.fs	/^     RCC $04 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/./stm32f1/i2c.fs	/^\\    RCC $04 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/./stm32f4/hal.fs	/^     RCC $08 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/./stm32f7/hal.fs	/^     RCC $08 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/./stm32l0/hal.fs	/^     RCC $0C + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/stm32f1/hal.fs	/^     RCC $04 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/stm32f1/i2c.fs	/^\\    RCC $04 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/stm32f4/hal.fs	/^     RCC $08 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/stm32f7/hal.fs	/^     RCC $08 + constant RCC-CFGR$/;"	d
RCC-CFGR	flib/stm32l0/hal.fs	/^     RCC $0C + constant RCC-CFGR$/;"	d
RCC-CR	embello/flib/stm32f1/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	embello/flib/stm32f1/i2c.fs	/^\\    RCC $00 + constant RCC-CR$/;"	d
RCC-CR	embello/flib/stm32f4/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	embello/flib/stm32f7/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	embello/flib/stm32l0/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	embello/suf/hal-stm32f1.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/./stm32f1/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/./stm32f1/i2c.fs	/^\\    RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/./stm32f4/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/./stm32f7/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/./stm32l0/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/stm32f1/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/stm32f1/i2c.fs	/^\\    RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/stm32f4/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/stm32f7/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CR	flib/stm32l0/hal.fs	/^     RCC $00 + constant RCC-CR$/;"	d
RCC-CSR	embello/flib/stm32l0/sleep.fs	/^     RCC $50 + constant RCC-CSR$/;"	d
RCC-CSR	flib/./stm32l0/sleep.fs	/^     RCC $50 + constant RCC-CSR$/;"	d
RCC-CSR	flib/stm32l0/sleep.fs	/^     RCC $50 + constant RCC-CSR$/;"	d
RCC-ICSCR	embello/flib/stm32l0/hal.fs	/^     RCC $04 + constant RCC-ICSCR$/;"	d
RCC-ICSCR	flib/./stm32l0/hal.fs	/^     RCC $04 + constant RCC-ICSCR$/;"	d
RCC-ICSCR	flib/stm32l0/hal.fs	/^     RCC $04 + constant RCC-ICSCR$/;"	d
RCC-PLLCRGR	embello/flib/stm32f4/hal.fs	/^     RCC $04 + constant RCC-PLLCRGR$/;"	d
RCC-PLLCRGR	embello/flib/stm32f7/hal.fs	/^     RCC $04 + constant RCC-PLLCRGR$/;"	d
RCC-PLLCRGR	flib/./stm32f4/hal.fs	/^     RCC $04 + constant RCC-PLLCRGR$/;"	d
RCC-PLLCRGR	flib/./stm32f7/hal.fs	/^     RCC $04 + constant RCC-PLLCRGR$/;"	d
RCC-PLLCRGR	flib/stm32f4/hal.fs	/^     RCC $04 + constant RCC-PLLCRGR$/;"	d
RCC-PLLCRGR	flib/stm32f7/hal.fs	/^     RCC $04 + constant RCC-PLLCRGR$/;"	d
RCC_AHB1ENR	embello/kb7/clock.fs	/^$30 RCC_BASE + constant RCC_AHB1ENR      \\ AHB1 peripheral clock register$/;"	d
RCC_APB1ENR	embello/kb7/clock.fs	/^$40 RCC_BASE + constant RCC_APB1ENR      \\ RCC APB1 peripheral clock enable reg$/;"	d
RCC_APB1RSTR	embello/kb7/clock.fs	/^$20 RCC_BASE + constant RCC_APB1RSTR     \\ RCC APB1 peripheral reset register$/;"	d
RCC_APB2ENR	embello/kb7/clock.fs	/^$44 RCC_BASE + constant RCC_APB2ENR      \\ APB2 peripheral clock enable register$/;"	d
RCC_BASE	embello/kb7/clock.fs	/^$40023800      constant RCC_BASE         \\ RCC base address$/;"	d
RCC_CFGR	embello/kb7/clock.fs	/^$08 RCC_BASE + constant RCC_CFGR         \\ RCC clock configuration register$/;"	d
RCC_CR	embello/kb7/clock.fs	/^$00 RCC_BASE + constant RCC_CR           \\ RCC clock control register$/;"	d
RCC_DKCFGR1	embello/kb7/clock.fs	/^$8C RCC_BASE + constant RCC_DKCFGR1      \\ RCC dedicated clocks config register$/;"	d
RCC_DKCFGR2	embello/kb7/clock.fs	/^$90 RCC_BASE + constant RCC_DKCFGR2      \\ RCC dedicated clocks config register$/;"	d
RCC_PLLCFGR	embello/kb7/clock.fs	/^$04 RCC_BASE + constant RCC_PLLCFGR      \\ RCC PLL configuration register$/;"	d
RCC_PLLSAICFGR	embello/kb7/clock.fs	/^$88 RCC_BASE + constant RCC_PLLSAICFGR   \\ RCC SAI PLL configuration register$/;"	d
RDCMD	embello/ezr/simh2/xmodem-24.asm	/^RDCMD:	lda	CLFLAG		;reading command buffer?$/;"	l
RDCMD	embello/ezr/simh2/xmodem.asm	/^RDCMD:	lda	CLFLAG		;reading command buffer?$/;"	l
RDRTO	embello/ezr/simh2/xmodem-24.asm	/^RDRTO:	equ	50000\/((191+CRTIME+9)\/10)$/;"	d
RDRTO	embello/ezr/simh2/xmodem.asm	/^RDRTO:	equ	50000\/((201+CRTIME)\/10)$/;"	d
READER	embello/ezr/simh2/xmodem-24.asm	/^READER	equ	15h	;reader input$/;"	d
READER	embello/ezr/simh2/xmodem.asm	/^READER	equ	15h	;reader input$/;"	d
RED	embello/lnr/ex/pwm.fs	/^PA0 constant RED$/;"	d
REPCNT	embello/ezr/simh2/xmodem-24.asm	/^REPCNT:	lhld	CURBLK$/;"	l
REPCNT	embello/ezr/simh2/xmodem.asm	/^REPCNT:	lhld	CURBLK$/;"	l
RESET-PIN	embello/qld/dev.fs	/^PA0 constant RESET-PIN$/;"	d
RET	embello/flib/uart/gps.fs	/^13 constant RET$/;"	d
RET	flib/./uart/gps.fs	/^13 constant RET$/;"	d
RET	flib/uart/gps.fs	/^13 constant RET$/;"	d
RET	follower/hc05.fs	/^13 constant RET$/;"	d
RF.DIO0	central/board.fs	/^PB0 constant RF.DIO0$/;"	d
RF.DIO0	embello/tex/board.fs	/^PB0 constant RF.DIO0$/;"	d
RF.DIO1	central/board.fs	/^PB1 constant RF.DIO1$/;"	d
RF.DIO1	embello/tex/board.fs	/^PB1 constant RF.DIO1$/;"	d
RF.DIO2	central/board.fs	/^PA8 constant RF.DIO2$/;"	d
RF.DIO2	embello/tex/board.fs	/^PA8 constant RF.DIO2$/;"	d
RF.DIO3	central/board.fs	/^PB3 constant RF.DIO3$/;"	d
RF.DIO3	embello/tex/board.fs	/^PB3 constant RF.DIO3$/;"	d
RF.DIO5	central/board.fs	/^PB5 constant RF.DIO5$/;"	d
RF.DIO5	embello/tex/board.fs	/^PB5 constant RF.DIO5$/;"	d
RF.FREQDIV	embello/flib/spi/rf69ook.fs	/^32000000 11 rshift constant RF.FREQDIV$/;"	d
RF.FREQDIV	flib/./spi/rf69ook.fs	/^32000000 11 rshift constant RF.FREQDIV$/;"	d
RF.FREQDIV	flib/spi/rf69ook.fs	/^32000000 11 rshift constant RF.FREQDIV$/;"	d
RF.RST	central/board.fs	/^PB4 constant RF.RST$/;"	d
RF.RST	embello/tex/board.fs	/^PB4 constant RF.RST$/;"	d
RF.SEL	central/board.fs	/^PA4 constant RF.SEL$/;"	d
RF.SEL	embello/tex/board.fs	/^PA4 constant RF.SEL$/;"	d
RF:ADDR	embello/flib/spi/rf69.fs	/^       $39 constant RF:ADDR$/;"	d
RF:ADDR	flib/./spi/rf69.fs	/^       $39 constant RF:ADDR$/;"	d
RF:ADDR	flib/spi/rf69.fs	/^       $39 constant RF:ADDR$/;"	d
RF:AES	embello/flib/spi/rf69.fs	/^       $3E constant RF:AES$/;"	d
RF:AES	flib/./spi/rf69.fs	/^       $3E constant RF:AES$/;"	d
RF:AES	flib/spi/rf69.fs	/^       $3E constant RF:AES$/;"	d
RF:AFC	embello/flib/spi/rf69.fs	/^       $1F constant RF:AFC$/;"	d
RF:AFC	flib/./spi/rf69.fs	/^       $1F constant RF:AFC$/;"	d
RF:AFC	flib/spi/rf69.fs	/^       $1F constant RF:AFC$/;"	d
RF:AFCFEI	embello/flib/spi/rf69ook.fs	/^  $1E constant RF:AFCFEI$/;"	d
RF:AFCFEI	flib/./spi/rf69ook.fs	/^  $1E constant RF:AFCFEI$/;"	d
RF:AFCFEI	flib/spi/rf69ook.fs	/^  $1E constant RF:AFCFEI$/;"	d
RF:BCAST	embello/flib/spi/rf69.fs	/^       $3A constant RF:BCAST$/;"	d
RF:BCAST	flib/./spi/rf69.fs	/^       $3A constant RF:BCAST$/;"	d
RF:BCAST	flib/spi/rf69.fs	/^       $3A constant RF:BCAST$/;"	d
RF:BRMSB	embello/flib/spi/rf69ook.fs	/^  $03 constant RF:BRMSB$/;"	d
RF:BRMSB	flib/./spi/rf69ook.fs	/^  $03 constant RF:BRMSB$/;"	d
RF:BRMSB	flib/spi/rf69ook.fs	/^  $03 constant RF:BRMSB$/;"	d
RF:DIOMAPPING1	embello/flib/spi/lora1276.fs	/^$40 constant RF:DIOMAPPING1$/;"	d
RF:DIOMAPPING1	flib/./spi/lora1276.fs	/^$40 constant RF:DIOMAPPING1$/;"	d
RF:DIOMAPPING1	flib/spi/lora1276.fs	/^$40 constant RF:DIOMAPPING1$/;"	d
RF:DIOMAPPING2	embello/flib/spi/lora1276.fs	/^$41 constant RF:DIOMAPPING2$/;"	d
RF:DIOMAPPING2	flib/./spi/lora1276.fs	/^$41 constant RF:DIOMAPPING2$/;"	d
RF:DIOMAPPING2	flib/spi/lora1276.fs	/^$41 constant RF:DIOMAPPING2$/;"	d
RF:FEI	embello/flib/spi/lora1276.fs	/^$28 constant RF:FEI$/;"	d
RF:FEI	flib/./spi/lora1276.fs	/^$28 constant RF:FEI$/;"	d
RF:FEI	flib/spi/lora1276.fs	/^$28 constant RF:FEI$/;"	d
RF:FIFO	embello/flib/spi/lora1276.fs	/^$00 constant RF:FIFO$/;"	d
RF:FIFO	embello/flib/spi/rf69.fs	/^       $00 constant RF:FIFO$/;"	d
RF:FIFO	flib/./spi/lora1276.fs	/^$00 constant RF:FIFO$/;"	d
RF:FIFO	flib/./spi/rf69.fs	/^       $00 constant RF:FIFO$/;"	d
RF:FIFO	flib/spi/lora1276.fs	/^$00 constant RF:FIFO$/;"	d
RF:FIFO	flib/spi/rf69.fs	/^       $00 constant RF:FIFO$/;"	d
RF:FIFOPTR	embello/flib/spi/lora1276.fs	/^$0D constant RF:FIFOPTR$/;"	d
RF:FIFOPTR	flib/./spi/lora1276.fs	/^$0D constant RF:FIFOPTR$/;"	d
RF:FIFOPTR	flib/spi/lora1276.fs	/^$0D constant RF:FIFOPTR$/;"	d
RF:FIFORXCURR	embello/flib/spi/lora1276.fs	/^$10 constant RF:FIFORXCURR$/;"	d
RF:FIFORXCURR	flib/./spi/lora1276.fs	/^$10 constant RF:FIFORXCURR$/;"	d
RF:FIFORXCURR	flib/spi/lora1276.fs	/^$10 constant RF:FIFORXCURR$/;"	d
RF:FRF	embello/flib/spi/lora1276.fs	/^$06 constant RF:FRF$/;"	d
RF:FRF	embello/flib/spi/rf69.fs	/^       $07 constant RF:FRF$/;"	d
RF:FRF	flib/./spi/lora1276.fs	/^$06 constant RF:FRF$/;"	d
RF:FRF	flib/./spi/rf69.fs	/^       $07 constant RF:FRF$/;"	d
RF:FRF	flib/spi/lora1276.fs	/^$06 constant RF:FRF$/;"	d
RF:FRF	flib/spi/rf69.fs	/^       $07 constant RF:FRF$/;"	d
RF:IRQ1	embello/flib/spi/rf69.fs	/^       $27 constant RF:IRQ1$/;"	d
RF:IRQ1	flib/./spi/rf69.fs	/^       $27 constant RF:IRQ1$/;"	d
RF:IRQ1	flib/spi/rf69.fs	/^       $27 constant RF:IRQ1$/;"	d
RF:IRQ1_MRDY	embello/flib/spi/rf69.fs	/^     7 bit constant RF:IRQ1_MRDY$/;"	d
RF:IRQ1_MRDY	flib/./spi/rf69.fs	/^     7 bit constant RF:IRQ1_MRDY$/;"	d
RF:IRQ1_MRDY	flib/spi/rf69.fs	/^     7 bit constant RF:IRQ1_MRDY$/;"	d
RF:IRQ1_RSSI	embello/flib/spi/rf69.fs	/^     3 bit constant RF:IRQ1_RSSI$/;"	d
RF:IRQ1_RSSI	flib/./spi/rf69.fs	/^     3 bit constant RF:IRQ1_RSSI$/;"	d
RF:IRQ1_RSSI	flib/spi/rf69.fs	/^     3 bit constant RF:IRQ1_RSSI$/;"	d
RF:IRQ1_RXRDY	embello/flib/spi/rf69.fs	/^     6 bit constant RF:IRQ1_RXRDY$/;"	d
RF:IRQ1_RXRDY	flib/./spi/rf69.fs	/^     6 bit constant RF:IRQ1_RXRDY$/;"	d
RF:IRQ1_RXRDY	flib/spi/rf69.fs	/^     6 bit constant RF:IRQ1_RXRDY$/;"	d
RF:IRQ1_SYNC	embello/flib/spi/rf69.fs	/^     0 bit constant RF:IRQ1_SYNC$/;"	d
RF:IRQ1_SYNC	flib/./spi/rf69.fs	/^     0 bit constant RF:IRQ1_SYNC$/;"	d
RF:IRQ1_SYNC	flib/spi/rf69.fs	/^     0 bit constant RF:IRQ1_SYNC$/;"	d
RF:IRQ1_TIMEOUT	embello/flib/spi/rf69.fs	/^     2 bit constant RF:IRQ1_TIMEOUT$/;"	d
RF:IRQ1_TIMEOUT	flib/./spi/rf69.fs	/^     2 bit constant RF:IRQ1_TIMEOUT$/;"	d
RF:IRQ1_TIMEOUT	flib/spi/rf69.fs	/^     2 bit constant RF:IRQ1_TIMEOUT$/;"	d
RF:IRQ2	embello/flib/spi/rf69.fs	/^       $28 constant RF:IRQ2$/;"	d
RF:IRQ2	flib/./spi/rf69.fs	/^       $28 constant RF:IRQ2$/;"	d
RF:IRQ2	flib/spi/rf69.fs	/^       $28 constant RF:IRQ2$/;"	d
RF:IRQ2_CRCOK	embello/flib/spi/rf69.fs	/^     1 bit constant RF:IRQ2_CRCOK$/;"	d
RF:IRQ2_CRCOK	flib/./spi/rf69.fs	/^     1 bit constant RF:IRQ2_CRCOK$/;"	d
RF:IRQ2_CRCOK	flib/spi/rf69.fs	/^     1 bit constant RF:IRQ2_CRCOK$/;"	d
RF:IRQ2_FIFO_NE	embello/flib/spi/rf69.fs	/^     6 bit constant RF:IRQ2_FIFO_NE$/;"	d
RF:IRQ2_FIFO_NE	flib/./spi/rf69.fs	/^     6 bit constant RF:IRQ2_FIFO_NE$/;"	d
RF:IRQ2_FIFO_NE	flib/spi/rf69.fs	/^     6 bit constant RF:IRQ2_FIFO_NE$/;"	d
RF:IRQ2_RECVD	embello/flib/spi/rf69.fs	/^     2 bit constant RF:IRQ2_RECVD$/;"	d
RF:IRQ2_RECVD	flib/./spi/rf69.fs	/^     2 bit constant RF:IRQ2_RECVD$/;"	d
RF:IRQ2_RECVD	flib/spi/rf69.fs	/^     2 bit constant RF:IRQ2_RECVD$/;"	d
RF:IRQ2_SENT	embello/flib/spi/rf69.fs	/^     3 bit constant RF:IRQ2_SENT$/;"	d
RF:IRQ2_SENT	flib/./spi/rf69.fs	/^     3 bit constant RF:IRQ2_SENT$/;"	d
RF:IRQ2_SENT	flib/spi/rf69.fs	/^     3 bit constant RF:IRQ2_SENT$/;"	d
RF:IRQFLAGS	embello/flib/spi/lora1276.fs	/^$12 constant RF:IRQFLAGS$/;"	d
RF:IRQFLAGS	flib/./spi/lora1276.fs	/^$12 constant RF:IRQFLAGS$/;"	d
RF:IRQFLAGS	flib/spi/lora1276.fs	/^$12 constant RF:IRQFLAGS$/;"	d
RF:IRQMASQ	embello/flib/spi/lora1276.fs	/^$11 constant RF:IRQMASQ$/;"	d
RF:IRQMASQ	flib/./spi/lora1276.fs	/^$11 constant RF:IRQMASQ$/;"	d
RF:IRQMASQ	flib/spi/lora1276.fs	/^$11 constant RF:IRQMASQ$/;"	d
RF:IRQ_CADDETECT	embello/flib/spi/lora1276.fs	/^\\ 0 bit constant RF:IRQ_CADDETECT$/;"	d
RF:IRQ_CADDETECT	flib/./spi/lora1276.fs	/^\\ 0 bit constant RF:IRQ_CADDETECT$/;"	d
RF:IRQ_CADDETECT	flib/spi/lora1276.fs	/^\\ 0 bit constant RF:IRQ_CADDETECT$/;"	d
RF:IRQ_CADDONE	embello/flib/spi/lora1276.fs	/^  2 bit constant RF:IRQ_CADDONE$/;"	d
RF:IRQ_CADDONE	flib/./spi/lora1276.fs	/^  2 bit constant RF:IRQ_CADDONE$/;"	d
RF:IRQ_CADDONE	flib/spi/lora1276.fs	/^  2 bit constant RF:IRQ_CADDONE$/;"	d
RF:IRQ_CRCERROR	embello/flib/spi/lora1276.fs	/^  5 bit constant RF:IRQ_CRCERROR$/;"	d
RF:IRQ_CRCERROR	flib/./spi/lora1276.fs	/^  5 bit constant RF:IRQ_CRCERROR$/;"	d
RF:IRQ_CRCERROR	flib/spi/lora1276.fs	/^  5 bit constant RF:IRQ_CRCERROR$/;"	d
RF:IRQ_FHSCHG	embello/flib/spi/lora1276.fs	/^\\ 1 bit constant RF:IRQ_FHSCHG$/;"	d
RF:IRQ_FHSCHG	flib/./spi/lora1276.fs	/^\\ 1 bit constant RF:IRQ_FHSCHG$/;"	d
RF:IRQ_FHSCHG	flib/spi/lora1276.fs	/^\\ 1 bit constant RF:IRQ_FHSCHG$/;"	d
RF:IRQ_RXDONE	embello/flib/spi/lora1276.fs	/^  6 bit constant RF:IRQ_RXDONE$/;"	d
RF:IRQ_RXDONE	flib/./spi/lora1276.fs	/^  6 bit constant RF:IRQ_RXDONE$/;"	d
RF:IRQ_RXDONE	flib/spi/lora1276.fs	/^  6 bit constant RF:IRQ_RXDONE$/;"	d
RF:IRQ_RXTIMEOUT	embello/flib/spi/lora1276.fs	/^  7 bit constant RF:IRQ_RXTIMEOUT$/;"	d
RF:IRQ_RXTIMEOUT	flib/./spi/lora1276.fs	/^  7 bit constant RF:IRQ_RXTIMEOUT$/;"	d
RF:IRQ_RXTIMEOUT	flib/spi/lora1276.fs	/^  7 bit constant RF:IRQ_RXTIMEOUT$/;"	d
RF:IRQ_TXDONE	embello/flib/spi/lora1276.fs	/^  3 bit constant RF:IRQ_TXDONE$/;"	d
RF:IRQ_TXDONE	flib/./spi/lora1276.fs	/^  3 bit constant RF:IRQ_TXDONE$/;"	d
RF:IRQ_TXDONE	flib/spi/lora1276.fs	/^  3 bit constant RF:IRQ_TXDONE$/;"	d
RF:IRQ_VALIDHDR	embello/flib/spi/lora1276.fs	/^\\ 4 bit constant RF:IRQ_VALIDHDR$/;"	d
RF:IRQ_VALIDHDR	flib/./spi/lora1276.fs	/^\\ 4 bit constant RF:IRQ_VALIDHDR$/;"	d
RF:IRQ_VALIDHDR	flib/spi/lora1276.fs	/^\\ 4 bit constant RF:IRQ_VALIDHDR$/;"	d
RF:LNA	embello/flib/spi/lora1276.fs	/^$0C constant RF:LNA$/;"	d
RF:LNA	embello/flib/spi/rf69.fs	/^       $18 constant RF:LNA$/;"	d
RF:LNA	flib/./spi/lora1276.fs	/^$0C constant RF:LNA$/;"	d
RF:LNA	flib/./spi/rf69.fs	/^       $18 constant RF:LNA$/;"	d
RF:LNA	flib/spi/lora1276.fs	/^$0C constant RF:LNA$/;"	d
RF:LNA	flib/spi/rf69.fs	/^       $18 constant RF:LNA$/;"	d
RF:MAXPKT	embello/flib/spi/lora1276.fs	/^  66 constant RF:MAXPKT  \\ max packet length supported$/;"	d
RF:MAXPKT	flib/./spi/lora1276.fs	/^  66 constant RF:MAXPKT  \\ max packet length supported$/;"	d
RF:MAXPKT	flib/spi/lora1276.fs	/^  66 constant RF:MAXPKT  \\ max packet length supported$/;"	d
RF:MODEMCONF1	embello/flib/spi/lora1276.fs	/^$1D constant RF:MODEMCONF1$/;"	d
RF:MODEMCONF1	flib/./spi/lora1276.fs	/^$1D constant RF:MODEMCONF1$/;"	d
RF:MODEMCONF1	flib/spi/lora1276.fs	/^$1D constant RF:MODEMCONF1$/;"	d
RF:MODEMCONF2	embello/flib/spi/lora1276.fs	/^$1E constant RF:MODEMCONF2$/;"	d
RF:MODEMCONF2	flib/./spi/lora1276.fs	/^$1E constant RF:MODEMCONF2$/;"	d
RF:MODEMCONF2	flib/spi/lora1276.fs	/^$1E constant RF:MODEMCONF2$/;"	d
RF:MODEMCONF3	embello/flib/spi/lora1276.fs	/^$26 constant RF:MODEMCONF3$/;"	d
RF:MODEMCONF3	flib/./spi/lora1276.fs	/^$26 constant RF:MODEMCONF3$/;"	d
RF:MODEMCONF3	flib/spi/lora1276.fs	/^$26 constant RF:MODEMCONF3$/;"	d
RF:MODEMSTAT	embello/flib/spi/lora1276.fs	/^$18 constant RF:MODEMSTAT$/;"	d
RF:MODEMSTAT	flib/./spi/lora1276.fs	/^$18 constant RF:MODEMSTAT$/;"	d
RF:MODEMSTAT	flib/spi/lora1276.fs	/^$18 constant RF:MODEMSTAT$/;"	d
RF:M_CAD	embello/flib/spi/lora1276.fs	/^7 constant RF:M_CAD$/;"	d
RF:M_CAD	flib/./spi/lora1276.fs	/^7 constant RF:M_CAD$/;"	d
RF:M_CAD	flib/spi/lora1276.fs	/^7 constant RF:M_CAD$/;"	d
RF:M_FS	embello/flib/spi/rf69.fs	/^2 2 lshift constant RF:M_FS$/;"	d
RF:M_FS	flib/./spi/rf69.fs	/^2 2 lshift constant RF:M_FS$/;"	d
RF:M_FS	flib/spi/rf69.fs	/^2 2 lshift constant RF:M_FS$/;"	d
RF:M_FSRX	embello/flib/spi/lora1276.fs	/^4 constant RF:M_FSRX$/;"	d
RF:M_FSRX	flib/./spi/lora1276.fs	/^4 constant RF:M_FSRX$/;"	d
RF:M_FSRX	flib/spi/lora1276.fs	/^4 constant RF:M_FSRX$/;"	d
RF:M_FSTX	embello/flib/spi/lora1276.fs	/^2 constant RF:M_FSTX$/;"	d
RF:M_FSTX	flib/./spi/lora1276.fs	/^2 constant RF:M_FSTX$/;"	d
RF:M_FSTX	flib/spi/lora1276.fs	/^2 constant RF:M_FSTX$/;"	d
RF:M_RX	embello/flib/spi/rf69.fs	/^4 2 lshift constant RF:M_RX$/;"	d
RF:M_RX	flib/./spi/rf69.fs	/^4 2 lshift constant RF:M_RX$/;"	d
RF:M_RX	flib/spi/rf69.fs	/^4 2 lshift constant RF:M_RX$/;"	d
RF:M_RXCONT	embello/flib/spi/lora1276.fs	/^5 constant RF:M_RXCONT$/;"	d
RF:M_RXCONT	flib/./spi/lora1276.fs	/^5 constant RF:M_RXCONT$/;"	d
RF:M_RXCONT	flib/spi/lora1276.fs	/^5 constant RF:M_RXCONT$/;"	d
RF:M_RXSINGLE	embello/flib/spi/lora1276.fs	/^6 constant RF:M_RXSINGLE$/;"	d
RF:M_RXSINGLE	flib/./spi/lora1276.fs	/^6 constant RF:M_RXSINGLE$/;"	d
RF:M_RXSINGLE	flib/spi/lora1276.fs	/^6 constant RF:M_RXSINGLE$/;"	d
RF:M_SLEEP	embello/flib/spi/lora1276.fs	/^0 constant RF:M_SLEEP$/;"	d
RF:M_SLEEP	embello/flib/spi/rf69.fs	/^0 2 lshift constant RF:M_SLEEP$/;"	d
RF:M_SLEEP	flib/./spi/lora1276.fs	/^0 constant RF:M_SLEEP$/;"	d
RF:M_SLEEP	flib/./spi/rf69.fs	/^0 2 lshift constant RF:M_SLEEP$/;"	d
RF:M_SLEEP	flib/spi/lora1276.fs	/^0 constant RF:M_SLEEP$/;"	d
RF:M_SLEEP	flib/spi/rf69.fs	/^0 2 lshift constant RF:M_SLEEP$/;"	d
RF:M_STDBY	embello/flib/spi/lora1276.fs	/^1 constant RF:M_STDBY$/;"	d
RF:M_STDBY	embello/flib/spi/rf69.fs	/^1 2 lshift constant RF:M_STDBY$/;"	d
RF:M_STDBY	flib/./spi/lora1276.fs	/^1 constant RF:M_STDBY$/;"	d
RF:M_STDBY	flib/./spi/rf69.fs	/^1 2 lshift constant RF:M_STDBY$/;"	d
RF:M_STDBY	flib/spi/lora1276.fs	/^1 constant RF:M_STDBY$/;"	d
RF:M_STDBY	flib/spi/rf69.fs	/^1 2 lshift constant RF:M_STDBY$/;"	d
RF:M_TX	embello/flib/spi/lora1276.fs	/^3 constant RF:M_TX$/;"	d
RF:M_TX	embello/flib/spi/rf69.fs	/^3 2 lshift constant RF:M_TX$/;"	d
RF:M_TX	flib/./spi/lora1276.fs	/^3 constant RF:M_TX$/;"	d
RF:M_TX	flib/./spi/rf69.fs	/^3 2 lshift constant RF:M_TX$/;"	d
RF:M_TX	flib/spi/lora1276.fs	/^3 constant RF:M_TX$/;"	d
RF:M_TX	flib/spi/rf69.fs	/^3 2 lshift constant RF:M_TX$/;"	d
RF:OOKFIX	embello/flib/spi/rf69ook.fs	/^  $1D constant RF:OOKFIX$/;"	d
RF:OOKFIX	flib/./spi/rf69ook.fs	/^  $1D constant RF:OOKFIX$/;"	d
RF:OOKFIX	flib/spi/rf69ook.fs	/^  $1D constant RF:OOKFIX$/;"	d
RF:OOKPEAK	embello/flib/spi/rf69ook.fs	/^  $1B constant RF:OOKPEAK$/;"	d
RF:OOKPEAK	flib/./spi/rf69ook.fs	/^  $1B constant RF:OOKPEAK$/;"	d
RF:OOKPEAK	flib/spi/rf69ook.fs	/^  $1B constant RF:OOKPEAK$/;"	d
RF:OP	embello/flib/spi/lora1276.fs	/^$01 constant RF:OP$/;"	d
RF:OP	embello/flib/spi/rf69.fs	/^       $01 constant RF:OP$/;"	d
RF:OP	flib/./spi/lora1276.fs	/^$01 constant RF:OP$/;"	d
RF:OP	flib/./spi/rf69.fs	/^       $01 constant RF:OP$/;"	d
RF:OP	flib/spi/lora1276.fs	/^$01 constant RF:OP$/;"	d
RF:OP	flib/spi/rf69.fs	/^       $01 constant RF:OP$/;"	d
RF:PA	embello/flib/spi/lora1276.fs	/^$09 constant RF:PA$/;"	d
RF:PA	embello/flib/spi/rf69.fs	/^       $11 constant RF:PA$/;"	d
RF:PA	flib/./spi/lora1276.fs	/^$09 constant RF:PA$/;"	d
RF:PA	flib/./spi/rf69.fs	/^       $11 constant RF:PA$/;"	d
RF:PA	flib/spi/lora1276.fs	/^$09 constant RF:PA$/;"	d
RF:PA	flib/spi/rf69.fs	/^       $11 constant RF:PA$/;"	d
RF:PADAC	embello/flib/spi/lora1276.fs	/^$4D constant RF:PADAC$/;"	d
RF:PADAC	flib/./spi/lora1276.fs	/^$4D constant RF:PADAC$/;"	d
RF:PADAC	flib/spi/lora1276.fs	/^$4D constant RF:PADAC$/;"	d
RF:PAYLENGTH	embello/flib/spi/lora1276.fs	/^$22 constant RF:PAYLENGTH$/;"	d
RF:PAYLENGTH	flib/./spi/lora1276.fs	/^$22 constant RF:PAYLENGTH$/;"	d
RF:PAYLENGTH	flib/spi/lora1276.fs	/^$22 constant RF:PAYLENGTH$/;"	d
RF:PCONF2	embello/flib/spi/rf69.fs	/^       $3D constant RF:PCONF2$/;"	d
RF:PCONF2	flib/./spi/rf69.fs	/^       $3D constant RF:PCONF2$/;"	d
RF:PCONF2	flib/spi/rf69.fs	/^       $3D constant RF:PCONF2$/;"	d
RF:PKTRSSI	embello/flib/spi/lora1276.fs	/^$1A constant RF:PKTRSSI$/;"	d
RF:PKTRSSI	flib/./spi/lora1276.fs	/^$1A constant RF:PKTRSSI$/;"	d
RF:PKTRSSI	flib/spi/lora1276.fs	/^$1A constant RF:PKTRSSI$/;"	d
RF:PKTSNR	embello/flib/spi/lora1276.fs	/^$19 constant RF:PKTSNR$/;"	d
RF:PKTSNR	flib/./spi/lora1276.fs	/^$19 constant RF:PKTSNR$/;"	d
RF:PKTSNR	flib/spi/lora1276.fs	/^$19 constant RF:PKTSNR$/;"	d
RF:PPMCORR	embello/flib/spi/lora1276.fs	/^$27 constant RF:PPMCORR$/;"	d
RF:PPMCORR	flib/./spi/lora1276.fs	/^$27 constant RF:PPMCORR$/;"	d
RF:PPMCORR	flib/spi/lora1276.fs	/^$27 constant RF:PPMCORR$/;"	d
RF:RCCALSTART	embello/flib/spi/rf69.fs	/^       $80 constant RF:RCCALSTART$/;"	d
RF:RCCALSTART	flib/./spi/rf69.fs	/^       $80 constant RF:RCCALSTART$/;"	d
RF:RCCALSTART	flib/spi/rf69.fs	/^       $80 constant RF:RCCALSTART$/;"	d
RF:RSSI	embello/flib/spi/rf69.fs	/^       $24 constant RF:RSSI$/;"	d
RF:RSSI	flib/./spi/rf69.fs	/^       $24 constant RF:RSSI$/;"	d
RF:RSSI	flib/spi/rf69.fs	/^       $24 constant RF:RSSI$/;"	d
RF:RSSITHRESH	embello/flib/spi/rf69ook.fs	/^  $29 constant RF:RSSITHRESH$/;"	d
RF:RSSITHRESH	flib/./spi/rf69ook.fs	/^  $29 constant RF:RSSITHRESH$/;"	d
RF:RSSITHRESH	flib/spi/rf69ook.fs	/^  $29 constant RF:RSSITHRESH$/;"	d
RF:RXBW	embello/flib/spi/rf69ook.fs	/^  $19 constant RF:RXBW$/;"	d
RF:RXBW	flib/./spi/rf69ook.fs	/^  $19 constant RF:RXBW$/;"	d
RF:RXBW	flib/spi/rf69ook.fs	/^  $19 constant RF:RXBW$/;"	d
RF:RXBYTES	embello/flib/spi/lora1276.fs	/^$13 constant RF:RXBYTES$/;"	d
RF:RXBYTES	flib/./spi/lora1276.fs	/^$13 constant RF:RXBYTES$/;"	d
RF:RXBYTES	flib/spi/lora1276.fs	/^$13 constant RF:RXBYTES$/;"	d
RF:START_TX	embello/flib/spi/rf69.fs	/^       $C2 constant RF:START_TX$/;"	d
RF:START_TX	flib/./spi/rf69.fs	/^       $C2 constant RF:START_TX$/;"	d
RF:START_TX	flib/spi/rf69.fs	/^       $C2 constant RF:START_TX$/;"	d
RF:STOP_TX	embello/flib/spi/rf69.fs	/^       $42 constant RF:STOP_TX$/;"	d
RF:STOP_TX	flib/./spi/rf69.fs	/^       $42 constant RF:STOP_TX$/;"	d
RF:STOP_TX	flib/spi/rf69.fs	/^       $42 constant RF:STOP_TX$/;"	d
RF:SYN1	embello/flib/spi/rf69.fs	/^       $2F constant RF:SYN1$/;"	d
RF:SYN1	flib/./spi/rf69.fs	/^       $2F constant RF:SYN1$/;"	d
RF:SYN1	flib/spi/rf69.fs	/^       $2F constant RF:SYN1$/;"	d
RF:SYN3	embello/flib/spi/rf69.fs	/^       $31 constant RF:SYN3$/;"	d
RF:SYN3	flib/./spi/rf69.fs	/^       $31 constant RF:SYN3$/;"	d
RF:SYN3	flib/spi/rf69.fs	/^       $31 constant RF:SYN3$/;"	d
RF:SYNC	embello/flib/spi/lora1276.fs	/^$39 constant RF:SYNC$/;"	d
RF:SYNC	flib/./spi/lora1276.fs	/^$39 constant RF:SYNC$/;"	d
RF:SYNC	flib/spi/lora1276.fs	/^$39 constant RF:SYNC$/;"	d
RF:SYNC	tracker/speed.fs	/^$39 constant RF:SYNC$/;"	d
RF:THRESH	embello/flib/spi/rf69.fs	/^       $3C constant RF:THRESH$/;"	d
RF:THRESH	flib/./spi/rf69.fs	/^       $3C constant RF:THRESH$/;"	d
RF:THRESH	flib/spi/rf69.fs	/^       $3C constant RF:THRESH$/;"	d
RIDEL	embello/ezr/simh2/xmodem-24.asm	/^RIDEL:	call	RXTIMR		;(24+17=41)use Rx timer$/;"	l
RIDEL	embello/ezr/simh2/xmodem.asm	/^RIDEL:	call	RXTIMR		;(24+17=41)use Rx timer$/;"	l
RRXCNT	embello/ezr/simh2/xmodem-24.asm	/^RRXCNT:	call	CILPRT$/;"	l
RRXCNT	embello/ezr/simh2/xmodem.asm	/^RRXCNT:	call	CILPRT$/;"	l
RSECLP	embello/ezr/simh2/xmodem-24.asm	/^RSECLP:	mvi	c,BSTDMA	;Set CP\/M DMA address$/;"	l
RSECLP	embello/ezr/simh2/xmodem.asm	/^RSECLP:	mvi	c,BSTDMA	;Set CP\/M DMA address$/;"	l
RST	embello/ezr/ex/bridge.fs	/^PB1 constant RST$/;"	d
RST	embello/ezr/pokemon.fs	/^PB8 constant RST$/;"	d
RSTACK	embello/ezr/simh2/xmodem-24.asm	/^RSTACK:$/;"	l
RSTACK	embello/ezr/simh2/xmodem.asm	/^RSTACK:$/;"	l
RTC	embello/flib/stm32f1/rtc.fs	/^$40002800 constant RTC$/;"	d
RTC	flib/./stm32f1/rtc.fs	/^$40002800 constant RTC$/;"	d
RTC	flib/stm32f1/rtc.fs	/^$40002800 constant RTC$/;"	d
RTC-CNTH	embello/flib/stm32f1/rtc.fs	/^     RTC $18 + constant RTC-CNTH$/;"	d
RTC-CNTH	flib/./stm32f1/rtc.fs	/^     RTC $18 + constant RTC-CNTH$/;"	d
RTC-CNTH	flib/stm32f1/rtc.fs	/^     RTC $18 + constant RTC-CNTH$/;"	d
RTC-CNTL	embello/flib/stm32f1/rtc.fs	/^     RTC $1C + constant RTC-CNTL$/;"	d
RTC-CNTL	flib/./stm32f1/rtc.fs	/^     RTC $1C + constant RTC-CNTL$/;"	d
RTC-CNTL	flib/stm32f1/rtc.fs	/^     RTC $1C + constant RTC-CNTL$/;"	d
RTC-CRL	embello/flib/stm32f1/rtc.fs	/^     RTC $04 + constant RTC-CRL$/;"	d
RTC-CRL	flib/./stm32f1/rtc.fs	/^     RTC $04 + constant RTC-CRL$/;"	d
RTC-CRL	flib/stm32f1/rtc.fs	/^     RTC $04 + constant RTC-CRL$/;"	d
RTC-PRLL	embello/flib/stm32f1/rtc.fs	/^     RTC $0C + constant RTC-PRLL$/;"	d
RTC-PRLL	flib/./stm32f1/rtc.fs	/^     RTC $0C + constant RTC-PRLL$/;"	d
RTC-PRLL	flib/stm32f1/rtc.fs	/^     RTC $0C + constant RTC-PRLL$/;"	d
RX2	embello/flib/stm32l0/uart2.fs	/^[ifndef] RX2  PA3 constant RX2  [then]$/;"	d
RX2	flib/./stm32l0/uart2.fs	/^[ifndef] RX2  PA3 constant RX2  [then]$/;"	d
RX2	flib/stm32l0/uart2.fs	/^[ifndef] RX2  PA3 constant RX2  [then]$/;"	d
RXBC1	embello/ezr/simh2/xmodem.asm	/^RXBC1:	pop	h$/;"	l
RXBCON	embello/ezr/simh2/xmodem-24.asm	/^RXBCON:	call	RXTIMR		;(17+24) Timeout?$/;"	l
RXBCON	embello/ezr/simh2/xmodem.asm	/^RXBCON:	mvi	a,CONST		;(7)get console status$/;"	l
RXBLK	embello/ezr/simh2/xmodem-24.asm	/^RXBLK:	db	0	;Received block number$/;"	d
RXBLK	embello/ezr/simh2/xmodem.asm	/^RXBLK:	db	0	;Received block number$/;"	d
RXBYT1	embello/ezr/simh2/xmodem-24.asm	/^RXBYT1:	mvi	e,2		;1-second timeout$/;"	l
RXBYT1	embello/ezr/simh2/xmodem.asm	/^RXBYT1:	mvi	e,2$/;"	l
RXBYTE	embello/ezr/simh2/xmodem-24.asm	/^RXBYTE:	push	h$/;"	l
RXBYTE	embello/ezr/simh2/xmodem.asm	/^RXBYTE:	push	h$/;"	l
RXCHR	embello/ezr/simh2/xmodem-24.asm	/^RXCHR:	call	RXBYT1		;Get one byte of data$/;"	l
RXCHR	embello/ezr/simh2/xmodem.asm	/^RXCHR:	call	RXBYT1		;Get one byte of data$/;"	l
RXCSM	embello/ezr/simh2/xmodem-24.asm	/^RXCSM:	cz	PCKSUM		;print ' with checksums'$/;"	l
RXCSM	embello/ezr/simh2/xmodem.asm	/^RXCSM:	cz	PCKSUM		;print ' with checksums'$/;"	l
RXEOT	embello/ezr/simh2/xmodem-24.asm	/^RXEOT:	call	WFLUSH		;Write all blocks in SECBUF$/;"	l
RXEOT	embello/ezr/simh2/xmodem.asm	/^RXEOT:	call	WFLUSH		;Write all blocks in SECBUF$/;"	l
RXERDR	embello/ezr/simh2/xmodem-24.asm	/^RXERDR:	mvi	a,READER	;(7)BIOS routine offset$/;"	l
RXERDR	embello/ezr/simh2/xmodem.asm	/^RXERDR:	mvi	a,READER	;(7)BIOS call$/;"	l
RXERLP	embello/ezr/simh2/xmodem-24.asm	/^RXERLP:	call	RXTIMR		;(17+24)$/;"	l
RXFILE	embello/ezr/simh2/xmodem-24.asm	/^RXFILE:	call	CREATE		;create & open file on disk$/;"	l
RXFILE	embello/ezr/simh2/xmodem.asm	/^RXFILE:	call	CREATE		;create & open file on disk$/;"	l
RXIND	embello/ezr/simh2/xmodem-24.asm	/^RXIND:$/;"	l
RXIND	embello/ezr/simh2/xmodem.asm	/^RXIND:$/;"	l
RXLOOP	embello/ezr/simh2/xmodem-24.asm	/^RXLOOP:	call	GETBLK		;Receive an XMODEM block$/;"	l
RXLOOP	embello/ezr/simh2/xmodem.asm	/^RXLOOP:	call	GETBLK		;Receive an XMODEM block$/;"	l
RXRDR	embello/ezr/simh2/xmodem-24.asm	/^RXRDR:	dcr	h		;test ENHRDR$/;"	l
RXRDR	embello/ezr/simh2/xmodem.asm	/^RXRDR:	ora	a		;Enhanced reader?$/;"	l
RXRPT	embello/ezr/simh2/xmodem-24.asm	/^RXRPT:	mvi	e,SOHTO*2	;Timeout for SOH$/;"	l
RXRPT	embello/ezr/simh2/xmodem.asm	/^RXRPT:	mvi	e,SOHTO*2	;Timeout for SOH$/;"	l
RXSERR	embello/ezr/simh2/xmodem-24.asm	/^RXSERR:	call	CCTRLC		;user abort?$/;"	l
RXSERR	embello/ezr/simh2/xmodem.asm	/^RXSERR:	call	CCTRLC		;user abort?$/;"	l
RXSOH	embello/ezr/simh2/xmodem-24.asm	/^RXSOH:	mvi	a,NAK		;we have received$/;"	l
RXSOH	embello/ezr/simh2/xmodem.asm	/^RXSOH:	mvi	a,NAK		;we have received$/;"	l
RXTIMR	embello/ezr/simh2/xmodem-24.asm	/^RXTIMR:	dcx	h		;(5)timeout timer?$/;"	l
RXTIMR	embello/ezr/simh2/xmodem.asm	/^RXTIMR:	dcx	h		;(5)timeout timer?$/;"	l
SB1	embello/ezr/simh2/xmodem-24.asm	/^SB1:	ani	100h-BUFBLK	;round to nearest BUFBLK$/;"	l
SB1	embello/ezr/simh2/xmodem.asm	/^SB1:	ani	100h-BUFBLK	;round to nearest BUFBLK$/;"	l
SBUFSZ	embello/ezr/simh2/xmodem-24.asm	/^SBUFSZ:	db	0	;max sectors in SECBUF$/;"	d
SBUFSZ	embello/ezr/simh2/xmodem.asm	/^SBUFSZ:	db	0	;max sectors in SECBUF$/;"	d
SCL	embello/flib/any/i2c-bb.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCL	embello/flib/stm32f1/i2c.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCL	embello/flib/stm32l0/i2c.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCL	flib/./any/i2c-bb.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCL	flib/./stm32f1/i2c.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCL	flib/./stm32l0/i2c.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCL	flib/any/i2c-bb.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCL	flib/stm32f1/i2c.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCL	flib/stm32l0/i2c.fs	/^[ifndef] SCL  PB6 constant SCL  [then]$/;"	d
SCLK	embello/flib/any/spi-bb.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	embello/flib/stm32f1/spi.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	embello/flib/stm32l0/spi.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	embello/jz3/board.fs	/^PB3 constant SCLK$/;"	d
SCLK	embello/jz4/board.fs	/^PB3 constant SCLK$/;"	d
SCLK	flib/./any/spi-bb.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	flib/./stm32f1/spi.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	flib/./stm32l0/spi.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	flib/any/spi-bb.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	flib/stm32f1/spi.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	flib/stm32l0/spi.fs	/^[ifndef] SCLK  PA5 constant SCLK  [then]$/;"	d
SCLK	jz3/./board.fs	/^PB3 constant SCLK$/;"	d
SCLK	jz3/board.fs	/^PB3 constant SCLK$/;"	d
SCLK2	embello/flib/stm32f1/spi2.fs	/^[ifndef] SCLK2  PB13 constant SCLK2  [then]$/;"	d
SCLK2	flib/./stm32f1/spi2.fs	/^[ifndef] SCLK2  PB13 constant SCLK2  [then]$/;"	d
SCLK2	flib/stm32f1/spi2.fs	/^[ifndef] SCLK2  PB13 constant SCLK2  [then]$/;"	d
SCR	embello/flib/stm32l0/sleep.fs	/^$E000ED10 constant SCR$/;"	d
SCR	flib/./stm32l0/sleep.fs	/^$E000ED10 constant SCR$/;"	d
SCR	flib/stm32l0/sleep.fs	/^$E000ED10 constant SCR$/;"	d
SDA	embello/flib/any/i2c-bb.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SDA	embello/flib/stm32f1/i2c.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SDA	embello/flib/stm32l0/i2c.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SDA	flib/./any/i2c-bb.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SDA	flib/./stm32f1/i2c.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SDA	flib/./stm32l0/i2c.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SDA	flib/any/i2c-bb.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SDA	flib/stm32f1/i2c.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SDA	flib/stm32l0/i2c.fs	/^[ifndef] SDA  PB7 constant SDA  [then]$/;"	d
SECBUF	embello/ezr/simh2/xmodem-24.asm	/^SECBUF:	equ	$		;Sector buffer$/;"	d
SECBUF	embello/ezr/simh2/xmodem.asm	/^SECBUF:	equ	$		;Sector buffer$/;"	d
SECCNT	embello/ezr/simh2/xmodem-24.asm	/^SECCNT:	db	1	;Count of sectors in SECBUF$/;"	d
SECCNT	embello/ezr/simh2/xmodem.asm	/^SECCNT:	db	1	;Count of sectors in SECBUF$/;"	d
SECPTR	embello/ezr/simh2/xmodem-24.asm	/^SECPTR:	DW	SECBUF	;Points to next sect in SECBUF$/;"	d
SECPTR	embello/ezr/simh2/xmodem.asm	/^SECPTR:	DW	SECBUF	;Points to next sect in SECBUF$/;"	d
SECSIZ	embello/ezr/cpm2/wr1280k.c	12;"	d	file:
SECSIZ	embello/ezr/simh2/xmodem-24.asm	/^SECSIZ	equ	128	;CP\/M sector size must be 128$/;"	d
SECSIZ	embello/ezr/simh2/xmodem.asm	/^SECSIZ	equ	128	;CP\/M sector size must be 128$/;"	d
SELCRC	embello/ezr/simh2/xmodem-24.asm	/^SELCRC	equ	'C'		;selects CRC mode at initiation$/;"	d
SELCRC	embello/ezr/simh2/xmodem.asm	/^SELCRC	equ	'C'		;selects CRC mode at initiation$/;"	d
SEMSG	embello/ezr/simh2/xmodem-24.asm	/^SEMSG:	db	'lost blocks$'		;out of sequence$/;"	d
SEMSG	embello/ezr/simh2/xmodem.asm	/^SEMSG:	db	'lost blocks$'		;out of sequence$/;"	d
SERPLUS.ADDR	embello/tex/x-serplus.fs	/^$20002000 constant SERPLUS.ADDR$/;"	d
SERPLUS.SIZE	embello/tex/serplus.fs	/^7056 constant SERPLUS.SIZE$/;"	d
SETBIAS	embello/flib/spi/lcd-pcd8544.fs	/^$10  constant SETBIAS$/;"	d
SETBIAS	flib/./spi/lcd-pcd8544.fs	/^$10  constant SETBIAS$/;"	d
SETBIAS	flib/spi/lcd-pcd8544.fs	/^$10  constant SETBIAS$/;"	d
SETVOP	embello/flib/spi/lcd-pcd8544.fs	/^$80  constant SETVOP$/;"	d
SETVOP	flib/./spi/lcd-pcd8544.fs	/^$80  constant SETVOP$/;"	d
SETVOP	flib/spi/lcd-pcd8544.fs	/^$80  constant SETVOP$/;"	d
SETXADDR	embello/flib/spi/lcd-pcd8544.fs	/^$80  constant SETXADDR$/;"	d
SETXADDR	flib/./spi/lcd-pcd8544.fs	/^$80  constant SETXADDR$/;"	d
SETXADDR	flib/spi/lcd-pcd8544.fs	/^$80  constant SETXADDR$/;"	d
SETYADDR	embello/flib/spi/lcd-pcd8544.fs	/^$40  constant SETYADDR$/;"	d
SETYADDR	flib/./spi/lcd-pcd8544.fs	/^$40  constant SETYADDR$/;"	d
SETYADDR	flib/spi/lcd-pcd8544.fs	/^$40  constant SETYADDR$/;"	d
SF1	embello/ezr/simh2/xmodem-24.asm	/^SF1:	cpi	' '		;hunt for a space$/;"	l
SF1	embello/ezr/simh2/xmodem.asm	/^SF1:	cpi	' '		;hunt for a space$/;"	l
SI570.FREQ	embello/flib/i2c/si570.fs	/^[ifndef] SI570.FREQ  100000000 constant SI570.FREQ  [then]$/;"	d
SI570.FREQ	flib/./i2c/si570.fs	/^[ifndef] SI570.FREQ  100000000 constant SI570.FREQ  [then]$/;"	d
SI570.FREQ	flib/i2c/si570.fs	/^[ifndef] SI570.FREQ  100000000 constant SI570.FREQ  [then]$/;"	d
SIODAT	embello/ezr/simh2/xmodem-24.asm	/^SIODAT	equ	01h		;data port$/;"	d
SIODAT	embello/ezr/simh2/xmodem.asm	/^SIODAT	equ	01h		;data port$/;"	d
SIORDF	embello/ezr/simh2/xmodem-24.asm	/^SIORDF	equ	00000001b	;-RX Data register full$/;"	d
SIORDF	embello/ezr/simh2/xmodem.asm	/^SIORDF	equ	00000001b	;-RX Data register full$/;"	d
SIOSTA	embello/ezr/simh2/xmodem-24.asm	/^SIOSTA	equ	00h		;status port$/;"	d
SIOSTA	embello/ezr/simh2/xmodem.asm	/^SIOSTA	equ	00h		;status port$/;"	d
SIOTDE	embello/ezr/simh2/xmodem-24.asm	/^SIOTDE	equ	10000000b	;-TX Data register empty$/;"	d
SIOTDE	embello/ezr/simh2/xmodem.asm	/^SIOTDE	equ	10000000b	;-TX Data register empty$/;"	d
SKPFIL	embello/ezr/simh2/xmodem-24.asm	/^SKPFIL:	call	CMDCHR$/;"	l
SKPFIL	embello/ezr/simh2/xmodem.asm	/^SKPFIL:	call	CMDCHR$/;"	l
SMEM.SEL	central/board.fs	/^PA15 constant SMEM.SEL  \\ SPI flash memory$/;"	d
SMEM.SEL	embello/tex/board.fs	/^PA15 constant SMEM.SEL  \\ SPI flash memory$/;"	d
SOH	embello/ezr/simh2/xmodem-24.asm	/^SOH	equ	1		;Start of XMODEM block$/;"	d
SOH	embello/ezr/simh2/xmodem.asm	/^SOH	equ	1		;Start of XMODEM block$/;"	d
SOHTO	embello/ezr/simh2/xmodem-24.asm	/^SOHTO	equ	10	;(10)sender to send SOH $/;"	d
SOHTO	embello/ezr/simh2/xmodem.asm	/^SOHTO	equ	10	;(10)sender to send SOH $/;"	d
SPI1	embello/flib/stm32f1/spi.fs	/^$40013000 constant SPI1$/;"	d
SPI1	embello/flib/stm32l0/spi.fs	/^$40013000 constant SPI1$/;"	d
SPI1	flib/./stm32f1/spi.fs	/^$40013000 constant SPI1$/;"	d
SPI1	flib/./stm32l0/spi.fs	/^$40013000 constant SPI1$/;"	d
SPI1	flib/stm32f1/spi.fs	/^$40013000 constant SPI1$/;"	d
SPI1	flib/stm32l0/spi.fs	/^$40013000 constant SPI1$/;"	d
SPI1-CR1	embello/flib/stm32f1/spi.fs	/^     SPI1 $0 + constant SPI1-CR1$/;"	d
SPI1-CR1	embello/flib/stm32l0/spi.fs	/^     SPI1 $00 + constant SPI1-CR1$/;"	d
SPI1-CR1	flib/./stm32f1/spi.fs	/^     SPI1 $0 + constant SPI1-CR1$/;"	d
SPI1-CR1	flib/./stm32l0/spi.fs	/^     SPI1 $00 + constant SPI1-CR1$/;"	d
SPI1-CR1	flib/stm32f1/spi.fs	/^     SPI1 $0 + constant SPI1-CR1$/;"	d
SPI1-CR1	flib/stm32l0/spi.fs	/^     SPI1 $00 + constant SPI1-CR1$/;"	d
SPI1-CR2	embello/flib/stm32f1/spi.fs	/^     SPI1 $4 + constant SPI1-CR2$/;"	d
SPI1-CR2	embello/flib/stm32l0/spi.fs	/^     SPI1 $04 + constant SPI1-CR2$/;"	d
SPI1-CR2	flib/./stm32f1/spi.fs	/^     SPI1 $4 + constant SPI1-CR2$/;"	d
SPI1-CR2	flib/./stm32l0/spi.fs	/^     SPI1 $04 + constant SPI1-CR2$/;"	d
SPI1-CR2	flib/stm32f1/spi.fs	/^     SPI1 $4 + constant SPI1-CR2$/;"	d
SPI1-CR2	flib/stm32l0/spi.fs	/^     SPI1 $04 + constant SPI1-CR2$/;"	d
SPI1-CRCPR	embello/flib/stm32l0/spi.fs	/^\\    SPI1 $10 + constant SPI1-CRCPR$/;"	d
SPI1-CRCPR	flib/./stm32l0/spi.fs	/^\\    SPI1 $10 + constant SPI1-CRCPR$/;"	d
SPI1-CRCPR	flib/stm32l0/spi.fs	/^\\    SPI1 $10 + constant SPI1-CRCPR$/;"	d
SPI1-DR	embello/flib/stm32f1/spi.fs	/^     SPI1 $C + constant SPI1-DR$/;"	d
SPI1-DR	embello/flib/stm32l0/spi.fs	/^     SPI1 $0C + constant SPI1-DR$/;"	d
SPI1-DR	flib/./stm32f1/spi.fs	/^     SPI1 $C + constant SPI1-DR$/;"	d
SPI1-DR	flib/./stm32l0/spi.fs	/^     SPI1 $0C + constant SPI1-DR$/;"	d
SPI1-DR	flib/stm32f1/spi.fs	/^     SPI1 $C + constant SPI1-DR$/;"	d
SPI1-DR	flib/stm32l0/spi.fs	/^     SPI1 $0C + constant SPI1-DR$/;"	d
SPI1-RXCRCR	embello/flib/stm32l0/spi.fs	/^\\    SPI1 $14 + constant SPI1-RXCRCR$/;"	d
SPI1-RXCRCR	flib/./stm32l0/spi.fs	/^\\    SPI1 $14 + constant SPI1-RXCRCR$/;"	d
SPI1-RXCRCR	flib/stm32l0/spi.fs	/^\\    SPI1 $14 + constant SPI1-RXCRCR$/;"	d
SPI1-SR	embello/flib/stm32f1/spi.fs	/^     SPI1 $8 + constant SPI1-SR$/;"	d
SPI1-SR	embello/flib/stm32l0/spi.fs	/^     SPI1 $08 + constant SPI1-SR$/;"	d
SPI1-SR	flib/./stm32f1/spi.fs	/^     SPI1 $8 + constant SPI1-SR$/;"	d
SPI1-SR	flib/./stm32l0/spi.fs	/^     SPI1 $08 + constant SPI1-SR$/;"	d
SPI1-SR	flib/stm32f1/spi.fs	/^     SPI1 $8 + constant SPI1-SR$/;"	d
SPI1-SR	flib/stm32l0/spi.fs	/^     SPI1 $08 + constant SPI1-SR$/;"	d
SPI1-TXCRCR	embello/flib/stm32l0/spi.fs	/^\\    SPI1 $18 + constant SPI1-TXCRCR$/;"	d
SPI1-TXCRCR	flib/./stm32l0/spi.fs	/^\\    SPI1 $18 + constant SPI1-TXCRCR$/;"	d
SPI1-TXCRCR	flib/stm32l0/spi.fs	/^\\    SPI1 $18 + constant SPI1-TXCRCR$/;"	d
SPI2	embello/flib/stm32f1/spi2.fs	/^$40003800 constant SPI2$/;"	d
SPI2	flib/./stm32f1/spi2.fs	/^$40003800 constant SPI2$/;"	d
SPI2	flib/stm32f1/spi2.fs	/^$40003800 constant SPI2$/;"	d
SPI2-CR1	embello/flib/stm32f1/spi2.fs	/^     SPI2 $0 + constant SPI2-CR1$/;"	d
SPI2-CR1	flib/./stm32f1/spi2.fs	/^     SPI2 $0 + constant SPI2-CR1$/;"	d
SPI2-CR1	flib/stm32f1/spi2.fs	/^     SPI2 $0 + constant SPI2-CR1$/;"	d
SPI2-CR2	embello/flib/stm32f1/spi2.fs	/^     SPI2 $4 + constant SPI2-CR2$/;"	d
SPI2-CR2	flib/./stm32f1/spi2.fs	/^     SPI2 $4 + constant SPI2-CR2$/;"	d
SPI2-CR2	flib/stm32f1/spi2.fs	/^     SPI2 $4 + constant SPI2-CR2$/;"	d
SPI2-DR	embello/flib/stm32f1/spi2.fs	/^     SPI2 $C + constant SPI2-DR$/;"	d
SPI2-DR	flib/./stm32f1/spi2.fs	/^     SPI2 $C + constant SPI2-DR$/;"	d
SPI2-DR	flib/stm32f1/spi2.fs	/^     SPI2 $C + constant SPI2-DR$/;"	d
SPI2-SR	embello/flib/stm32f1/spi2.fs	/^     SPI2 $8 + constant SPI2-SR$/;"	d
SPI2-SR	flib/./stm32f1/spi2.fs	/^     SPI2 $8 + constant SPI2-SR$/;"	d
SPI2-SR	flib/stm32f1/spi2.fs	/^     SPI2 $8 + constant SPI2-SR$/;"	d
SRCS	embello/suf/Makefile	/^SRCS = $(wildcard f-*.fs)$/;"	m
STAR	embello/flib/uart/gps.fs	/^char * constant STAR$/;"	d
STAR	flib/./uart/gps.fs	/^char * constant STAR$/;"	d
STAR	flib/uart/gps.fs	/^char * constant STAR$/;"	d
SYNCER	embello/ezr/simh2/xmodem-24.asm	/^SYNCER:	lxi	d,SEMSG		;sync error$/;"	l
SYNCER	embello/ezr/simh2/xmodem.asm	/^SYNCER:	lxi	d,SEMSG		;sync error$/;"	l
SYNMSG	embello/ezr/simh2/xmodem-24.asm	/^SYNMSG:	db	'sync fail$'		;can't find SOH$/;"	d
SYNMSG	embello/ezr/simh2/xmodem.asm	/^SYNMSG:	db	'sync fail$'		;can't find SOH$/;"	d
Si-RH	embello/flib/i2c/si70xx.fs	/^: Si-RH      $40 i2c-addr $E5 >i2c 2 i2c-xfer i2c>h_inv Si7021-RH-conv ; \\ Measure RH (wait)$/;"	d
Si-RH	flib/./i2c/si70xx.fs	/^: Si-RH      $40 i2c-addr $E5 >i2c 2 i2c-xfer i2c>h_inv Si7021-RH-conv ; \\ Measure RH (wait)$/;"	d
Si-RH	flib/i2c/si70xx.fs	/^: Si-RH      $40 i2c-addr $E5 >i2c 2 i2c-xfer i2c>h_inv Si7021-RH-conv ; \\ Measure RH (wait)$/;"	d
Si-T	embello/flib/i2c/si70xx.fs	/^: Si-T       $40 i2c-addr $E3 >i2c 2 i2c-xfer i2c>h_inv Si7021-T-conv ;  \\ Measure T (wait)$/;"	d
Si-T	flib/./i2c/si70xx.fs	/^: Si-T       $40 i2c-addr $E3 >i2c 2 i2c-xfer i2c>h_inv Si7021-T-conv ;  \\ Measure T (wait)$/;"	d
Si-T	flib/i2c/si70xx.fs	/^: Si-T       $40 i2c-addr $E3 >i2c 2 i2c-xfer i2c>h_inv Si7021-T-conv ;  \\ Measure T (wait)$/;"	d
Si-lastT	embello/flib/i2c/si70xx.fs	/^: Si-lastT   $40 i2c-addr $E0 >i2c 2 i2c-xfer i2c>h_inv Si7021-T-conv ; \\ Get T from last RH measurement$/;"	d
Si-lastT	flib/./i2c/si70xx.fs	/^: Si-lastT   $40 i2c-addr $E0 >i2c 2 i2c-xfer i2c>h_inv Si7021-T-conv ; \\ Get T from last RH measurement$/;"	d
Si-lastT	flib/i2c/si70xx.fs	/^: Si-lastT   $40 i2c-addr $E0 >i2c 2 i2c-xfer i2c>h_inv Si7021-T-conv ; \\ Get T from last RH measurement$/;"	d
Si-serial1	embello/flib/i2c/si70xx.fs	/^: Si-serial1 ( -- u) \\ Gets first 32 bits of serial$/;"	d
Si-serial1	flib/./i2c/si70xx.fs	/^: Si-serial1 ( -- u) \\ Gets first 32 bits of serial$/;"	d
Si-serial1	flib/i2c/si70xx.fs	/^: Si-serial1 ( -- u) \\ Gets first 32 bits of serial$/;"	d
Si-serial2	embello/flib/i2c/si70xx.fs	/^: Si-serial2 ( -- u) \\ Gets 2nd 32 bits of serial$/;"	d
Si-serial2	flib/./i2c/si70xx.fs	/^: Si-serial2 ( -- u) \\ Gets 2nd 32 bits of serial$/;"	d
Si-serial2	flib/i2c/si70xx.fs	/^: Si-serial2 ( -- u) \\ Gets 2nd 32 bits of serial$/;"	d
Si7021-RH-conv	embello/flib/i2c/si70xx.fs	/^: Si7021-RH-conv ( u -- s ) \\ converts measured RH to signed int RH$/;"	d
Si7021-RH-conv	flib/./i2c/si70xx.fs	/^: Si7021-RH-conv ( u -- s ) \\ converts measured RH to signed int RH$/;"	d
Si7021-RH-conv	flib/i2c/si70xx.fs	/^: Si7021-RH-conv ( u -- s ) \\ converts measured RH to signed int RH$/;"	d
Si7021-T-conv	embello/flib/i2c/si70xx.fs	/^: Si7021-T-conv ( u -- ds) \\ converts measured T to fixed point T$/;"	d
Si7021-T-conv	flib/./i2c/si70xx.fs	/^: Si7021-T-conv ( u -- ds) \\ converts measured T to fixed point T$/;"	d
Si7021-T-conv	flib/i2c/si70xx.fs	/^: Si7021-T-conv ( u -- ds) \\ converts measured T to fixed point T$/;"	d
TAB	embello/ezr/simh2/xmodem-24.asm	/^TAB	equ	9		;horizontal tab$/;"	d
TAB	embello/ezr/simh2/xmodem.asm	/^TAB	equ	9		;horizontal tab$/;"	d
TAEMSG	embello/ezr/simh2/xmodem-24.asm	/^TAEMSG:	db	(ERRLIM\/10)+'0'		;too many bad ACKs$/;"	d
TAEMSG	embello/ezr/simh2/xmodem.asm	/^TAEMSG:	db	(ERRLIM\/10)+'0'		;too many bad ACKs$/;"	d
TESTS	tracker/tracker-test.fs	/^: TESTS ;$/;"	d
TFT.LIGHT	embello/zeb/dev.fs	/^PB0 constant TFT.LIGHT$/;"	d
TIM.ARR	embello/flib/stm32f1/timer.fs	/^$2C constant TIM.ARR$/;"	d
TIM.ARR	embello/flib/stm32l0/timer.fs	/^$2C constant TIM.ARR$/;"	d
TIM.ARR	flib/./stm32f1/timer.fs	/^$2C constant TIM.ARR$/;"	d
TIM.ARR	flib/./stm32l0/timer.fs	/^$2C constant TIM.ARR$/;"	d
TIM.ARR	flib/stm32f1/timer.fs	/^$2C constant TIM.ARR$/;"	d
TIM.ARR	flib/stm32l0/timer.fs	/^$2C constant TIM.ARR$/;"	d
TIM.CR1	embello/flib/stm32f1/timer.fs	/^$00 constant TIM.CR1$/;"	d
TIM.CR1	embello/flib/stm32l0/timer.fs	/^$00 constant TIM.CR1$/;"	d
TIM.CR1	flib/./stm32f1/timer.fs	/^$00 constant TIM.CR1$/;"	d
TIM.CR1	flib/./stm32l0/timer.fs	/^$00 constant TIM.CR1$/;"	d
TIM.CR1	flib/stm32f1/timer.fs	/^$00 constant TIM.CR1$/;"	d
TIM.CR1	flib/stm32l0/timer.fs	/^$00 constant TIM.CR1$/;"	d
TIM.CR2	embello/flib/stm32f1/timer.fs	/^$04 constant TIM.CR2$/;"	d
TIM.CR2	embello/flib/stm32l0/timer.fs	/^$04 constant TIM.CR2$/;"	d
TIM.CR2	flib/./stm32f1/timer.fs	/^$04 constant TIM.CR2$/;"	d
TIM.CR2	flib/./stm32l0/timer.fs	/^$04 constant TIM.CR2$/;"	d
TIM.CR2	flib/stm32f1/timer.fs	/^$04 constant TIM.CR2$/;"	d
TIM.CR2	flib/stm32l0/timer.fs	/^$04 constant TIM.CR2$/;"	d
TIM.DIER	embello/flib/stm32f1/timer.fs	/^$0C constant TIM.DIER$/;"	d
TIM.DIER	embello/flib/stm32l0/timer.fs	/^$0C constant TIM.DIER$/;"	d
TIM.DIER	flib/./stm32f1/timer.fs	/^$0C constant TIM.DIER$/;"	d
TIM.DIER	flib/./stm32l0/timer.fs	/^$0C constant TIM.DIER$/;"	d
TIM.DIER	flib/stm32f1/timer.fs	/^$0C constant TIM.DIER$/;"	d
TIM.DIER	flib/stm32l0/timer.fs	/^$0C constant TIM.DIER$/;"	d
TIM.PSC	embello/flib/stm32f1/timer.fs	/^$28 constant TIM.PSC$/;"	d
TIM.PSC	embello/flib/stm32l0/timer.fs	/^$28 constant TIM.PSC$/;"	d
TIM.PSC	flib/./stm32f1/timer.fs	/^$28 constant TIM.PSC$/;"	d
TIM.PSC	flib/./stm32l0/timer.fs	/^$28 constant TIM.PSC$/;"	d
TIM.PSC	flib/stm32f1/timer.fs	/^$28 constant TIM.PSC$/;"	d
TIM.PSC	flib/stm32l0/timer.fs	/^$28 constant TIM.PSC$/;"	d
TIMRLD	embello/ezr/simh2/xmodem-24.asm	/^TIMRLD:	dw	0	;receive timeout value$/;"	d
TIMRLD	embello/ezr/simh2/xmodem.asm	/^TIMRLD:	dw	0	;receive timeout value$/;"	d
TMP.ADDR	embello/flib/i2c/tmp102.fs	/^[ifndef] TMP.ADDR  $48 constant TMP.ADDR  [then]$/;"	d
TMP.ADDR	flib/./i2c/tmp102.fs	/^[ifndef] TMP.ADDR  $48 constant TMP.ADDR  [then]$/;"	d
TMP.ADDR	flib/i2c/tmp102.fs	/^[ifndef] TMP.ADDR  $48 constant TMP.ADDR  [then]$/;"	d
TONE	embello/jz4/ex/tone.fs	/^440 constant TONE  \\ 440 Hz is an "A", 523.25 Hz is a "C"$/;"	d
TRUE	embello/ezr/simh2/xmodem-24.asm	/^TRUE	equ	not FALSE$/;"	d
TRUE	embello/ezr/simh2/xmodem.asm	/^TRUE	equ	not FALSE$/;"	d
TSETUP	embello/ezr/simh2/xmodem-24.asm	/^TSETUP:	lda	CPUMHZ$/;"	l
TSETUP	embello/ezr/simh2/xmodem.asm	/^TSETUP:	lda	CPUMHZ$/;"	l
TTOMSG	embello/ezr/simh2/xmodem-24.asm	/^TTOMSG:	db	'Tx fail$'		;Tx not ready$/;"	d
TTOMSG	embello/ezr/simh2/xmodem.asm	/^TTOMSG:	db	'UART Tx fail$'		;Tx not ready$/;"	d
TVC	embello/ezr/simh2/xmodem-24.asm	/^TVC:	sta	PACCNT		;CON: turn off pacifiers$/;"	l
TVC	embello/ezr/simh2/xmodem.asm	/^TVC:	sta	PACCNT		;CON: turn off pacifiers$/;"	l
TVD	embello/ezr/simh2/xmodem-24.asm	/^TVD:	call	ILPRNT$/;"	l
TVR	embello/ezr/simh2/xmodem-24.asm	/^TVR:	call	ILPRNT$/;"	l
TVR	embello/ezr/simh2/xmodem.asm	/^TVR:	call	ILPRNT$/;"	l
TX2	embello/flib/stm32l0/uart2.fs	/^[ifndef] TX2  PA2 constant TX2  [then]$/;"	d
TX2	flib/./stm32l0/uart2.fs	/^[ifndef] TX2  PA2 constant TX2  [then]$/;"	d
TX2	flib/stm32l0/uart2.fs	/^[ifndef] TX2  PA2 constant TX2  [then]$/;"	d
TXACK	embello/ezr/simh2/xmodem-24.asm	/^TXACK:	mvi	a,ACK$/;"	l
TXACK	embello/ezr/simh2/xmodem.asm	/^TXACK:	mvi	a,ACK$/;"	l
TXBA	embello/ezr/simh2/xmodem-24.asm	/^TXBA:	call	GOBIOS		;chr in c, routine in a$/;"	l
TXBA	embello/ezr/simh2/xmodem.asm	/^TXBA:	call	GOBIOS		;chr in c, routine in a$/;"	l
TXBDON	embello/ezr/simh2/xmodem-24.asm	/^TXBDON:	mov	a,c		;a=cksum or CRC 2nd byte $/;"	l
TXBDON	embello/ezr/simh2/xmodem.asm	/^TXBDON:	mov	a,c		;a=cksum or CRC 2nd byte $/;"	l
TXBLUP	embello/ezr/simh2/xmodem-24.asm	/^TXBLUP:	mov	a,m		;Get a data byte$/;"	l
TXBLUP	embello/ezr/simh2/xmodem.asm	/^TXBLUP:	mov	a,m		;Get a data byte$/;"	l
TXBTO	embello/ezr/simh2/xmodem-24.asm	/^TXBTO:	lxi	d,UTOMSG	;exit message$/;"	l
TXBTO	embello/ezr/simh2/xmodem.asm	/^TXBTO:	lxi	d,TTOMSG	;exit message$/;"	l
TXBYTE	embello/ezr/simh2/xmodem-24.asm	/^TXBYTE:	push	b$/;"	l
TXBYTE	embello/ezr/simh2/xmodem.asm	/^TXBYTE:	push	b$/;"	l
TXCNT	embello/ezr/simh2/xmodem-24.asm	/^TXCNT:	call	CILPRT$/;"	l
TXCNT	embello/ezr/simh2/xmodem.asm	/^TXCNT:	call	CILPRT$/;"	l
TXCON	embello/ezr/simh2/xmodem-24.asm	/^TXCON:	mvi	a,CONOUT	;BIOS send c to console$/;"	l
TXDRCT	embello/ezr/simh2/xmodem-24.asm	/^TXDRCT:	push	h$/;"	l
TXDRCT	embello/ezr/simh2/xmodem.asm	/^TXDRCT:	push	h$/;"	l
TXEOF	embello/ezr/simh2/xmodem-24.asm	/^TXEOF:	mvi	a,EOT		;Send an EOT$/;"	l
TXEOF	embello/ezr/simh2/xmodem.asm	/^TXEOF:	mvi	a,EOT		;Send an EOT$/;"	l
TXFILE	embello/ezr/simh2/xmodem-24.asm	/^TXFILE:	call	FOPEN		;Open file specified in FCB$/;"	l
TXFILE	embello/ezr/simh2/xmodem.asm	/^TXFILE:	call	FOPEN		;Open file specified in FCB$/;"	l
TXLOOP	embello/ezr/simh2/xmodem-24.asm	/^TXLOOP:	xra	a		;clear carry$/;"	l
TXLOOP	embello/ezr/simh2/xmodem.asm	/^TXLOOP:	xra	a		;clear carry$/;"	l
TXRPT	embello/ezr/simh2/xmodem-24.asm	/^TXRPT:	mvi	a,SOH		;SOH first$/;"	l
TXRPT	embello/ezr/simh2/xmodem.asm	/^TXRPT:	mvi	a,SOH		;SOH first$/;"	l
TXWAIT	embello/ezr/simh2/xmodem-24.asm	/^TXWAIT:	dcx	h		;(5)timeout?$/;"	l
TXWAIT	embello/ezr/simh2/xmodem.asm	/^TXWAIT:	dcx	h		;(5)timeout?$/;"	l
USAREA	embello/ezr/simh2/xmodem-24.asm	/^USAREA	equ	WBOOT+100H	;User program area$/;"	d
USAREA	embello/ezr/simh2/xmodem.asm	/^USAREA	equ	WBOOT+100H	;User program area$/;"	d
USART1	embello/flib/stm32f1/hal.fs	/^$40013800 constant USART1$/;"	d
USART1	embello/flib/stm32l0/hal.fs	/^$40013800 constant USART1$/;"	d
USART1	flib/./stm32f1/hal.fs	/^$40013800 constant USART1$/;"	d
USART1	flib/./stm32l0/hal.fs	/^$40013800 constant USART1$/;"	d
USART1	flib/stm32f1/hal.fs	/^$40013800 constant USART1$/;"	d
USART1	flib/stm32l0/hal.fs	/^$40013800 constant USART1$/;"	d
USART1-BRR	embello/flib/stm32f1/hal.fs	/^   USART1 $8 + constant USART1-BRR$/;"	d
USART1-BRR	embello/flib/stm32l0/hal.fs	/^   USART1 $8 + constant USART1-BRR$/;"	d
USART1-BRR	flib/./stm32f1/hal.fs	/^   USART1 $8 + constant USART1-BRR$/;"	d
USART1-BRR	flib/./stm32l0/hal.fs	/^   USART1 $8 + constant USART1-BRR$/;"	d
USART1-BRR	flib/stm32f1/hal.fs	/^   USART1 $8 + constant USART1-BRR$/;"	d
USART1-BRR	flib/stm32l0/hal.fs	/^   USART1 $8 + constant USART1-BRR$/;"	d
USART1-CR1	embello/jz1/ex/clock.fs	/^   USART1 $0 + constant USART1-CR1$/;"	d
USART1-CR1	embello/jz3/ex/clock.fs	/^   USART1 $0 + constant USART1-CR1$/;"	d
USART1-CR1	jz1/./ex/clock.fs	/^   USART1 $0 + constant USART1-CR1$/;"	d
USART1-CR1	jz1/ex/clock.fs	/^   USART1 $0 + constant USART1-CR1$/;"	d
USART1-CR1	jz3/./ex/clock.fs	/^   USART1 $0 + constant USART1-CR1$/;"	d
USART1-CR1	jz3/ex/clock.fs	/^   USART1 $0 + constant USART1-CR1$/;"	d
USART1-ISR	tracker/tracker.fs	/^USART1 $1C + constant USART1-ISR \\ interrupt status register$/;"	d
USART1-TDR	tracker/tracker.fs	/^USART1 $28 + constant USART1-TDR \\ transmit data register$/;"	d
USART1_BASE	embello/kb7/clock.fs	/^$40011000               constant USART1_BASE$/;"	d
USART1_BRR	embello/kb7/clock.fs	/^USART_BRR USART1_BASE + constant USART1_BRR$/;"	d
USART2	embello/flib/stm32f1/uart2.fs	/^$40004400 constant USART2$/;"	d
USART2	embello/flib/stm32l0/uart2.fs	/^$40004400 constant USART2$/;"	d
USART2	flib/./stm32f1/uart2.fs	/^$40004400 constant USART2$/;"	d
USART2	flib/./stm32l0/uart2.fs	/^$40004400 constant USART2$/;"	d
USART2	flib/stm32f1/uart2.fs	/^$40004400 constant USART2$/;"	d
USART2	flib/stm32l0/uart2.fs	/^$40004400 constant USART2$/;"	d
USART2-BRR	embello/flib/stm32f1/uart2.fs	/^   USART2 $08 + constant USART2-BRR$/;"	d
USART2-BRR	embello/flib/stm32l0/uart2.fs	/^     USART2 $0C + constant USART2-BRR \\ baud rate register$/;"	d
USART2-BRR	flib/./stm32f1/uart2.fs	/^   USART2 $08 + constant USART2-BRR$/;"	d
USART2-BRR	flib/./stm32l0/uart2.fs	/^     USART2 $0C + constant USART2-BRR \\ baud rate register$/;"	d
USART2-BRR	flib/stm32f1/uart2.fs	/^   USART2 $08 + constant USART2-BRR$/;"	d
USART2-BRR	flib/stm32l0/uart2.fs	/^     USART2 $0C + constant USART2-BRR \\ baud rate register$/;"	d
USART2-CR1	embello/flib/stm32f1/uart2.fs	/^   USART2 $0C + constant USART2-CR1$/;"	d
USART2-CR1	embello/flib/stm32l0/uart2.fs	/^     USART2 $00 + constant USART2-CR1$/;"	d
USART2-CR1	flib/./stm32f1/uart2.fs	/^   USART2 $0C + constant USART2-CR1$/;"	d
USART2-CR1	flib/./stm32l0/uart2.fs	/^     USART2 $00 + constant USART2-CR1$/;"	d
USART2-CR1	flib/stm32f1/uart2.fs	/^   USART2 $0C + constant USART2-CR1$/;"	d
USART2-CR1	flib/stm32l0/uart2.fs	/^     USART2 $00 + constant USART2-CR1$/;"	d
USART2-CR2	embello/flib/stm32f1/uart2.fs	/^\\  USART2 $10 + constant USART2-CR2$/;"	d
USART2-CR2	embello/flib/stm32l0/uart2.fs	/^     \\ USART2 $04 + constant USART2-CR2$/;"	d
USART2-CR2	flib/./stm32f1/uart2.fs	/^\\  USART2 $10 + constant USART2-CR2$/;"	d
USART2-CR2	flib/./stm32l0/uart2.fs	/^     \\ USART2 $04 + constant USART2-CR2$/;"	d
USART2-CR2	flib/stm32f1/uart2.fs	/^\\  USART2 $10 + constant USART2-CR2$/;"	d
USART2-CR2	flib/stm32l0/uart2.fs	/^     \\ USART2 $04 + constant USART2-CR2$/;"	d
USART2-CR3	embello/flib/stm32f1/uart2.fs	/^\\  USART2 $14 + constant USART2-CR3$/;"	d
USART2-CR3	embello/flib/stm32l0/uart2.fs	/^     USART2 $08 + constant USART2-CR3$/;"	d
USART2-CR3	flib/./stm32f1/uart2.fs	/^\\  USART2 $14 + constant USART2-CR3$/;"	d
USART2-CR3	flib/./stm32l0/uart2.fs	/^     USART2 $08 + constant USART2-CR3$/;"	d
USART2-CR3	flib/stm32f1/uart2.fs	/^\\  USART2 $14 + constant USART2-CR3$/;"	d
USART2-CR3	flib/stm32l0/uart2.fs	/^     USART2 $08 + constant USART2-CR3$/;"	d
USART2-DR	embello/flib/stm32f1/uart2.fs	/^   USART2 $04 + constant USART2-DR$/;"	d
USART2-DR	flib/./stm32f1/uart2.fs	/^   USART2 $04 + constant USART2-DR$/;"	d
USART2-DR	flib/stm32f1/uart2.fs	/^   USART2 $04 + constant USART2-DR$/;"	d
USART2-GPTR	embello/flib/stm32f1/uart2.fs	/^\\  USART2 $18 + constant USART2-GPTR$/;"	d
USART2-GPTR	flib/./stm32f1/uart2.fs	/^\\  USART2 $18 + constant USART2-GPTR$/;"	d
USART2-GPTR	flib/stm32f1/uart2.fs	/^\\  USART2 $18 + constant USART2-GPTR$/;"	d
USART2-GTPR	embello/flib/stm32l0/uart2.fs	/^     \\ USART2 $10 + constant USART2-GTPR \\ guard time and prescaler register$/;"	d
USART2-GTPR	flib/./stm32l0/uart2.fs	/^     \\ USART2 $10 + constant USART2-GTPR \\ guard time and prescaler register$/;"	d
USART2-GTPR	flib/stm32l0/uart2.fs	/^     \\ USART2 $10 + constant USART2-GTPR \\ guard time and prescaler register$/;"	d
USART2-ICR	embello/flib/stm32l0/uart2.fs	/^     USART2 $20 + constant USART2-ICR \\ interrupt flag clear register$/;"	d
USART2-ICR	flib/./stm32l0/uart2.fs	/^     USART2 $20 + constant USART2-ICR \\ interrupt flag clear register$/;"	d
USART2-ICR	flib/stm32l0/uart2.fs	/^     USART2 $20 + constant USART2-ICR \\ interrupt flag clear register$/;"	d
USART2-ISR	embello/flib/stm32l0/uart2.fs	/^     USART2 $1C + constant USART2-ISR \\ interrupt status register$/;"	d
USART2-ISR	flib/./stm32l0/uart2.fs	/^     USART2 $1C + constant USART2-ISR \\ interrupt status register$/;"	d
USART2-ISR	flib/stm32l0/uart2.fs	/^     USART2 $1C + constant USART2-ISR \\ interrupt status register$/;"	d
USART2-RDR	embello/flib/stm32l0/uart2.fs	/^     USART2 $24 + constant USART2-RDR \\ receive data register$/;"	d
USART2-RDR	flib/./stm32l0/uart2.fs	/^     USART2 $24 + constant USART2-RDR \\ receive data register$/;"	d
USART2-RDR	flib/stm32l0/uart2.fs	/^     USART2 $24 + constant USART2-RDR \\ receive data register$/;"	d
USART2-SR	embello/flib/stm32f1/uart2.fs	/^   USART2 $00 + constant USART2-SR$/;"	d
USART2-SR	flib/./stm32f1/uart2.fs	/^   USART2 $00 + constant USART2-SR$/;"	d
USART2-SR	flib/stm32f1/uart2.fs	/^   USART2 $00 + constant USART2-SR$/;"	d
USART2-TDR	embello/flib/stm32l0/uart2.fs	/^     USART2 $28 + constant USART2-TDR \\ transmit data register$/;"	d
USART2-TDR	flib/./stm32l0/uart2.fs	/^     USART2 $28 + constant USART2-TDR \\ transmit data register$/;"	d
USART2-TDR	flib/stm32l0/uart2.fs	/^     USART2 $28 + constant USART2-TDR \\ transmit data register$/;"	d
USART3	embello/flib/stm32f4/hal.fs	/^$40004800 constant USART3$/;"	d
USART3	embello/flib/stm32f7/hal.fs	/^$40004800 constant USART3$/;"	d
USART3	flib/./stm32f4/hal.fs	/^$40004800 constant USART3$/;"	d
USART3	flib/./stm32f7/hal.fs	/^$40004800 constant USART3$/;"	d
USART3	flib/stm32f4/hal.fs	/^$40004800 constant USART3$/;"	d
USART3	flib/stm32f7/hal.fs	/^$40004800 constant USART3$/;"	d
USART3-BRR	embello/flib/stm32f4/hal.fs	/^   USART3 $8 + constant USART3-BRR$/;"	d
USART3-BRR	embello/flib/stm32f7/hal.fs	/^   USART3 $8 + constant USART3-BRR$/;"	d
USART3-BRR	flib/./stm32f4/hal.fs	/^   USART3 $8 + constant USART3-BRR$/;"	d
USART3-BRR	flib/./stm32f7/hal.fs	/^   USART3 $8 + constant USART3-BRR$/;"	d
USART3-BRR	flib/stm32f4/hal.fs	/^   USART3 $8 + constant USART3-BRR$/;"	d
USART3-BRR	flib/stm32f7/hal.fs	/^   USART3 $8 + constant USART3-BRR$/;"	d
USART_BRR	embello/kb7/clock.fs	/^$0C                     constant USART_BRR$/;"	d
USB	embello/suf/usb.fs	/^$40005C00 constant USB$/;"	d
USB-BTABLE	embello/suf/usb.fs	/^     USB $50 + constant USB-BTABLE$/;"	d
USB-CNTR	embello/suf/usb.fs	/^     USB $40 + constant USB-CNTR$/;"	d
USB-DADDR	embello/suf/usb.fs	/^     USB $4C + constant USB-DADDR$/;"	d
USB-EP0R	embello/suf/usb.fs	/^     USB $00 + constant USB-EP0R$/;"	d
USB-FNR	embello/suf/usb.fs	/^     USB $48 + constant USB-FNR$/;"	d
USB-ISTR	embello/suf/usb.fs	/^     USB $44 + constant USB-ISTR$/;"	d
USBMEM	embello/suf/usb.fs	/^$40006000 constant USBMEM$/;"	d
UTOMSG	embello/ezr/simh2/xmodem-24.asm	/^UTOMSG:	db	'UART '			;fall into TTOMSG$/;"	d
VCC	embello/prc2/dev.fs	/^3300 constant VCC  \\ actual Vcc value, in millivolt$/;"	d
VCC1	embello/rvm/board.fs	/^PA11 constant VCC1$/;"	d
VCC2	embello/rvm/board.fs	/^PA12 constant VCC2$/;"	d
VERBOS	embello/ezr/simh2/xmodem-24.asm	/^VERBOS	equ	FALSE	;true enables several progress messages$/;"	d
VERBOS	embello/ezr/simh2/xmodem.asm	/^VERBOS	equ	FALSE	;true enables several progress messages$/;"	d
VHEATER	embello/prc2/dev.fs	/^PA1  constant VHEATER  \\ 10x + 1k = div 11$/;"	d
VPOWER	embello/prc2/dev.fs	/^PA3  constant VPOWER   \\ 10k + 1k = div 11$/;"	d
VTEMP	embello/prc2/dev.fs	/^PA0  constant VTEMP    \\ 1k + sens = Vcc$/;"	d
VTOR	embello/tex/x-serplus.fs	/^$E000ED08 constant VTOR$/;"	d
VUSB	embello/prc2/dev.fs	/^PA2  constant VUSB     \\ 10k + 10k = div 2$/;"	d
Vcellar	temp/rftemp.fs	/^1 variable Vcellar \\ lowest VCC measured$/;"	d
Vcellar	tlib/rfloop.fs	/^0 variable Vcellar                           \\ lowest VCC measured$/;"	d
WAITNK	embello/ezr/simh2/xmodem-24.asm	/^WAITNK:	lxi	d,NAMSG$/;"	l
WAITNK	embello/ezr/simh2/xmodem.asm	/^WAITNK:	lxi	d,NAMSG$/;"	l
WAITRX	embello/ezr/simh2/xmodem-24.asm	/^WAITRX:	call	RXTIMR		;(17+24)$/;"	l
WAITRX	embello/ezr/simh2/xmodem.asm	/^WAITRX:	call	RXTIMR		;(17+24)$/;"	l
WATCRX	embello/ezr/simh2/xmodem-24.asm	/^WATCRX:	call	RXTIMR		;(17+24)$/;"	l
WBOOT	embello/ezr/simh2/xmodem-24.asm	/^WBOOT	equ	0000H		;Jump to BIOS warm boot$/;"	d
WBOOT	embello/ezr/simh2/xmodem.asm	/^WBOOT	equ	0000H		;Jump to BIOS warm boot$/;"	d
WBOOTA	embello/ezr/simh2/xmodem-24.asm	/^WBOOTA	equ	WBOOT+1		;Address of Warm Boot$/;"	d
WBOOTA	embello/ezr/simh2/xmodem.asm	/^WBOOTA	equ	WBOOT+1		;Address of Warm Boot$/;"	d
WFLOOP	embello/ezr/simh2/xmodem-24.asm	/^WFLOOP:	mvi	c,BSTDMA	;CP\/M SET DMA function$/;"	l
WFLOOP	embello/ezr/simh2/xmodem.asm	/^WFLOOP:	mvi	c,BSTDMA	;CP\/M SET DMA function$/;"	l
WFLUSH	embello/ezr/simh2/xmodem-24.asm	/^WFLUSH:	lda	SECCNT		;# of sectors in SECBUF$/;"	l
WFLUSH	embello/ezr/simh2/xmodem.asm	/^WFLUSH:	lda	SECCNT		;# of sectors in SECBUF$/;"	l
WSKIP	embello/ezr/simh2/xmodem-24.asm	/^WSKIP:	call	CMDCHR		;sets Z if CR or LF$/;"	l
WSKIP	embello/ezr/simh2/xmodem.asm	/^WSKIP:	call	CMDCHR$/;"	l
XIN	embello/ezr/ex/bridge.fs	/^PB0 constant XIN$/;"	d
XIN	embello/ezr/pokemon.fs	/^PB0 constant XIN$/;"	d
XMODE	embello/ezr/simh2/xmodem-24.asm	/^XMODE:	db	0FFH	;1 for send, 0 for receive$/;"	d
XMODE	embello/ezr/simh2/xmodem.asm	/^XMODE:	db	0FFH	;1 for send, 0 for receive$/;"	d
XPORT	embello/ezr/simh2/xmodem-24.asm	/^XPORT:	db	1	;Transfer port defaults to RDR\/PUN$/;"	d
XPORT	embello/ezr/simh2/xmodem.asm	/^XPORT:	db	1	;Transfer port$/;"	d
XPRTBC	embello/ezr/simh2/xmodem-24.asm	/^XPRTBC:	lda	XPORT$/;"	l
XPRTBC	embello/ezr/simh2/xmodem.asm	/^XPRTBC:	lda	XPORT$/;"	l
ZCL	embello/ezr/ex/bridge.fs	/^PB4 constant ZCL$/;"	d
ZCL	embello/ezr/pokemon.fs	/^PB4 constant ZCL$/;"	d
ZDA	embello/ezr/ex/bridge.fs	/^PB5 constant ZDA$/;"	d
ZDA	embello/ezr/pokemon.fs	/^PB2 constant ZDA$/;"	d
[:	embello/flib/mecrisp/quotation.fs	/^: [: ( -- xt )$/;"	d
[:	flib/./mecrisp/quotation.fs	/^: [: ( -- xt )$/;"	d
[:	flib/mecrisp/quotation.fs	/^: [: ( -- xt )$/;"	d
[else]	embello/flib/mecrisp/cond.fs	/^: [else] ( -- )$/;"	d
[else]	flib/./mecrisp/cond.fs	/^: [else] ( -- )$/;"	d
[else]	flib/mecrisp/cond.fs	/^: [else] ( -- )$/;"	d
[if]	embello/flib/mecrisp/cond.fs	/^: [if]   ( ? -- )                 0=  if postpone [else] then immediate 1-foldable ;$/;"	d
[if]	flib/./mecrisp/cond.fs	/^: [if]   ( ? -- )                 0=  if postpone [else] then immediate 1-foldable ;$/;"	d
[if]	flib/mecrisp/cond.fs	/^: [if]   ( ? -- )                 0=  if postpone [else] then immediate 1-foldable ;$/;"	d
[ifdef]	embello/flib/mecrisp/cond.fs	/^: [ifdef]  ( -- ) token find drop 0=  if postpone [else] then immediate 0-foldable ;$/;"	d
[ifdef]	flib/./mecrisp/cond.fs	/^: [ifdef]  ( -- ) token find drop 0=  if postpone [else] then immediate 0-foldable ;$/;"	d
[ifdef]	flib/mecrisp/cond.fs	/^: [ifdef]  ( -- ) token find drop 0=  if postpone [else] then immediate 0-foldable ;$/;"	d
[ifndef]	embello/flib/mecrisp/cond.fs	/^: [ifndef] ( -- ) token find drop 0<> if postpone [else] then immediate 0-foldable ;$/;"	d
[ifndef]	flib/./mecrisp/cond.fs	/^: [ifndef] ( -- ) token find drop 0<> if postpone [else] then immediate 0-foldable ;$/;"	d
[ifndef]	flib/mecrisp/cond.fs	/^: [ifndef] ( -- ) token find drop 0<> if postpone [else] then immediate 0-foldable ;$/;"	d
[then]	embello/flib/mecrisp/cond.fs	/^: [then] ( -- ) immediate 0-foldable ;$/;"	d
[then]	flib/./mecrisp/cond.fs	/^: [then] ( -- ) immediate 0-foldable ;$/;"	d
[then]	flib/mecrisp/cond.fs	/^: [then] ( -- ) immediate 0-foldable ;$/;"	d
^2>>	embello/bme/dev.fs	/^: ^2>> ( n1 u -- n ) >r dup * r> arshift ;  \\ (n1 * n1) >> u$/;"	d
^2>>	embello/flib/i2c/bme280.fs	/^: ^2>> ( n1 u -- n ) >r dup * r> arshift ;  \\ (n1 * n1) >> u$/;"	d
^2>>	flib/./i2c/bme280.fs	/^: ^2>> ( n1 u -- n ) >r dup * r> arshift ;  \\ (n1 * n1) >> u$/;"	d
^2>>	flib/i2c/bme280.fs	/^: ^2>> ( n1 u -- n ) >r dup * r> arshift ;  \\ (n1 * n1) >> u$/;"	d
a	embello/ezr/pokemon.fs	/^: a ( u -- )$/;"	d
a	embello/suf/ex/long.fs	/^: a ." abcdefghijabcdefghijabcdefghijabcdefghijabcdefghij" ;$/;"	d
ab-pins	embello/jz4/ex/rot2.fs	/^: ab-pins ( -- n )  \\ read current A & B pin state as bits 1 and 0$/;"	d
ab-pins	embello/jz4/ex/rot3.fs	/^: ab-pins ( -- n )  \\ read current A & B pin state as bits 1 and 0$/;"	d
ab-pins	embello/jz4/ex/rot4.fs	/^: ab-pins ( -- n )  \\ read current A & B pin state as bits 1 and 0$/;"	d
ab-pins	embello/jz4/ex/rot5.fs	/^: ab-pins ( -- n )  \\ read current A & B pin state as bits 1 and 0$/;"	d
ab-pins	embello/jz4/ex/rot6.fs	/^: ab-pins ( -- n )  \\ read current A & B pin state as bits 1 and 0$/;"	d
activate	embello/flib/mecrisp/multi.fs	/^: activate ( task --   R: continue -- )$/;"	d
activate	flib/./mecrisp/multi.fs	/^: activate ( task --   R: continue -- )$/;"	d
activate	flib/mecrisp/multi.fs	/^: activate ( task --   R: continue -- )$/;"	d
adc	embello/flib/stm32f1/adc.fs	/^: adc ( pin -- u )  \\ read ADC value$/;"	d
adc	embello/flib/stm32l0/adc.fs	/^: adc ( pin -- u )  \\ read ADC value 2x to avoid chip erratum$/;"	d
adc	embello/prc2/dev.fs	/^: adc ( pin -- value ) dup adc drop adc ; \\ read twice, ignore first reading$/;"	d
adc	flib/./stm32f1/adc.fs	/^: adc ( pin -- u )  \\ read ADC value$/;"	d
adc	flib/./stm32l0/adc.fs	/^: adc ( pin -- u )  \\ read ADC value 2x to avoid chip erratum$/;"	d
adc	flib/stm32f1/adc.fs	/^: adc ( pin -- u )  \\ read ADC value$/;"	d
adc	flib/stm32l0/adc.fs	/^: adc ( pin -- u )  \\ read ADC value 2x to avoid chip erratum$/;"	d
adc#	embello/flib/stm32f1/adc.fs	/^: adc# ( pin -- n )  \\ convert pin number to adc index$/;"	d
adc#	flib/./stm32f1/adc.fs	/^: adc# ( pin -- n )  \\ convert pin number to adc index$/;"	d
adc#	flib/stm32f1/adc.fs	/^: adc# ( pin -- n )  \\ convert pin number to adc index$/;"	d
adc-calib	embello/flib/stm32f1/adc.fs	/^: adc-calib ( -- )  \\ perform an ADC calibration cycle$/;"	d
adc-calib	embello/flib/stm32l0/adc.fs	/^: adc-calib ( -- )  \\ perform an ADC calibration cycle$/;"	d
adc-calib	flib/./stm32f1/adc.fs	/^: adc-calib ( -- )  \\ perform an ADC calibration cycle$/;"	d
adc-calib	flib/./stm32l0/adc.fs	/^: adc-calib ( -- )  \\ perform an ADC calibration cycle$/;"	d
adc-calib	flib/stm32f1/adc.fs	/^: adc-calib ( -- )  \\ perform an ADC calibration cycle$/;"	d
adc-calib	flib/stm32l0/adc.fs	/^: adc-calib ( -- )  \\ perform an ADC calibration cycle$/;"	d
adc-deinit	embello/flib/stm32l0/adc.fs	/^: adc-deinit ( -- )  \\ de-initialise ADC$/;"	d
adc-deinit	flib/./stm32l0/adc.fs	/^: adc-deinit ( -- )  \\ de-initialise ADC$/;"	d
adc-deinit	flib/stm32l0/adc.fs	/^: adc-deinit ( -- )  \\ de-initialise ADC$/;"	d
adc-init	embello/flib/stm32f1/adc.fs	/^: adc-init ( -- )  \\ initialise ADC$/;"	d
adc-init	embello/flib/stm32l0/adc.fs	/^: adc-init ( -- )  \\ initialise ADC$/;"	d
adc-init	flib/./stm32f1/adc.fs	/^: adc-init ( -- )  \\ initialise ADC$/;"	d
adc-init	flib/./stm32l0/adc.fs	/^: adc-init ( -- )  \\ initialise ADC$/;"	d
adc-init	flib/stm32f1/adc.fs	/^: adc-init ( -- )  \\ initialise ADC$/;"	d
adc-init	flib/stm32l0/adc.fs	/^: adc-init ( -- )  \\ initialise ADC$/;"	d
adc-once	embello/flib/stm32f1/adc.fs	/^: adc-once ( -- u )  \\ read ADC value once$/;"	d
adc-once	embello/flib/stm32l0/adc.fs	/^: adc-once ( -- u )  \\ read ADC value once$/;"	d
adc-once	flib/./stm32f1/adc.fs	/^: adc-once ( -- u )  \\ read ADC value once$/;"	d
adc-once	flib/./stm32l0/adc.fs	/^: adc-once ( -- u )  \\ read ADC value once$/;"	d
adc-once	flib/stm32f1/adc.fs	/^: adc-once ( -- u )  \\ read ADC value once$/;"	d
adc-once	flib/stm32l0/adc.fs	/^: adc-once ( -- u )  \\ read ADC value once$/;"	d
adc-pins	embello/rvm/main.fs	/^: adc-pins$/;"	d
adc-temp	embello/flib/stm32l0/adc.fs	/^: adc-temp ( -- degc )  \\ measure chip temperature$/;"	d
adc-temp	flib/./stm32l0/adc.fs	/^: adc-temp ( -- degc )  \\ measure chip temperature$/;"	d
adc-temp	flib/stm32l0/adc.fs	/^: adc-temp ( -- degc )  \\ measure chip temperature$/;"	d
adc-vcc	embello/flib/stm32f1/adc.fs	/^: adc-vcc ( -- mv )  \\ return estimated Vcc, based on 1.2V internal bandgap$/;"	d
adc-vcc	embello/flib/stm32l0/adc.fs	/^: adc-vcc ( -- mv )  \\ measure current Vcc$/;"	d
adc-vcc	flib/./stm32f1/adc.fs	/^: adc-vcc ( -- mv )  \\ return estimated Vcc, based on 1.2V internal bandgap$/;"	d
adc-vcc	flib/./stm32l0/adc.fs	/^: adc-vcc ( -- mv )  \\ measure current Vcc$/;"	d
adc-vcc	flib/stm32f1/adc.fs	/^: adc-vcc ( -- mv )  \\ return estimated Vcc, based on 1.2V internal bandgap$/;"	d
adc-vcc	flib/stm32l0/adc.fs	/^: adc-vcc ( -- mv )  \\ measure current Vcc$/;"	d
adc1-dma	embello/flib/stm32f1/adc.fs	/^: adc1-dma ( addr count pin rate -- )  \\ continuous DMA-based conversion$/;"	d
adc1-dma	flib/./stm32f1/adc.fs	/^: adc1-dma ( addr count pin rate -- )  \\ continuous DMA-based conversion$/;"	d
adc1-dma	flib/stm32f1/adc.fs	/^: adc1-dma ( addr count pin rate -- )  \\ continuous DMA-based conversion$/;"	d
adc?	embello/flib/stm32l0/adc.fs	/^: adc? ( -- )$/;"	d
adc?	flib/./stm32l0/adc.fs	/^: adc? ( -- )$/;"	d
adc?	flib/stm32l0/adc.fs	/^: adc? ( -- )$/;"	d
add-crlf	embello/flib/uart/gps-test.fs	/^: add-crlf ( c-addr len -- c-addr len+2 )$/;"	d
add-crlf	flib/./uart/gps-test.fs	/^: add-crlf ( c-addr len -- c-addr len+2 )$/;"	d
add-crlf	flib/uart/gps-test.fs	/^: add-crlf ( c-addr len -- c-addr len+2 )$/;"	d
add-crlf	follower/hc05-test.fs	/^: add-crlf ( c-addr len -- c-addr len+2 ) \\ append CR-LF to string$/;"	d
add-crlf	tracker/tracker-test.fs	/^: add-crlf ( c-addr len -- c-addr len+2 )$/;"	d
addr	embello/flib/i2c/bno055.fs	/^: addr $28 i2c-addr ;             \\ set the device i2c address$/;"	d
addr	flib/./i2c/bno055.fs	/^: addr $28 i2c-addr ;             \\ set the device i2c address$/;"	d
addr	flib/i2c/bno055.fs	/^: addr $28 i2c-addr ;             \\ set the device i2c address$/;"	d
addr.	embello/flib/mecrisp/disassembler-m0.fs	/^: addr. u.8 ;$/;"	d
addr.	embello/flib/mecrisp/disassembler-m3.fs	/^: addr. u.8 ;$/;"	d
addr.	flib/./mecrisp/disassembler-m0.fs	/^: addr. u.8 ;$/;"	d
addr.	flib/./mecrisp/disassembler-m3.fs	/^: addr. u.8 ;$/;"	d
addr.	flib/mecrisp/disassembler-m0.fs	/^: addr. u.8 ;$/;"	d
addr.	flib/mecrisp/disassembler-m3.fs	/^: addr. u.8 ;$/;"	d
aes	embello/flib/any/aes128.fs	/^: aes ( c-addr key -- )  \\ aes128 encrypt block$/;"	d
aes	flib/./any/aes128.fs	/^: aes ( c-addr key -- )  \\ aes128 encrypt block$/;"	d
aes	flib/any/aes128.fs	/^: aes ( c-addr key -- )  \\ aes128 encrypt block$/;"	d
aes-cmac	embello/flib/any/aes128.fs	/^: aes-cmac ( buf len key iv -- mic )  \\ AES-CMAC hash key calculation$/;"	d
aes-cmac	flib/./any/aes128.fs	/^: aes-cmac ( buf len key iv -- mic )  \\ AES-CMAC hash key calculation$/;"	d
aes-cmac	flib/any/aes128.fs	/^: aes-cmac ( buf len key iv -- mic )  \\ AES-CMAC hash key calculation$/;"	d
aes-cmac-int	embello/flib/any/aes128.fs	/^: aes-cmac-int ( buf-addr buf-len -- )  \\ AES-CMAC hash key (mic) calculation$/;"	d
aes-cmac-int	flib/./any/aes128.fs	/^: aes-cmac-int ( buf-addr buf-len -- )  \\ AES-CMAC hash key (mic) calculation$/;"	d
aes-cmac-int	flib/any/aes128.fs	/^: aes-cmac-int ( buf-addr buf-len -- )  \\ AES-CMAC hash key (mic) calculation$/;"	d
aes-cmac-noaux	embello/flib/any/aes128.fs	/^: aes-cmac-noaux ( buf len )$/;"	d
aes-cmac-noaux	flib/./any/aes128.fs	/^: aes-cmac-noaux ( buf len )$/;"	d
aes-cmac-noaux	flib/any/aes128.fs	/^: aes-cmac-noaux ( buf len )$/;"	d
aes-ctr	embello/flib/any/aes128.fs	/^: aes-ctr ( buf len key iv )  \\ AES-CTR encrypt buffer, encryption is in-situ$/;"	d
aes-ctr	flib/./any/aes128.fs	/^: aes-ctr ( buf len key iv )  \\ AES-CTR encrypt buffer, encryption is in-situ$/;"	d
aes-ctr	flib/any/aes128.fs	/^: aes-ctr ( buf len key iv )  \\ AES-CTR encrypt buffer, encryption is in-situ$/;"	d
aes-ctr-int	embello/flib/any/aes128.fs	/^: aes-ctr-int ( buf-addr buf-len -- ) \\ AES-CTR encrypt buffer.$/;"	d
aes-ctr-int	flib/./any/aes128.fs	/^: aes-ctr-int ( buf-addr buf-len -- ) \\ AES-CTR encrypt buffer.$/;"	d
aes-ctr-int	flib/any/aes128.fs	/^: aes-ctr-int ( buf-addr buf-len -- ) \\ AES-CTR encrypt buffer.$/;"	d
aes-inv	embello/flib/any/aes128inv.fs	/^: aes-inv ( c-addr key -- )  \\ aes128 decrypt block$/;"	d
aes-inv	flib/./any/aes128inv.fs	/^: aes-inv ( c-addr key -- )  \\ aes128 decrypt block$/;"	d
aes-inv	flib/any/aes128inv.fs	/^: aes-inv ( c-addr key -- )  \\ aes128 decrypt block$/;"	d
aes>	embello/flib/any/aes128.fs	/^: aes> ( caddr -- ) \\ output encrypted data block (16-bytes)$/;"	d
aes>	flib/./any/aes128.fs	/^: aes> ( caddr -- ) \\ output encrypted data block (16-bytes)$/;"	d
aes>	flib/any/aes128.fs	/^: aes> ( caddr -- ) \\ output encrypted data block (16-bytes)$/;"	d
ahb-prescaler!	embello/kb7/clock.fs	/^: ahb-prescaler! ( n -- ) $F0 RCC_CFGR bits! ;$/;"	d
always	embello/flib/any/testing.fs	/^: always ( f -- ) \\ assert that the flag on TOS is true$/;"	d
always	flib/./any/testing.fs	/^: always ( f -- ) \\ assert that the flag on TOS is true$/;"	d
always	flib/any/testing.fs	/^: always ( f -- ) \\ assert that the flag on TOS is true$/;"	d
apb1-prescaler!	embello/kb7/clock.fs	/^: apb1-prescaler! ( n -- ) $7 10 lshift RCC_CFGR bits! ;$/;"	d
apb2-prescaler!	embello/kb7/clock.fs	/^: apb2-prescaler! ( n -- ) $7 13 lshift RCC_CFGR bits! ;$/;"	d
app-loop	embello/prc2/dev.fs	/^: app-loop$/;"	d
app-setup	embello/prc2/dev.fs	/^: app-setup$/;"	d
app-setup	embello/wpp/dev.fs	/^: app-setup$/;"	d
ascii>bitpattern	embello/flib/mecrisp/graphics.fs	/^: ascii>bitpattern ( c -- c-addr ) \\ Translates ASCII to address of bitpatterns.$/;"	d
ascii>bitpattern	flib/./mecrisp/graphics.fs	/^: ascii>bitpattern ( c -- c-addr ) \\ Translates ASCII to address of bitpatterns.$/;"	d
ascii>bitpattern	flib/mecrisp/graphics.fs	/^: ascii>bitpattern ( c -- c-addr ) \\ Translates ASCII to address of bitpatterns.$/;"	d
auto	embello/flib/any/pid.fs	/^: auto ( -- )  \\ Switch back to auto-mode after manual modex$/;"	d
auto	flib/./any/pid.fs	/^: auto ( -- )  \\ Switch back to auto-mode after manual modex$/;"	d
auto	flib/any/pid.fs	/^: auto ( -- )  \\ Switch back to auto-mode after manual modex$/;"	d
autohold	embello/flib/any/pid.fs	/^: autohold ( -- )  \\ Bring PID back to auto-mode after a manual override$/;"	d
autohold	flib/./any/pid.fs	/^: autohold ( -- )  \\ Bring PID back to auto-mode after a manual override$/;"	d
autohold	flib/any/pid.fs	/^: autohold ( -- )  \\ Bring PID back to auto-mode after a manual override$/;"	d
b	embello/ezr/pokemon.fs	/^: b  $80 $10 >zdi ;$/;"	d
b	embello/suf/ex/long.fs	/^: b ." abcdefghijabcdefghijabcdefghijabcdefghij"$/;"	d
b>i2c	embello/flib/any/i2c-bb.fs	/^: b>i2c ( f -- )  \\ send one I2C bit$/;"	d
b>i2c	flib/./any/i2c-bb.fs	/^: b>i2c ( f -- )  \\ send one I2C bit$/;"	d
b>i2c	flib/any/i2c-bb.fs	/^: b>i2c ( f -- )  \\ send one I2C bit$/;"	d
background	embello/flib/mecrisp/multi.fs	/^: background ( task --   R: continue -- )$/;"	d
background	flib/./mecrisp/multi.fs	/^: background ( task --   R: continue -- )$/;"	d
background	flib/mecrisp/multi.fs	/^: background ( task --   R: continue -- )$/;"	d
baud	central/x-clock.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	embello/flib/stm32f1/clock.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	embello/flib/stm32f1/hal.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	embello/flib/stm32l0/hal.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	flib/./stm32f1/clock.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	flib/./stm32f1/hal.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	flib/./stm32l0/hal.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	flib/stm32f1/clock.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	flib/stm32f1/hal.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
baud	flib/stm32l0/hal.fs	/^: baud ( u -- u )  \\ calculate baud rate divider, based on current clock rate$/;"	d
bit	embello/flib/stm32f1/io-orig.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	embello/flib/stm32f4/io.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	embello/flib/stm32l0/io.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	embello/suf/hal-stm32f1.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	flib/./stm32f1/io-orig.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	flib/./stm32f4/io.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	flib/./stm32l0/io.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	flib/stm32f1/io-orig.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	flib/stm32f4/io.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit	flib/stm32l0/io.fs	/^: bit ( u -- u )  \\ turn a bit position into a single-bit mask$/;"	d
bit!	embello/flib/stm32l0/io.fs	/^: bit! ( mask addr f -- )  \\ set or clear specified bit(s)$/;"	d
bit!	flib/./stm32l0/io.fs	/^: bit! ( mask addr f -- )  \\ set or clear specified bit(s)$/;"	d
bit!	flib/stm32l0/io.fs	/^: bit! ( mask addr f -- )  \\ set or clear specified bit(s)$/;"	d
bits!	embello/kb7/clock.fs	/^: bits! ( n m adr -- )   \\ set bitfield value n to value at masked position$/;"	d
bits@	embello/kb7/clock.fs	/^: bits@ ( m adr -- b )   \\ get bitfield at masked position after shifting down$/;"	d
bk	embello/bct/ex/adc.fs	/^1 constant bk  \\ black$/;"	d
blink1	embello/g6s/ex/timers.fs	/^: blink1 ( -- )  LED1 iox! ;   \\ toggle LED1$/;"	d
blink1&	embello/g6s/ex/tasks.fs	/^: blink1& ( -- )$/;"	d
blink2	embello/g6s/ex/timers.fs	/^: blink2 ( -- )  LED2 iox! ;   \\ toggle LED2$/;"	d
blink2&	embello/g6s/ex/tasks.fs	/^: blink2& ( -- )$/;"	d
blink3	embello/g6s/ex/timers.fs	/^: blink3 ( -- )  LED3 iox! ;   \\ toggle LED3$/;"	d
blink3&	embello/g6s/ex/tasks.fs	/^: blink3& ( -- )$/;"	d
blink4	embello/g6s/ex/timers.fs	/^: blink4 ( -- )  LED4 iox! ;   \\ toggle LED4$/;"	d
blink4&	embello/g6s/ex/tasks.fs	/^: blink4& ( -- )$/;"	d
blip	embello/jz3/ex/leds.fs	/^: blip ( pin -- )  dup ios!  100 ms  ioc! ;$/;"	d
blip	embello/jz4/dev.fs	/^: blip $/;"	d
blip	jz3/./ex/leds.fs	/^: blip ( pin -- )  dup ios!  100 ms  ioc! ;$/;"	d
blip	jz3/ex/leds.fs	/^: blip ( pin -- )  dup ios!  100 ms  ioc! ;$/;"	d
bme-calc	embello/flib/i2c/bme280.fs	/^: bme-calc ( -- h p t )  \\ convert reading to calibrated values$/;"	d
bme-calc	flib/./i2c/bme280.fs	/^: bme-calc ( -- h p t )  \\ convert reading to calibrated values$/;"	d
bme-calc	flib/i2c/bme280.fs	/^: bme-calc ( -- h p t )  \\ convert reading to calibrated values$/;"	d
bme-calib	embello/bme/dev.fs	/^: bme-calib ( -- )$/;"	d
bme-calib	embello/flib/i2c/bme280.fs	/^: bme-calib ( -- )$/;"	d
bme-calib	flib/./i2c/bme280.fs	/^: bme-calib ( -- )$/;"	d
bme-calib	flib/i2c/bme280.fs	/^: bme-calib ( -- )$/;"	d
bme-convert	embello/flib/i2c/bme280.fs	/^: bme-convert ( -- ms ) \\ perform a one-shot forced reading, return ms before data is ready$/;"	d
bme-convert	flib/./i2c/bme280.fs	/^: bme-convert ( -- ms ) \\ perform a one-shot forced reading, return ms before data is ready$/;"	d
bme-convert	flib/i2c/bme280.fs	/^: bme-convert ( -- ms ) \\ perform a one-shot forced reading, return ms before data is ready$/;"	d
bme-data	embello/bme/dev.fs	/^: bme-data ( -- )$/;"	d
bme-data	embello/flib/i2c/bme280.fs	/^: bme-data ( -- )  \\ get a sensor reading from the BME280$/;"	d
bme-data	flib/./i2c/bme280.fs	/^: bme-data ( -- )  \\ get a sensor reading from the BME280$/;"	d
bme-data	flib/i2c/bme280.fs	/^: bme-data ( -- )  \\ get a sensor reading from the BME280$/;"	d
bme-hpt	embello/bme/dev.fs	/^: bme-hpt ( -- rawh rawp rawt )$/;"	d
bme-hpt	embello/flib/i2c/bme280.fs	/^: bme-hpt ( -- rawh rawp rawt )$/;"	d
bme-hpt	flib/./i2c/bme280.fs	/^: bme-hpt ( -- rawh rawp rawt )$/;"	d
bme-hpt	flib/i2c/bme280.fs	/^: bme-hpt ( -- rawh rawp rawt )$/;"	d
bme-i2c+	embello/bme/dev.fs	/^: bme-i2c+ ( addr nak -- addr+1 ) i2c> over c! 1+ ;$/;"	d
bme-i2c+	embello/flib/i2c/bme280.fs	/^: bme-i2c+ ( addr -- addr+1 ) i2c> over c! 1+ ;$/;"	d
bme-i2c+	flib/./i2c/bme280.fs	/^: bme-i2c+ ( addr -- addr+1 ) i2c> over c! 1+ ;$/;"	d
bme-i2c+	flib/i2c/bme280.fs	/^: bme-i2c+ ( addr -- addr+1 ) i2c> over c! 1+ ;$/;"	d
bme-init	embello/bme/dev.fs	/^: bme-init ( -- )$/;"	d
bme-init	embello/flib/i2c/bme280.fs	/^: bme-init ( -- nak ) \\ init the bme280 into continuous mode$/;"	d
bme-init	flib/./i2c/bme280.fs	/^: bme-init ( -- nak ) \\ init the bme280 into continuous mode$/;"	d
bme-init	flib/i2c/bme280.fs	/^: bme-init ( -- nak ) \\ init the bme280 into continuous mode$/;"	d
bme-init-sleep	embello/flib/i2c/bme280.fs	/^: bme-init-sleep ( -- nak ) \\ init the bme280 into sleep mode$/;"	d
bme-init-sleep	flib/./i2c/bme280.fs	/^: bme-init-sleep ( -- nak ) \\ init the bme280 into sleep mode$/;"	d
bme-init-sleep	flib/i2c/bme280.fs	/^: bme-init-sleep ( -- nak ) \\ init the bme280 into sleep mode$/;"	d
bme-power	embello/jz3/ex/sensor.fs	/^: bme-power$/;"	d
bme-power	jz3/./ex/sensor.fs	/^: bme-power$/;"	d
bme-power	jz3/ex/sensor.fs	/^: bme-power$/;"	d
bme-rd	embello/bme/dev.fs	/^: bme-rd ( reg -- )$/;"	d
bme-rd	embello/flib/i2c/bme280.fs	/^: bme-rd ( addr n reg -- addr+n )$/;"	d
bme-rd	flib/./i2c/bme280.fs	/^: bme-rd ( addr n reg -- addr+n )$/;"	d
bme-rd	flib/i2c/bme280.fs	/^: bme-rd ( addr n reg -- addr+n )$/;"	d
bme-reset	embello/flib/i2c/bme280.fs	/^: bme-reset ( -- ) \\ software reset of the bme280$/;"	d
bme-reset	flib/./i2c/bme280.fs	/^: bme-reset ( -- ) \\ software reset of the bme280$/;"	d
bme-reset	flib/i2c/bme280.fs	/^: bme-reset ( -- ) \\ software reset of the bme280$/;"	d
bme-s16	embello/bme/dev.fs	/^: bme-s16 ( off -- val ) bme-u16 16 lshift 16 arshift ;$/;"	d
bme-s16	embello/flib/i2c/bme280.fs	/^: bme-s16 ( off -- val ) bme-u16 16 lshift 16 arshift ;$/;"	d
bme-s16	flib/./i2c/bme280.fs	/^: bme-s16 ( off -- val ) bme-u16 16 lshift 16 arshift ;$/;"	d
bme-s16	flib/i2c/bme280.fs	/^: bme-s16 ( off -- val ) bme-u16 16 lshift 16 arshift ;$/;"	d
bme-sleep	embello/flib/i2c/bme280.fs	/^: bme-sleep ( -- ) \\ force bme280 to sleep$/;"	d
bme-sleep	flib/./i2c/bme280.fs	/^: bme-sleep ( -- ) \\ force bme280 to sleep$/;"	d
bme-sleep	flib/i2c/bme280.fs	/^: bme-sleep ( -- ) \\ force bme280 to sleep$/;"	d
bme-u16	embello/bme/dev.fs	/^: bme-u16 ( off -- val ) dup bme-u8 swap 1+ bme-u8 8 lshift or ;$/;"	d
bme-u16	embello/flib/i2c/bme280.fs	/^: bme-u16 ( off -- val ) dup bme-u8 swap 1+ bme-u8 8 lshift or ;$/;"	d
bme-u16	flib/./i2c/bme280.fs	/^: bme-u16 ( off -- val ) dup bme-u8 swap 1+ bme-u8 8 lshift or ;$/;"	d
bme-u16	flib/i2c/bme280.fs	/^: bme-u16 ( off -- val ) dup bme-u8 swap 1+ bme-u8 8 lshift or ;$/;"	d
bme-u20be	embello/bme/dev.fs	/^: bme-u20be ( off -- val )$/;"	d
bme-u20be	embello/flib/i2c/bme280.fs	/^: bme-u20be ( off -- val )$/;"	d
bme-u20be	flib/./i2c/bme280.fs	/^: bme-u20be ( off -- val )$/;"	d
bme-u20be	flib/i2c/bme280.fs	/^: bme-u20be ( off -- val )$/;"	d
bme-u8	embello/bme/dev.fs	/^: bme-u8 ( off -- val ) params + c@ ;$/;"	d
bme-u8	embello/flib/i2c/bme280.fs	/^: bme-u8 ( off -- val ) params + c@ ;$/;"	d
bme-u8	flib/./i2c/bme280.fs	/^: bme-u8 ( off -- val ) params + c@ ;$/;"	d
bme-u8	flib/i2c/bme280.fs	/^: bme-u8 ( off -- val ) params + c@ ;$/;"	d
bno#data	embello/flib/i2c/bno055.fs	/^14 constant bno#data \\ data bytes in bno.data$/;"	d
bno#data	flib/./i2c/bno055.fs	/^14 constant bno#data \\ data bytes in bno.data$/;"	d
bno#data	flib/i2c/bno055.fs	/^14 constant bno#data \\ data bytes in bno.data$/;"	d
bno-calib!	embello/flib/i2c/bno055.fs	/^: bno-calib! ( -- ) \\ write calibration data from bno.data$/;"	d
bno-calib!	flib/./i2c/bno055.fs	/^: bno-calib! ( -- ) \\ write calibration data from bno.data$/;"	d
bno-calib!	flib/i2c/bno055.fs	/^: bno-calib! ( -- ) \\ write calibration data from bno.data$/;"	d
bno-calib<ee	embello/flib/i2c/bno055.fs	/^: bno-calib<ee ( off -- f ) \\ restore calibration data from eeprom, returns whether successful$/;"	d
bno-calib<ee	flib/./i2c/bno055.fs	/^: bno-calib<ee ( off -- f ) \\ restore calibration data from eeprom, returns whether successful$/;"	d
bno-calib<ee	flib/i2c/bno055.fs	/^: bno-calib<ee ( off -- f ) \\ restore calibration data from eeprom, returns whether successful$/;"	d
bno-calib>ee	embello/flib/i2c/bno055.fs	/^: bno-calib>ee ( off -- ) \\ save calibration data to eeprom in 24 bytes at offset$/;"	d
bno-calib>ee	flib/./i2c/bno055.fs	/^: bno-calib>ee ( off -- ) \\ save calibration data to eeprom in 24 bytes at offset$/;"	d
bno-calib>ee	flib/i2c/bno055.fs	/^: bno-calib>ee ( off -- ) \\ save calibration data to eeprom in 24 bytes at offset$/;"	d
bno-calib?	embello/flib/i2c/bno055.fs	/^: bno-calib? ( -- f ) $35 reg@ ; \\ return calibration flag$/;"	d
bno-calib?	flib/./i2c/bno055.fs	/^: bno-calib? ( -- f ) $35 reg@ ; \\ return calibration flag$/;"	d
bno-calib?	flib/i2c/bno055.fs	/^: bno-calib? ( -- f ) $35 reg@ ; \\ return calibration flag$/;"	d
bno-calib@	embello/flib/i2c/bno055.fs	/^: bno-calib@ ( -- count ) \\ fetch calibration data into bno.data, returns number of bytes$/;"	d
bno-calib@	flib/./i2c/bno055.fs	/^: bno-calib@ ( -- count ) \\ fetch calibration data into bno.data, returns number of bytes$/;"	d
bno-calib@	flib/i2c/bno055.fs	/^: bno-calib@ ( -- count ) \\ fetch calibration data into bno.data, returns number of bytes$/;"	d
bno-data	embello/flib/i2c/bno055.fs	/^: bno-data ( -- ) \\ write data to bno.data$/;"	d
bno-data	flib/./i2c/bno055.fs	/^: bno-data ( -- ) \\ write data to bno.data$/;"	d
bno-data	flib/i2c/bno055.fs	/^: bno-data ( -- ) \\ write data to bno.data$/;"	d
bno-init	embello/flib/i2c/bno055.fs	/^: bno-init ( -- nak ) \\ reset and initialize the chip, takes ~600ms!$/;"	d
bno-init	flib/./i2c/bno055.fs	/^: bno-init ( -- nak ) \\ reset and initialize the chip, takes ~600ms!$/;"	d
bno-init	flib/i2c/bno055.fs	/^: bno-init ( -- nak ) \\ reset and initialize the chip, takes ~600ms!$/;"	d
bno-reset	embello/flib/i2c/bno055.fs	/^: bno-reset ( -- nak ) \\ reset the chip and wait 'til it inits, hangs if it doesn't init$/;"	d
bno-reset	flib/./i2c/bno055.fs	/^: bno-reset ( -- nak ) \\ reset the chip and wait 'til it inits, hangs if it doesn't init$/;"	d
bno-reset	flib/i2c/bno055.fs	/^: bno-reset ( -- nak ) \\ reset the chip and wait 'til it inits, hangs if it doesn't init$/;"	d
bno-test	embello/flib/i2c/bno055.fs	/^: bno-test \\ print quaternion, accel, and system registers every second, save calibration when ready$/;"	d
bno-test	flib/./i2c/bno055.fs	/^: bno-test \\ print quaternion, accel, and system registers every second, save calibration when ready$/;"	d
bno-test	flib/i2c/bno055.fs	/^: bno-test \\ print quaternion, accel, and system registers every second, save calibration when ready$/;"	d
bno.	embello/flib/i2c/bno055.fs	/^: bno. ( -- ) \\ fetch and print current data$/;"	d
bno.	flib/./i2c/bno055.fs	/^: bno. ( -- ) \\ fetch and print current data$/;"	d
bno.	flib/i2c/bno055.fs	/^: bno. ( -- ) \\ fetch and print current data$/;"	d
bno.info	embello/flib/i2c/bno055.fs	/^: bno.info ( -- ) \\ print some info about the chip versions$/;"	d
bno.info	flib/./i2c/bno055.fs	/^: bno.info ( -- ) \\ print some info about the chip versions$/;"	d
bno.info	flib/i2c/bno055.fs	/^: bno.info ( -- ) \\ print some info about the chip versions$/;"	d
boot-init	embello/qld/dev.fs	/^: boot-init$/;"	d
boot-mode	embello/qld/dev.fs	/^: boot-mode$/;"	d
btn-check-one	embello/prc2/dev.fs	/^: btn-check-one ( pin bit -- f )  \\ true if the button was just pressed$/;"	d
btn.state	embello/prc2/dev.fs	/^0 variable btn.state  \\ one bit for each button, remembering its last state$/;"	d
btn.timer	embello/prc2/dev.fs	/^0 variable btn.timer  \\ passed to periodic-ms$/;"	d
buf-addr	embello/flib/any/aes128.fs	/^0 variable buf-addr$/;"	d
buf-addr	flib/./any/aes128.fs	/^0 variable buf-addr$/;"	d
buf-addr	flib/any/aes128.fs	/^0 variable buf-addr$/;"	d
buf-emit	embello/suf/ex/old.fs	/^: buf-emit outpos @ dup 5000 < if outbuf + c!  1 outpos +!  else drop then ;$/;"	d
buf-emit?	embello/suf/ex/old.fs	/^: buf-emit? true ;$/;"	d
buf-seg	embello/flib/any/aes128.fs	/^0 variable buf-seg$/;"	d
buf-seg	flib/./any/aes128.fs	/^0 variable buf-seg$/;"	d
buf-seg	flib/any/aes128.fs	/^0 variable buf-seg$/;"	d
buf<<1	embello/flib/any/aes128.fs	/^: buf<<1 ( c-addr len )$/;"	d
buf<<1	flib/./any/aes128.fs	/^: buf<<1 ( c-addr len )$/;"	d
buf<<1	flib/any/aes128.fs	/^: buf<<1 ( c-addr len )$/;"	d
buffer-cpy	embello/flib/any/buffers.fs	/^: buffer-cpy ( c-addr1 c-addr2 len -- c-addr1 len ) \\ c-addr1 is dest c-addr2 is src$/;"	d
buffer-cpy	embello/flib/uart/gps-test.fs	/^: buffer-cpy ( dest-addr src-addr cnt -- dest-addr cnt )$/;"	d
buffer-cpy	flib/./any/buffers.fs	/^: buffer-cpy ( c-addr1 c-addr2 len -- c-addr1 len ) \\ c-addr1 is dest c-addr2 is src$/;"	d
buffer-cpy	flib/./uart/gps-test.fs	/^: buffer-cpy ( dest-addr src-addr cnt -- dest-addr cnt )$/;"	d
buffer-cpy	flib/any/buffers.fs	/^: buffer-cpy ( c-addr1 c-addr2 len -- c-addr1 len ) \\ c-addr1 is dest c-addr2 is src$/;"	d
buffer-cpy	flib/uart/gps-test.fs	/^: buffer-cpy ( dest-addr src-addr cnt -- dest-addr cnt )$/;"	d
buffer-cpy	follower/hc05-test.fs	/^: buffer-cpy ( dest-addr src-addr cnt -- dest-addr cnt )$/;"	d
buffer-cpy	tracker/tracker-test.fs	/^: buffer-cpy ( dest-addr src-addr cnt -- dest-addr cnt )$/;"	d
buffer.	embello/flib/any/buffers.fs	/^: buffer. ( c-addr len -- ) \\ print buffer like @<adr> <len> [ <c1> <c2> ... <cLen> ]$/;"	d
buffer.	flib/./any/buffers.fs	/^: buffer. ( c-addr len -- ) \\ print buffer like @<adr> <len> [ <c1> <c2> ... <cLen> ]$/;"	d
buffer.	flib/any/buffers.fs	/^: buffer. ( c-addr len -- ) \\ print buffer like @<adr> <len> [ <c1> <c2> ... <cLen> ]$/;"	d
button-check	embello/prc2/dev.fs	/^: button-check$/;"	d
c	embello/ezr/pokemon.fs	/^: c  $00 $10 >zdi ;$/;"	d
c	embello/suf/ex/long.fs	/^: c ." abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij" ;$/;"	d
c++@	embello/flib/any/ring.fs	/^: c++@ ( addr -- b addr+1 ) dup c@ swap 1+ ;  \\ fetch and autoinc byte ptr$/;"	d
c++@	flib/./any/ring.fs	/^: c++@ ( addr -- b addr+1 ) dup c@ swap 1+ ;  \\ fetch and autoinc byte ptr$/;"	d
c++@	flib/any/ring.fs	/^: c++@ ( addr -- b addr+1 ) dup c@ swap 1+ ;  \\ fetch and autoinc byte ptr$/;"	d
c,	embello/flib/stm32f1/hal.fs	/^: c, ( c -- )  \\ emulate c, with h,$/;"	d
c,	embello/flib/stm32l0/hal.fs	/^: c, ( c -- )  \\ emulate c, with h,$/;"	d
c,	embello/suf/hal-stm32f1.fs	/^: c, ( c -- )  \\ emulate c, with h,$/;"	d
c,	flib/./stm32f1/hal.fs	/^: c, ( c -- )  \\ emulate c, with h,$/;"	d
c,	flib/./stm32l0/hal.fs	/^: c, ( c -- )  \\ emulate c, with h,$/;"	d
c,	flib/stm32f1/hal.fs	/^: c, ( c -- )  \\ emulate c, with h,$/;"	d
c,	flib/stm32l0/hal.fs	/^: c, ( c -- )  \\ emulate c, with h,$/;"	d
c,collection	embello/flib/stm32f1/hal.fs	/^0 variable c,collection$/;"	d
c,collection	embello/flib/stm32l0/hal.fs	/^0 variable c,collection$/;"	d
c,collection	embello/suf/hal-stm32f1.fs	/^0 variable c,collection$/;"	d
c,collection	flib/./stm32f1/hal.fs	/^0 variable c,collection$/;"	d
c,collection	flib/./stm32l0/hal.fs	/^0 variable c,collection$/;"	d
c,collection	flib/stm32f1/hal.fs	/^0 variable c,collection$/;"	d
c,collection	flib/stm32l0/hal.fs	/^0 variable c,collection$/;"	d
c>f	central/main.fs	/^: c>f ( n -- n ) \\ convert celsius to farenheit$/;"	d
c>f	oledtemp/rftemp.fs	/^: c>f ( n -- n ) \\ convert celsius to farenheit$/;"	d
c>f	temp/rftemp.fs	/^: c>f ( n -- n ) \\ convert celsius to farenheit$/;"	d
c>f	tlib/numprint.fs	/^: c>f ( n -- n ) \\ convert celsius to farenheit$/;"	d
c>pkt	embello/flib/uart/gps.fs	/^: c>pkt ( c-addr -- c-addr ) \\ send char$/;"	d
c>pkt	flib/./uart/gps.fs	/^: c>pkt ( c-addr -- c-addr ) \\ send char$/;"	d
c>pkt	flib/uart/gps.fs	/^: c>pkt ( c-addr -- c-addr ) \\ send char$/;"	d
cC>F	central/main.fs	/^: cC>F ( n -- c-addr len ) \\ convert hundredths of degrees celsius to farenheit$/;"	d
cC>F	oledtemp/rftemp.fs	/^: cC>F ( n -- f ) \\ convert hundredths of degrees celsius to farenheit$/;"	d
cC>F	temp/rftemp.fs	/^: cC>F ( n -- f ) \\ convert hundredths of degrees celsius to farenheit fixed-point$/;"	d
cC>F	tlib/numprint.fs	/^: cC>F ( n -- f ) \\ convert hundredths of degrees celsius to farenheit fixed-point (64 bits)$/;"	d
calc-d	embello/flib/any/pid.fs	/^: calc-d ( s_is -- f_correction )  \\ Calculate differential error$/;"	d
calc-d	flib/./any/pid.fs	/^: calc-d ( s_is -- f_correction )  \\ Calculate differential error$/;"	d
calc-d	flib/any/pid.fs	/^: calc-d ( s_is -- f_correction )  \\ Calculate differential error$/;"	d
calc-i	embello/flib/any/pid.fs	/^: calc-i ( f_error -- f_correction )  \\ Calculate integral error$/;"	d
calc-i	flib/./any/pid.fs	/^: calc-i ( f_error -- f_correction )  \\ Calculate integral error$/;"	d
calc-i	flib/any/pid.fs	/^: calc-i ( f_error -- f_correction )  \\ Calculate integral error$/;"	d
calc-p	embello/flib/any/pid.fs	/^: calc-p ( f_error -- f_correction )  \\ Calculate proportial error$/;"	d
calc-p	flib/./any/pid.fs	/^: calc-p ( f_error -- f_correction )  \\ Calculate proportial error$/;"	d
calc-p	flib/any/pid.fs	/^: calc-p ( f_error -- f_correction )  \\ Calculate proportial error$/;"	d
calib!	tracker/tracker.fs	/^: calib! ( -- ) \\ check whether calibrated and save calib data$/;"	d
calib-hook	tracker/tracker.fs	/^0 variable calib-hook \\ points to calib! until calibrated$/;"	d
calign	embello/flib/stm32f1/hal.fs	/^: calign ( -- )  \\ must be called to flush after odd number of c, calls$/;"	d
calign	embello/flib/stm32l0/hal.fs	/^: calign ( -- )  \\ must be called to flush after odd number of c, calls$/;"	d
calign	embello/suf/hal-stm32f1.fs	/^: calign ( -- )  \\ must be called to flush after odd number of c, calls$/;"	d
calign	flib/./stm32f1/hal.fs	/^: calign ( -- )  \\ must be called to flush after odd number of c, calls$/;"	d
calign	flib/./stm32l0/hal.fs	/^: calign ( -- )  \\ must be called to flush after odd number of c, calls$/;"	d
calign	flib/stm32f1/hal.fs	/^: calign ( -- )  \\ must be called to flush after odd number of c, calls$/;"	d
calign	flib/stm32l0/hal.fs	/^: calign ( -- )  \\ must be called to flush after odd number of c, calls$/;"	d
call-after	embello/flib/any/timed.fs	/^: call-after ( callback when     slot# -- ) false swap call-internal ; $/;"	d
call-after	flib/./any/timed.fs	/^: call-after ( callback when     slot# -- ) false swap call-internal ; $/;"	d
call-after	flib/any/timed.fs	/^: call-after ( callback when     slot# -- ) false swap call-internal ; $/;"	d
call-every	embello/flib/any/timed.fs	/^: call-every ( callback interval slot# -- ) true  swap call-internal ; $/;"	d
call-every	flib/./any/timed.fs	/^: call-every ( callback interval slot# -- ) true  swap call-internal ; $/;"	d
call-every	flib/any/timed.fs	/^: call-every ( callback interval slot# -- ) true  swap call-internal ; $/;"	d
call-internal	embello/flib/any/timed.fs	/^: call-internal ( callback when\/interval repeat slot# -- )$/;"	d
call-internal	flib/./any/timed.fs	/^: call-internal ( callback when\/interval repeat slot# -- )$/;"	d
call-internal	flib/any/timed.fs	/^: call-internal ( callback when\/interval repeat slot# -- )$/;"	d
call-never	embello/flib/any/timed.fs	/^: call-never ( slot# -- ) tmd-call-addr 0 swap !  ;$/;"	d
call-never	flib/./any/timed.fs	/^: call-never ( slot# -- ) tmd-call-addr 0 swap !  ;$/;"	d
call-never	flib/any/timed.fs	/^: call-never ( slot# -- ) tmd-call-addr 0 swap !  ;$/;"	d
carry	embello/flib/any/aes128.fs	/^0 variable carry$/;"	d
carry	flib/./any/aes128.fs	/^0 variable carry$/;"	d
carry	flib/any/aes128.fs	/^0 variable carry$/;"	d
catch	embello/flib/mecrisp/multi.fs	/^: catch ( x1 .. xn xt -- y1 .. yn throwcode \/ z1 .. zm 0 )$/;"	d
catch	flib/./mecrisp/multi.fs	/^: catch ( x1 .. xn xt -- y1 .. yn throwcode \/ z1 .. zm 0 )$/;"	d
catch	flib/mecrisp/multi.fs	/^: catch ( x1 .. xn xt -- y1 .. yn throwcode \/ z1 .. zm 0 )$/;"	d
chain.	embello/flib/spi/sdcard.fs	/^: chain. ( u -- )  \\ display the chain of clusters$/;"	d
chain.	flib/./spi/sdcard.fs	/^: chain. ( u -- )  \\ display the chain of clusters$/;"	d
chain.	flib/spi/sdcard.fs	/^: chain. ( u -- )  \\ display the chain of clusters$/;"	d
check-ack	embello/qld/dev.fs	/^: check-ack ( -- )$/;"	d
check-err	follower/hc05.fs	/^: check-err ( -- f ) \\ check for OK response, if not leave in resp\/resp-len$/;"	d
check-recv	fanctrl/fanctrl.fs	/^: check-recv$/;"	d
check-tail	embello/flib/uart/gps.fs	/^: check-tail ( sum i -- i )$/;"	d
check-tail	flib/./uart/gps.fs	/^: check-tail ( sum i -- i )$/;"	d
check-tail	flib/uart/gps.fs	/^: check-tail ( sum i -- i )$/;"	d
chipid	embello/flib/stm32f1/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	embello/flib/stm32f4/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	embello/flib/stm32f7/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	embello/flib/stm32l0/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	embello/suf/hal-stm32f1.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	flib/./stm32f1/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	flib/./stm32f4/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	flib/./stm32f7/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	flib/./stm32l0/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	flib/stm32f1/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	flib/stm32f4/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	flib/stm32f7/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
chipid	flib/stm32l0/hal.fs	/^: chipid ( -- u1 u2 u3 3 )  \\ unique chip ID as N values on the stack$/;"	d
circle	embello/flib/mecrisp/graphics.fs	/^: circle ( xm ym r -- ) dup ellipse ;$/;"	d
circle	flib/./mecrisp/graphics.fs	/^: circle ( xm ym r -- ) dup ellipse ;$/;"	d
circle	flib/mecrisp/graphics.fs	/^: circle ( xm ym r -- ) dup ellipse ;$/;"	d
clear	embello/flib/fsmc/tft-r61505u.fs	/^: clear ( -- )$/;"	d
clear	embello/flib/i2c/ssd1306.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear	embello/flib/spi/lcd-pcd8544.fs	/^: clear ( -- ) LCD_ROW_HEIGHT 0 do i clear-row loop ;$/;"	d
clear	embello/flib/spi/tft-ili9163.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear	embello/flib/spi/tft-ili9325.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear	flib/./fsmc/tft-r61505u.fs	/^: clear ( -- )$/;"	d
clear	flib/./i2c/ssd1306.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear	flib/./spi/lcd-pcd8544.fs	/^: clear ( -- ) LCD_ROW_HEIGHT 0 do i clear-row loop ;$/;"	d
clear	flib/./spi/tft-ili9163.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear	flib/./spi/tft-ili9325.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear	flib/fsmc/tft-r61505u.fs	/^: clear ( -- )$/;"	d
clear	flib/i2c/ssd1306.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear	flib/spi/lcd-pcd8544.fs	/^: clear ( -- ) LCD_ROW_HEIGHT 0 do i clear-row loop ;$/;"	d
clear	flib/spi/tft-ili9163.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear	flib/spi/tft-ili9325.fs	/^: clear ( -- )  \\ clear display memory$/;"	d
clear-byte	embello/flib/spi/lcd-pcd8544.fs	/^: clear-byte ( x y -- ) 0 -rot put-byte ;$/;"	d
clear-byte	flib/./spi/lcd-pcd8544.fs	/^: clear-byte ( x y -- ) 0 -rot put-byte ;$/;"	d
clear-byte	flib/spi/lcd-pcd8544.fs	/^: clear-byte ( x y -- ) 0 -rot put-byte ;$/;"	d
clear-row	embello/flib/spi/lcd-pcd8544.fs	/^: clear-row ( y -- ) LCD_WIDTH 0 do dup i swap clear-byte loop ;$/;"	d
clear-row	flib/./spi/lcd-pcd8544.fs	/^: clear-row ( y -- ) LCD_WIDTH 0 do dup i swap clear-byte loop ;$/;"	d
clear-row	flib/spi/lcd-pcd8544.fs	/^: clear-row ( y -- ) LCD_WIDTH 0 do dup i swap clear-byte loop ;$/;"	d
clear-timed	embello/flib/any/timed.fs	/^: clear-timed ( -- ) timed-data MAX-TIMED 4 * cells 0 fill ;$/;"	d
clear-timed	flib/./any/timed.fs	/^: clear-timed ( -- ) timed-data MAX-TIMED 4 * cells 0 fill ;$/;"	d
clear-timed	flib/any/timed.fs	/^: clear-timed ( -- ) timed-data MAX-TIMED 4 * cells 0 fill ;$/;"	d
clear5x	embello/cag/ex/io.fs	/^: clear5x PIN ioc! PIN ioc! PIN ioc! PIN ioc! PIN ioc! ;$/;"	d
clear5x	embello/g6s/ex/io.fs	/^: clear5x PIN ioc! PIN ioc! PIN ioc! PIN ioc! PIN ioc! ;$/;"	d
clears	embello/cag/ex/io.fs	/^: clears NUM\/5 0 do clear5x   loop ;$/;"	d
clears	embello/g6s/ex/io.fs	/^: clears NUM\/5 0 do clear5x   loop ;$/;"	d
clk-source-hse	embello/kb7/clock.fs	/^: clk-source-hse ( -- ) 1 3 RCC_CFGR bits! ;$/;"	d
clk-source-hsi	embello/kb7/clock.fs	/^: clk-source-hsi ( -- ) RCC_CFGR dup @ $3 bic swap ! ;$/;"	d
clk-source-pll	embello/kb7/clock.fs	/^: clk-source-pll ( -- ) 2 3 RCC_CFGR bits! ;$/;"	d
clock-hz	central/x-clock.fs	/^72000000 variable clock-hz  \\ the system clock is 72 MHz for USB$/;"	d
clock-hz	embello/flib/stm32f1/clock.fs	/^72000000 variable clock-hz  \\ the system clock is 72 MHz for USB$/;"	d
clock-hz	embello/flib/stm32f1/hal.fs	/^8000000 variable clock-hz  \\ the system clock is 8 MHz after reset$/;"	d
clock-hz	embello/flib/stm32f4/hal.fs	/^25000000 variable clock-hz  \\ 25 MHz crystal, HSI is 16 MHz$/;"	d
clock-hz	embello/flib/stm32f7/hal.fs	/^16000000 variable clock-hz  \\ HSI is 16 MHz, 8 MHz crystal$/;"	d
clock-hz	embello/flib/stm32l0/hal.fs	/^16000000  variable clock-hz  \\ the system clock is 16 MHz after reset$/;"	d
clock-hz	flib/./stm32f1/clock.fs	/^72000000 variable clock-hz  \\ the system clock is 72 MHz for USB$/;"	d
clock-hz	flib/./stm32f1/hal.fs	/^8000000 variable clock-hz  \\ the system clock is 8 MHz after reset$/;"	d
clock-hz	flib/./stm32f4/hal.fs	/^25000000 variable clock-hz  \\ 25 MHz crystal, HSI is 16 MHz$/;"	d
clock-hz	flib/./stm32f7/hal.fs	/^16000000 variable clock-hz  \\ HSI is 16 MHz, 8 MHz crystal$/;"	d
clock-hz	flib/./stm32l0/hal.fs	/^16000000  variable clock-hz  \\ the system clock is 16 MHz after reset$/;"	d
clock-hz	flib/stm32f1/clock.fs	/^72000000 variable clock-hz  \\ the system clock is 72 MHz for USB$/;"	d
clock-hz	flib/stm32f1/hal.fs	/^8000000 variable clock-hz  \\ the system clock is 8 MHz after reset$/;"	d
clock-hz	flib/stm32f4/hal.fs	/^25000000 variable clock-hz  \\ 25 MHz crystal, HSI is 16 MHz$/;"	d
clock-hz	flib/stm32f7/hal.fs	/^16000000 variable clock-hz  \\ HSI is 16 MHz, 8 MHz crystal$/;"	d
clock-hz	flib/stm32l0/hal.fs	/^16000000  variable clock-hz  \\ the system clock is 16 MHz after reset$/;"	d
closest-found	embello/flib/mecrisp/calltrace.fs	/^0 variable closest-found$/;"	d
closest-found	flib/./mecrisp/calltrace.fs	/^0 variable closest-found$/;"	d
closest-found	flib/mecrisp/calltrace.fs	/^0 variable closest-found$/;"	d
cmac-calc	embello/flib/any/aes128.fs	/^: cmac-calc ( buf len -- )$/;"	d
cmac-calc	flib/./any/aes128.fs	/^: cmac-calc ( buf len -- )$/;"	d
cmac-calc	flib/any/aes128.fs	/^: cmac-calc ( buf len -- )$/;"	d
cmac-calc-kn	embello/flib/any/aes128.fs	/^: cmac-calc-kn ( c-addr-fkey -- c-addr-fkey )$/;"	d
cmac-calc-kn	flib/./any/aes128.fs	/^: cmac-calc-kn ( c-addr-fkey -- c-addr-fkey )$/;"	d
cmac-calc-kn	flib/any/aes128.fs	/^: cmac-calc-kn ( c-addr-fkey -- c-addr-fkey )$/;"	d
cmac-xor-k1k2	embello/flib/any/aes128.fs	/^: cmac-xor-k1k2$/;"	d
cmac-xor-k1k2	flib/./any/aes128.fs	/^: cmac-xor-k1k2$/;"	d
cmac-xor-k1k2	flib/any/aes128.fs	/^: cmac-xor-k1k2$/;"	d
cmd	embello/qld/dev.fs	/^: cmd ( b -- )  sof send  xsum @ send  check-ack ;$/;"	d
cnt0	embello/kb7/clock.fs	/^: cnt0 ( m -- b )        \\ count trailing zeros with hw support$/;"	d
com	embello/ezr/cpm2/Makefile	/^com = HEXSAVE.COM GETFLASH.COM PUTFLASH.COM XMODEM.COM MAPDRIVE.COM$/;"	m
coma	embello/jz3/ex/clock.fs	/^: coma slow only-msi wait             fast ;  \\  32 µA, UART dead$/;"	d
coma	jz3/./ex/clock.fs	/^: coma slow only-msi wait             fast ;  \\  32 µA, UART dead$/;"	d
coma	jz3/ex/clock.fs	/^: coma slow only-msi wait             fast ;  \\  32 µA, UART dead$/;"	d
condition.	embello/flib/mecrisp/disassembler-m3.fs	/^: condition. ( Condition -- )$/;"	d
condition.	flib/./mecrisp/disassembler-m3.fs	/^: condition. ( Condition -- )$/;"	d
condition.	flib/mecrisp/disassembler-m3.fs	/^: condition. ( Condition -- )$/;"	d
config	embello/bct/ex/adc.fs	/^: config ( uuuu n -- )$/;"	d
config-all	embello/bct/ex/adc.fs	/^: config-all ( rd bk yw -- )  \\ configure all test points at once$/;"	d
config-pin	embello/bct/ex/adc.fs	/^: config-pin ( mode pin -- mode pin )$/;"	d
const.	embello/flib/mecrisp/disassembler-m0.fs	/^: const. ."  #" u.ns ;$/;"	d
const.	embello/flib/mecrisp/disassembler-m3.fs	/^: const. ."  #" u.ns ;$/;"	d
const.	flib/./mecrisp/disassembler-m0.fs	/^: const. ."  #" u.ns ;$/;"	d
const.	flib/./mecrisp/disassembler-m3.fs	/^: const. ."  #" u.ns ;$/;"	d
const.	flib/mecrisp/disassembler-m0.fs	/^: const. ."  #" u.ns ;$/;"	d
const.	flib/mecrisp/disassembler-m3.fs	/^: const. ."  #" u.ns ;$/;"	d
cordic	embello/flib/mecrisp/sine.fs	/^: cordic ( f-angle -- f-error f-sine f-cosine )$/;"	d
cordic	flib/./mecrisp/sine.fs	/^: cordic ( f-angle -- f-error f-sine f-cosine )$/;"	d
cordic	flib/mecrisp/sine.fs	/^: cordic ( f-angle -- f-error f-sine f-cosine )$/;"	d
cornerstone	embello/flib/stm32f7/hal.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	embello/g6s/always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	embello/jz1/always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	embello/jz3/always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	embello/jz4/always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	embello/sic/always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	embello/suf/hal-stm32f1.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	flib/./stm32f7/hal.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	flib/stm32f7/hal.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	jz1/./always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	jz1/always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	jz3/./always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cornerstone	jz3/always.fs	/^: cornerstone ( "name" -- )  \\ define a flash memory cornerstone$/;"	d
cosine	embello/flib/mecrisp/sine.fs	/^: cosine ( f-angle -- f-cosine ) cordic 2nip  2nip   2-foldable ;$/;"	d
cosine	flib/./mecrisp/sine.fs	/^: cosine ( f-angle -- f-cosine ) cordic 2nip  2nip   2-foldable ;$/;"	d
cosine	flib/mecrisp/sine.fs	/^: cosine ( f-angle -- f-cosine ) cordic 2nip  2nip   2-foldable ;$/;"	d
count-pulses	embello/jz4/ex/exti.fs	/^: count-pulses ( -- )  \\ set up and start the external interrupts$/;"	d
count-pulses	embello/jz4/ex/rot7.fs	/^: count-pulses ( -- )  \\ set up and start the external interrupts$/;"	d
count-pulses	embello/jz4/ex/rot8.fs	/^: count-pulses ( -- )  \\ set up and start the external interrupts$/;"	d
count3	embello/jz4/ex/exti.fs	/^0 variable count3$/;"	d
count5	embello/jz4/ex/exti.fs	/^0 variable count5$/;"	d
counter	embello/jz4/ex/rot2.fs	/^1000 variable counter$/;"	d
counter	embello/jz4/ex/rot3.fs	/^1000 variable counter$/;"	d
counter	embello/jz4/ex/rot4.fs	/^1000 variable counter$/;"	d
counter	embello/jz4/ex/rot5.fs	/^1000 variable counter$/;"	d
counter	embello/jz4/ex/rot6.fs	/^1000 variable counter$/;"	d
counter	embello/jz4/ex/rot7.fs	/^1000 variable counter$/;"	d
counter	embello/jz4/ex/rot8.fs	/^1000 variable counter$/;"	d
cpy	embello/flib/uart/gps-test.fs	/^: cpy buffer-cpy null-terminate line ;$/;"	d
cpy	flib/./uart/gps-test.fs	/^: cpy buffer-cpy null-terminate line ;$/;"	d
cpy	flib/uart/gps-test.fs	/^: cpy buffer-cpy null-terminate line ;$/;"	d
cpy	tracker/tracker-test.fs	/^: cpy buffer-cpy null-terminate line ;$/;"	d
crc16	embello/flib/any/crc.fs	/^: crc16 ( b crc -- crc )  \\ update CRC16 with given byte$/;"	d
crc16	flib/./any/crc.fs	/^: crc16 ( b crc -- crc )  \\ update CRC16 with given byte$/;"	d
crc16	flib/any/crc.fs	/^: crc16 ( b crc -- crc )  \\ update CRC16 with given byte$/;"	d
crc16-buf	embello/flib/i2c/bno055.fs	/^: crc16-buf ( addr n -- crc ) \\ calculate crc over buffer$/;"	d
crc16-buf	flib/./i2c/bno055.fs	/^: crc16-buf ( addr n -- crc ) \\ calculate crc over buffer$/;"	d
crc16-buf	flib/i2c/bno055.fs	/^: crc16-buf ( addr n -- crc ) \\ calculate crc over buffer$/;"	d
crc16@	embello/flib/any/crc.fs	/^: crc16@ ( u -- u ) $F and shl crc16-table + h@ ;$/;"	d
crc16@	flib/./any/crc.fs	/^: crc16@ ( u -- u ) $F and shl crc16-table + h@ ;$/;"	d
crc16@	flib/any/crc.fs	/^: crc16@ ( u -- u ) $F and shl crc16-table + h@ ;$/;"	d
crc16buf	embello/flib/any/crc.fs	/^: crc16buf ( crc addr n -- crc ) \\ update CRC16 with buffer$/;"	d
crc16buf	flib/./any/crc.fs	/^: crc16buf ( crc addr n -- crc ) \\ update CRC16 with buffer$/;"	d
crc16buf	flib/any/crc.fs	/^: crc16buf ( crc addr n -- crc ) \\ update CRC16 with buffer$/;"	d
crc16h	embello/flib/any/crc.fs	/^: crc16h ( crc u -- crc ) crc16@ swap dup crc16@ swap 4 rshift xor xor ;$/;"	d
crc16h	flib/./any/crc.fs	/^: crc16h ( crc u -- crc ) crc16@ swap dup crc16@ swap 4 rshift xor xor ;$/;"	d
crc16h	flib/any/crc.fs	/^: crc16h ( crc u -- crc ) crc16@ swap dup crc16@ swap 4 rshift xor xor ;$/;"	d
ct	embello/flib/mecrisp/calltrace.fs	/^: ct ( -- )$/;"	d
ct	flib/./mecrisp/calltrace.fs	/^: ct ( -- )$/;"	d
ct	flib/mecrisp/calltrace.fs	/^: ct ( -- )$/;"	d
ct-irq	embello/flib/mecrisp/calltrace.fs	/^: ct-irq ( -- ) \\ Try your very best to help tracing unhandled interrupt causes...$/;"	d
ct-irq	flib/./mecrisp/calltrace.fs	/^: ct-irq ( -- ) \\ Try your very best to help tracing unhandled interrupt causes...$/;"	d
ct-irq	flib/mecrisp/calltrace.fs	/^: ct-irq ( -- ) \\ Try your very best to help tracing unhandled interrupt causes...$/;"	d
cycle	embello/cag/ex/dim.fs	/^: cycle      ( n -- )  dup on-cycle off-cycle ;$/;"	d
cycle	embello/g6s/ex/dim.fs	/^: cycle      ( n -- )  dup on-cycle off-cycle ;$/;"	d
d	embello/ezr/pokemon.fs	/^: d ( u -- )$/;"	d
d	embello/suf/ex/long.fs	/^: d ." abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij" ;$/;"	d
d16	embello/ezr/pokemon.fs	/^: d16 ( -- )$/;"	d
dac-init	embello/flib/stm32f1/dac.fs	/^: dac-init ( -- )  \\ initialise the two D\/A converters on PA4 and PA5$/;"	d
dac-init	flib/./stm32f1/dac.fs	/^: dac-init ( -- )  \\ initialise the two D\/A converters on PA4 and PA5$/;"	d
dac-init	flib/stm32f1/dac.fs	/^: dac-init ( -- )  \\ initialise the two D\/A converters on PA4 and PA5$/;"	d
dac-triangle	embello/flib/stm32f1/dac.fs	/^: dac-triangle ( -- )  \\ software-driven dual triangle waveform until keypress$/;"	d
dac-triangle	flib/./stm32f1/dac.fs	/^: dac-triangle ( -- )  \\ software-driven dual triangle waveform until keypress$/;"	d
dac-triangle	flib/stm32f1/dac.fs	/^: dac-triangle ( -- )  \\ software-driven dual triangle waveform until keypress$/;"	d
dac1-dma	embello/flib/stm32f1/dac.fs	/^: dac1-dma ( addr count -- )  \\ feed DAC1 from wave table at given address$/;"	d
dac1-dma	flib/./stm32f1/dac.fs	/^: dac1-dma ( addr count -- )  \\ feed DAC1 from wave table at given address$/;"	d
dac1-dma	flib/stm32f1/dac.fs	/^: dac1-dma ( addr count -- )  \\ feed DAC1 from wave table at given address$/;"	d
dac1-noise	embello/flib/stm32f1/dac.fs	/^: dac1-noise ( u -- )  \\ generate noise on DAC1 (PA4) with given period$/;"	d
dac1-noise	flib/./stm32f1/dac.fs	/^: dac1-noise ( u -- )  \\ generate noise on DAC1 (PA4) with given period$/;"	d
dac1-noise	flib/stm32f1/dac.fs	/^: dac1-noise ( u -- )  \\ generate noise on DAC1 (PA4) with given period$/;"	d
dac1-triangle	embello/flib/stm32f1/dac.fs	/^: dac1-triangle ( u -- )  \\ generate triangle on DAC1 (PA4) with given period$/;"	d
dac1-triangle	flib/./stm32f1/dac.fs	/^: dac1-triangle ( u -- )  \\ generate triangle on DAC1 (PA4) with given period$/;"	d
dac1-triangle	flib/stm32f1/dac.fs	/^: dac1-triangle ( u -- )  \\ generate triangle on DAC1 (PA4) with given period$/;"	d
data-init	tracker/speed.fs	/^: data-init 256 0 do i data i + c! loop ; data-init$/;"	d
debounce	embello/sic/e-pinchange.fs	/^0 variable debounce$/;"	d
debug	embello/jz1/ex/node.fs	/^0 constant debug  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
debug	embello/jz1/main.fs	/^0 constant debug  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
debug	embello/rvm/main.fs	/^0 constant debug  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
debug	jz1/./ex/node.fs	/^0 constant debug  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
debug	jz1/./main.fs	/^0 constant debug  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
debug	jz1/ex/node.fs	/^0 constant debug  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
debug	jz1/main.fs	/^0 constant debug  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
debug	oledtemp/rftemp.fs	/^0 constant debug  \\ 0 = send RF packets, 1 = display on serial port$/;"	d
delay	embello/ezr/ex/bridge.fs	/^: delay 10 0 do loop ;$/;"	d
delay	embello/ezr/pokemon.fs	/^: delay 10 0 do loop ;$/;"	d
demo	embello/flib/mecrisp/graphics.fs	/^: demo ( -- )$/;"	d
demo	flib/./mecrisp/graphics.fs	/^: demo ( -- )$/;"	d
demo	flib/mecrisp/graphics.fs	/^: demo ( -- )$/;"	d
destination-r0	embello/flib/mecrisp/disassembler-m0.fs	/^0 variable destination-r0$/;"	d
destination-r0	embello/flib/mecrisp/disassembler-m3.fs	/^0 variable destination-r0$/;"	d
destination-r0	flib/./mecrisp/disassembler-m0.fs	/^0 variable destination-r0$/;"	d
destination-r0	flib/./mecrisp/disassembler-m3.fs	/^0 variable destination-r0$/;"	d
destination-r0	flib/mecrisp/disassembler-m0.fs	/^0 variable destination-r0$/;"	d
destination-r0	flib/mecrisp/disassembler-m3.fs	/^0 variable destination-r0$/;"	d
digit?	embello/flib/uart/gps.fs	/^: digit? ( c -- c f ) dup 10 u< ;$/;"	d
digit?	flib/./uart/gps.fs	/^: digit? ( c -- c f ) dup 10 u< ;$/;"	d
digit?	flib/uart/gps.fs	/^: digit? ( c -- c f ) dup 10 u< ;$/;"	d
dim	embello/cag/ex/dim.fs	/^: dim        ( n -- )  led-init begin dup cycle key? until drop ;$/;"	d
dim	embello/g6s/ex/dim.fs	/^: dim        ( n -- )  led-init begin dup cycle key? until drop ;$/;"	d
dirent	embello/flib/spi/sdcard.fs	/^: dirent ( a -- a )  \\ display one directory entry$/;"	d
dirent	flib/./spi/sdcard.fs	/^: dirent ( a -- a )  \\ display one directory entry$/;"	d
dirent	flib/spi/sdcard.fs	/^: dirent ( a -- a )  \\ display one directory entry$/;"	d
disable-console	embello/jz4/dev.fs	/^: disable-console$/;"	d
disasm	embello/flib/mecrisp/disassembler-m0.fs	/^: disasm ( -- ) \\ Disassembles one machine instruction and advances disasm-\$$/;"	d
disasm	embello/flib/mecrisp/disassembler-m3.fs	/^: disasm ( -- ) \\ Disassembles one machine instruction and advances disasm-\$$/;"	d
disasm	flib/./mecrisp/disassembler-m0.fs	/^: disasm ( -- ) \\ Disassembles one machine instruction and advances disasm-\$$/;"	d
disasm	flib/./mecrisp/disassembler-m3.fs	/^: disasm ( -- ) \\ Disassembles one machine instruction and advances disasm-\$$/;"	d
disasm	flib/mecrisp/disassembler-m0.fs	/^: disasm ( -- ) \\ Disassembles one machine instruction and advances disasm-\$$/;"	d
disasm	flib/mecrisp/disassembler-m3.fs	/^: disasm ( -- ) \\ Disassembles one machine instruction and advances disasm-\$$/;"	d
disasm-$	embello/flib/mecrisp/disassembler-m0.fs	/^0 variable disasm-$   \\ Current position for disassembling$/;"	d
disasm-$	embello/flib/mecrisp/disassembler-m3.fs	/^0 variable disasm-$   \\ Current position for disassembling$/;"	d
disasm-$	flib/./mecrisp/disassembler-m0.fs	/^0 variable disasm-$   \\ Current position for disassembling$/;"	d
disasm-$	flib/./mecrisp/disassembler-m3.fs	/^0 variable disasm-$   \\ Current position for disassembling$/;"	d
disasm-$	flib/mecrisp/disassembler-m0.fs	/^0 variable disasm-$   \\ Current position for disassembling$/;"	d
disasm-$	flib/mecrisp/disassembler-m3.fs	/^0 variable disasm-$   \\ Current position for disassembling$/;"	d
disasm-fetch	embello/flib/mecrisp/disassembler-m0.fs	/^: disasm-fetch        \\ ( -- Data ) Fetches opcodes and operands, increments disasm-\$$/;"	d
disasm-fetch	embello/flib/mecrisp/disassembler-m3.fs	/^: disasm-fetch        \\ ( -- Data ) Fetches opcodes and operands, increments disasm-\$$/;"	d
disasm-fetch	flib/./mecrisp/disassembler-m0.fs	/^: disasm-fetch        \\ ( -- Data ) Fetches opcodes and operands, increments disasm-\$$/;"	d
disasm-fetch	flib/./mecrisp/disassembler-m3.fs	/^: disasm-fetch        \\ ( -- Data ) Fetches opcodes and operands, increments disasm-\$$/;"	d
disasm-fetch	flib/mecrisp/disassembler-m0.fs	/^: disasm-fetch        \\ ( -- Data ) Fetches opcodes and operands, increments disasm-\$$/;"	d
disasm-fetch	flib/mecrisp/disassembler-m3.fs	/^: disasm-fetch        \\ ( -- Data ) Fetches opcodes and operands, increments disasm-\$$/;"	d
disasm-step	embello/flib/mecrisp/disassembler-m0.fs	/^: disasm-step ( -- )$/;"	d
disasm-step	embello/flib/mecrisp/disassembler-m3.fs	/^: disasm-step ( -- )$/;"	d
disasm-step	flib/./mecrisp/disassembler-m0.fs	/^: disasm-step ( -- )$/;"	d
disasm-step	flib/./mecrisp/disassembler-m3.fs	/^: disasm-step ( -- )$/;"	d
disasm-step	flib/mecrisp/disassembler-m0.fs	/^: disasm-step ( -- )$/;"	d
disasm-step	flib/mecrisp/disassembler-m3.fs	/^: disasm-step ( -- )$/;"	d
disasm-string	embello/flib/mecrisp/disassembler-m0.fs	/^: disasm-string ( -- ) \\ Takes care of an inline string$/;"	d
disasm-string	embello/flib/mecrisp/disassembler-m3.fs	/^: disasm-string ( -- ) \\ Takes care of an inline string$/;"	d
disasm-string	flib/./mecrisp/disassembler-m0.fs	/^: disasm-string ( -- ) \\ Takes care of an inline string$/;"	d
disasm-string	flib/./mecrisp/disassembler-m3.fs	/^: disasm-string ( -- ) \\ Takes care of an inline string$/;"	d
disasm-string	flib/mecrisp/disassembler-m0.fs	/^: disasm-string ( -- ) \\ Takes care of an inline string$/;"	d
disasm-string	flib/mecrisp/disassembler-m3.fs	/^: disasm-string ( -- ) \\ Takes care of an inline string$/;"	d
disasm-thumb-2	embello/flib/mecrisp/disassembler-m3.fs	/^: disasm-thumb-2 ( Opcode16 -- Opcode16 )$/;"	d
disasm-thumb-2	flib/./mecrisp/disassembler-m3.fs	/^: disasm-thumb-2 ( Opcode16 -- Opcode16 )$/;"	d
disasm-thumb-2	flib/mecrisp/disassembler-m3.fs	/^: disasm-thumb-2 ( Opcode16 -- Opcode16 )$/;"	d
disk&	embello/ezr/vdisk.fs	/^: disk&  \\ this task will process all incoming SPI2 requests for sd card I\/O$/;"	d
disk-map	embello/ezr/vdisk.fs	/^: disk-map ( n -- )  \\ change specified drive to a new file mapping$/;"	d
disk-rd	embello/ezr/vdisk.fs	/^: disk-rd ( n -- )  \\ read sector from file on SD card (128 or 512 bytes)$/;"	d
disk-wr	embello/ezr/vdisk.fs	/^: disk-wr ( n -- )  \\ write 128-byte sector to file on SD card$/;"	d
dispatch-line	embello/flib/uart/gps.fs	/^: dispatch-line ( -- 0 | c-addr len ) \\ returns packet or 0 if none$/;"	d
dispatch-line	flib/./uart/gps.fs	/^: dispatch-line ( -- 0 | c-addr len ) \\ returns packet or 0 if none$/;"	d
dispatch-line	flib/uart/gps.fs	/^: dispatch-line ( -- 0 | c-addr len ) \\ returns packet or 0 if none$/;"	d
display	embello/flib/fsmc/tft-r61505u.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	embello/flib/i2c/ssd1306.fs	/^: display ( -- )  \\ update the oled from display memory$/;"	d
display	embello/flib/spi/lcd-pcd8544.fs	/^: display ( -- ) $/;"	d
display	embello/flib/spi/tft-ili9163.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	embello/flib/spi/tft-ili9325.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	embello/jz1/ex/node.fs	/^: display ( vprev vcc tint lux humi pres temp -- )$/;"	d
display	flib/./fsmc/tft-r61505u.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	flib/./i2c/ssd1306.fs	/^: display ( -- )  \\ update the oled from display memory$/;"	d
display	flib/./spi/lcd-pcd8544.fs	/^: display ( -- ) $/;"	d
display	flib/./spi/tft-ili9163.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	flib/./spi/tft-ili9325.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	flib/fsmc/tft-r61505u.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	flib/i2c/ssd1306.fs	/^: display ( -- )  \\ update the oled from display memory$/;"	d
display	flib/spi/lcd-pcd8544.fs	/^: display ( -- ) $/;"	d
display	flib/spi/tft-ili9163.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	flib/spi/tft-ili9325.fs	/^: display ( -- ) ;  \\ update tft from display memory (ignored)$/;"	d
display	jz1/./ex/node.fs	/^: display ( vprev vcc tint lux humi pres temp -- )$/;"	d
display	jz1/ex/node.fs	/^: display ( vprev vcc tint lux humi pres temp -- )$/;"	d
divisors	embello/flib/i2c/si570.fs	/^: divisors ( khz -- n1 hs )$/;"	d
divisors	flib/./i2c/si570.fs	/^: divisors ( khz -- n1 hs )$/;"	d
divisors	flib/i2c/si570.fs	/^: divisors ( khz -- n1 hs )$/;"	d
dma-setup	embello/ezr/vdisk.fs	/^: dma-setup  \\ set up the DMA controller channels for SPI2 RX and TX$/;"	d
dmax	embello/flib/any/pid.fs	/^: dmax ( d1 d2 -- d_max )  \\ Maximum of double number (also for fixed-point)$/;"	d
dmax	flib/./any/pid.fs	/^: dmax ( d1 d2 -- d_max )  \\ Maximum of double number (also for fixed-point)$/;"	d
dmax	flib/any/pid.fs	/^: dmax ( d1 d2 -- d_max )  \\ Maximum of double number (also for fixed-point)$/;"	d
dmf>pkt	embello/flib/uart/gps.fs	/^: dmf>pkt ( c-addr c -- c-addr ) \\ degrees minutes fractions: -11929.271 -> -11948.7850$/;"	d
dmf>pkt	flib/./uart/gps.fs	/^: dmf>pkt ( c-addr c -- c-addr ) \\ degrees minutes fractions: -11929.271 -> -11948.7850$/;"	d
dmf>pkt	flib/uart/gps.fs	/^: dmf>pkt ( c-addr c -- c-addr ) \\ degrees minutes fractions: -11929.271 -> -11948.7850$/;"	d
dmin	embello/flib/any/pid.fs	/^: dmin ( d1 d2 -- d_min )  \\ Minimum of double number (also for fixed-point)$/;"	d
dmin	flib/./any/pid.fs	/^: dmin ( d1 d2 -- d_min )  \\ Minimum of double number (also for fixed-point)$/;"	d
dmin	flib/any/pid.fs	/^: dmin ( d1 d2 -- d_min )  \\ Minimum of double number (also for fixed-point)$/;"	d
dmy	follower/follower.fs	/^: dmy ( n -- c-addr len ) \\ convert gps day\/month\/year to string with \/ sep$/;"	d
do-adc	embello/jz1/ex/clock.fs	/^: do-adc slow adc-init adc-vcc . adc-temp . adc-deinit  fast ;$/;"	d
do-adc	embello/jz3/ex/clock.fs	/^: do-adc slow adc-init adc-vcc . adc-temp . adc-deinit  fast ;$/;"	d
do-adc	jz1/./ex/clock.fs	/^: do-adc slow adc-init adc-vcc . adc-temp . adc-deinit  fast ;$/;"	d
do-adc	jz1/ex/clock.fs	/^: do-adc slow adc-init adc-vcc . adc-temp . adc-deinit  fast ;$/;"	d
do-adc	jz3/./ex/clock.fs	/^: do-adc slow adc-init adc-vcc . adc-temp . adc-deinit  fast ;$/;"	d
do-adc	jz3/ex/clock.fs	/^: do-adc slow adc-init adc-vcc . adc-temp . adc-deinit  fast ;$/;"	d
do-bme	embello/jz1/ex/clock.fs	/^: do-bme bme-init bme-calib slow bme-data fast bme-calc . . . ;$/;"	d
do-bme	embello/jz3/ex/clock.fs	/^: do-bme bme-init bme-calib slow bme-data fast bme-calc . . . ;$/;"	d
do-bme	jz1/./ex/clock.fs	/^: do-bme bme-init bme-calib slow bme-data fast bme-calc . . . ;$/;"	d
do-bme	jz1/ex/clock.fs	/^: do-bme bme-init bme-calib slow bme-data fast bme-calc . . . ;$/;"	d
do-bme	jz3/./ex/clock.fs	/^: do-bme bme-init bme-calib slow bme-data fast bme-calc . . . ;$/;"	d
do-bme	jz3/ex/clock.fs	/^: do-bme bme-init bme-calib slow bme-data fast bme-calc . . . ;$/;"	d
do-digit	embello/flib/uart/gps.fs	/^: do-digit ( n c-addr digit -- n c-addr ) rot 10 * + swap ;$/;"	d
do-digit	flib/./uart/gps.fs	/^: do-digit ( n c-addr digit -- n c-addr ) rot 10 * + swap ;$/;"	d
do-digit	flib/uart/gps.fs	/^: do-digit ( n c-addr digit -- n c-addr ) rot 10 * + swap ;$/;"	d
do-sign	embello/flib/uart/gps.fs	/^: do-sign ( fct n c-addr -- fct n c-addr ) rot -1 * -rot ;$/;"	d
do-sign	flib/./uart/gps.fs	/^: do-sign ( fct n c-addr -- fct n c-addr ) rot -1 * -rot ;$/;"	d
do-sign	flib/uart/gps.fs	/^: do-sign ( fct n c-addr -- fct n c-addr ) rot -1 * -rot ;$/;"	d
do-tsl	embello/jz1/ex/clock.fs	/^: do-tsl tsl-init slow tsl-data fast . ;$/;"	d
do-tsl	jz1/./ex/clock.fs	/^: do-tsl tsl-init slow tsl-data fast . ;$/;"	d
do-tsl	jz1/ex/clock.fs	/^: do-tsl tsl-init slow tsl-data fast . ;$/;"	d
done	embello/ezr/asm/hello.asm	/^done:	jr  done$/;"	l
done	embello/ezr/asm/hellow.asm	/^done:	jr  done$/;"	l
dot>comma	embello/flib/uart/gps.fs	/^: dot>comma ( c-addr len -- ) \\ replace . by , in string$/;"	d
dot>comma	flib/./uart/gps.fs	/^: dot>comma ( c-addr len -- ) \\ replace . by , in string$/;"	d
dot>comma	flib/uart/gps.fs	/^: dot>comma ( c-addr len -- ) \\ replace . by , in string$/;"	d
down	embello/jz1/ex/clock.fs	/^: down   slow          wait-for-key           fast ;  \\ 430 µA$/;"	d
down	embello/jz3/ex/clock.fs	/^: down slow          wait             fast ;  \\ 280 µA$/;"	d
down	jz1/./ex/clock.fs	/^: down   slow          wait-for-key           fast ;  \\ 430 µA$/;"	d
down	jz1/ex/clock.fs	/^: down   slow          wait-for-key           fast ;  \\ 430 µA$/;"	d
down	jz3/./ex/clock.fs	/^: down slow          wait             fast ;  \\ 280 µA$/;"	d
down	jz3/ex/clock.fs	/^: down slow          wait             fast ;  \\ 280 µA$/;"	d
doze	embello/jz1/ex/clock.fs	/^: doze   slow only-msi   50 ( *100 ) ms       fast ;  \\ 50 µA (or 210?)$/;"	d
doze	embello/jz3/ex/clock.fs	/^: doze slow only-msi   50 ( *100 ) ms fast ;  \\  40 µA$/;"	d
doze	jz1/./ex/clock.fs	/^: doze   slow only-msi   50 ( *100 ) ms       fast ;  \\ 50 µA (or 210?)$/;"	d
doze	jz1/ex/clock.fs	/^: doze   slow only-msi   50 ( *100 ) ms       fast ;  \\ 50 µA (or 210?)$/;"	d
doze	jz3/./ex/clock.fs	/^: doze slow only-msi   50 ( *100 ) ms fast ;  \\  40 µA$/;"	d
doze	jz3/ex/clock.fs	/^: doze slow only-msi   50 ( *100 ) ms fast ;  \\  40 µA$/;"	d
drange	embello/flib/any/pid.fs	/^: drange ( d_val d_min d_max -- d_val )  \\ Make sure a double number is in range$/;"	d
drange	flib/./any/pid.fs	/^: drange ( d_val d_min d_max -- d_val )  \\ Make sure a double number is in range$/;"	d
drange	flib/any/pid.fs	/^: drange ( d_val d_min d_max -- d_val )  \\ Make sure a double number is in range$/;"	d
drawbytepattern	embello/flib/mecrisp/graphics.fs	/^: drawbytepattern ( c -- )  \\ draws 8 bits vertically$/;"	d
drawbytepattern	flib/./mecrisp/graphics.fs	/^: drawbytepattern ( c -- )  \\ draws 8 bits vertically$/;"	d
drawbytepattern	flib/mecrisp/graphics.fs	/^: drawbytepattern ( c -- )  \\ draws 8 bits vertically$/;"	d
drawcharacterbitmap	embello/flib/mecrisp/graphics.fs	/^: drawcharacterbitmap ( c-addr -- )$/;"	d
drawcharacterbitmap	flib/./mecrisp/graphics.fs	/^: drawcharacterbitmap ( c-addr -- )$/;"	d
drawcharacterbitmap	flib/mecrisp/graphics.fs	/^: drawcharacterbitmap ( c-addr -- )$/;"	d
drawstring	embello/flib/mecrisp/graphics.fs	/^: drawstring ( addr u x y -- )$/;"	d
drawstring	flib/./mecrisp/graphics.fs	/^: drawstring ( addr u x y -- )$/;"	d
drawstring	flib/mecrisp/graphics.fs	/^: drawstring ( addr u x y -- )$/;"	d
dt	tracker/speed.fs	/^: dt micros swap - 66 - 50 + 100 \/ . ;$/;"	d
dump	embello/flib/mecrisp/hexdump.fs	/^: dump ( addr len -- )  \\ print a memory region$/;"	d
dump	flib/./mecrisp/hexdump.fs	/^: dump ( addr len -- )  \\ print a memory region$/;"	d
dump	flib/mecrisp/hexdump.fs	/^: dump ( addr len -- )  \\ print a memory region$/;"	d
dump16	embello/flib/mecrisp/hexdump.fs	/^: dump16 ( addr -- )  \\ print 16 bytes memory$/;"	d
dump16	flib/./mecrisp/hexdump.fs	/^: dump16 ( addr -- )  \\ print 16 bytes memory$/;"	d
dump16	flib/mecrisp/hexdump.fs	/^: dump16 ( addr -- )  \\ print 16 bytes memory$/;"	d
e	embello/ezr/pokemon.fs	/^: e ( 123 -- ) \\ unlock and erase flash$/;"	d
e	embello/suf/ex/long.fs	/^: e ." abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij" ;$/;"	d
echo	embello/ten/dev.fs	/^: echo$/;"	d
ee!	embello/flib/stm32l0/eeprom.fs	/^: ee! ( v off -- ) \\ write 32-bit word v to EEPROM offset off$/;"	d
ee!	flib/./stm32l0/eeprom.fs	/^: ee! ( v off -- ) \\ write 32-bit word v to EEPROM offset off$/;"	d
ee!	flib/stm32l0/eeprom.fs	/^: ee! ( v off -- ) \\ write 32-bit word v to EEPROM offset off$/;"	d
ee!buf	embello/flib/stm32l0/eeprom.fs	/^: ee!buf ( addr count off -- ) \\ write from buffer to EEPROM offset off, off&3==0$/;"	d
ee!buf	flib/./stm32l0/eeprom.fs	/^: ee!buf ( addr count off -- ) \\ write from buffer to EEPROM offset off, off&3==0$/;"	d
ee!buf	flib/stm32l0/eeprom.fs	/^: ee!buf ( addr count off -- ) \\ write from buffer to EEPROM offset off, off&3==0$/;"	d
ee!c	embello/flib/stm32l0/eeprom.fs	/^: ee!c ( v off -- ) \\ write byte v to EEPROM offset offc$/;"	d
ee!c	flib/./stm32l0/eeprom.fs	/^: ee!c ( v off -- ) \\ write byte v to EEPROM offset offc$/;"	d
ee!c	flib/stm32l0/eeprom.fs	/^: ee!c ( v off -- ) \\ write byte v to EEPROM offset offc$/;"	d
ee!h	embello/flib/stm32l0/eeprom.fs	/^: ee!h ( v off -- ) \\ write 16-bit half-word v to EEPROM offset off$/;"	d
ee!h	flib/./stm32l0/eeprom.fs	/^: ee!h ( v off -- ) \\ write 16-bit half-word v to EEPROM offset off$/;"	d
ee!h	flib/stm32l0/eeprom.fs	/^: ee!h ( v off -- ) \\ write 16-bit half-word v to EEPROM offset off$/;"	d
ee-lock	embello/flib/stm32l0/eeprom.fs	/^: ee-lock ( -- ) \\ lock flash\/eeprom writing$/;"	d
ee-lock	flib/./stm32l0/eeprom.fs	/^: ee-lock ( -- ) \\ lock flash\/eeprom writing$/;"	d
ee-lock	flib/stm32l0/eeprom.fs	/^: ee-lock ( -- ) \\ lock flash\/eeprom writing$/;"	d
ee-unlock	embello/flib/stm32l0/eeprom.fs	/^: ee-unlock ( -- ) \\ unlock the flash\/eeprom writing$/;"	d
ee-unlock	flib/./stm32l0/eeprom.fs	/^: ee-unlock ( -- ) \\ unlock the flash\/eeprom writing$/;"	d
ee-unlock	flib/stm32l0/eeprom.fs	/^: ee-unlock ( -- ) \\ unlock the flash\/eeprom writing$/;"	d
ee-wait	embello/flib/stm32l0/eeprom.fs	/^: ee-wait ( -- ) \\ wait 'til write completes$/;"	d
ee-wait	flib/./stm32l0/eeprom.fs	/^: ee-wait ( -- ) \\ wait 'til write completes$/;"	d
ee-wait	flib/stm32l0/eeprom.fs	/^: ee-wait ( -- ) \\ wait 'til write completes$/;"	d
ee@	embello/flib/stm32l0/eeprom.fs	/^: ee@ ( off -- v ) \\ read 32-bit word from EEPROM offset off$/;"	d
ee@	flib/./stm32l0/eeprom.fs	/^: ee@ ( off -- v ) \\ read 32-bit word from EEPROM offset off$/;"	d
ee@	flib/stm32l0/eeprom.fs	/^: ee@ ( off -- v ) \\ read 32-bit word from EEPROM offset off$/;"	d
ee@buf	embello/flib/stm32l0/eeprom.fs	/^: ee@buf ( addr count off -- ) \\ read into buffer from EEPROM offset off, off&3==0$/;"	d
ee@buf	flib/./stm32l0/eeprom.fs	/^: ee@buf ( addr count off -- ) \\ read into buffer from EEPROM offset off, off&3==0$/;"	d
ee@buf	flib/stm32l0/eeprom.fs	/^: ee@buf ( addr count off -- ) \\ read into buffer from EEPROM offset off, off&3==0$/;"	d
ee@c	embello/flib/stm32l0/eeprom.fs	/^: ee@c ( off -- v ) \\ read byte from EEPROM offset off$/;"	d
ee@c	flib/./stm32l0/eeprom.fs	/^: ee@c ( off -- v ) \\ read byte from EEPROM offset off$/;"	d
ee@c	flib/stm32l0/eeprom.fs	/^: ee@c ( off -- v ) \\ read byte from EEPROM offset off$/;"	d
ee@h	embello/flib/stm32l0/eeprom.fs	/^: ee@h ( off -- v ) \\ read 16-bit half-word from EEPROM offset off$/;"	d
ee@h	flib/./stm32l0/eeprom.fs	/^: ee@h ( off -- v ) \\ read 16-bit half-word from EEPROM offset off$/;"	d
ee@h	flib/stm32l0/eeprom.fs	/^: ee@h ( off -- v ) \\ read 16-bit half-word from EEPROM offset off$/;"	d
ellipse	embello/flib/mecrisp/graphics.fs	/^: ellipse ( xm ym a b -- )$/;"	d
ellipse	flib/./mecrisp/graphics.fs	/^: ellipse ( xm ym a b -- )$/;"	d
ellipse	flib/mecrisp/graphics.fs	/^: ellipse ( xm ym a b -- )$/;"	d
ellipse-a	embello/flib/mecrisp/graphics.fs	/^0 variable ellipse-a    0 variable ellipse-b$/;"	d
ellipse-a	flib/./mecrisp/graphics.fs	/^0 variable ellipse-a    0 variable ellipse-b$/;"	d
ellipse-a	flib/mecrisp/graphics.fs	/^0 variable ellipse-a    0 variable ellipse-b$/;"	d
ellipse-a^2	embello/flib/mecrisp/graphics.fs	/^0 variable ellipse-a^2  0 variable ellipse-b^2$/;"	d
ellipse-a^2	flib/./mecrisp/graphics.fs	/^0 variable ellipse-a^2  0 variable ellipse-b^2$/;"	d
ellipse-a^2	flib/mecrisp/graphics.fs	/^0 variable ellipse-a^2  0 variable ellipse-b^2$/;"	d
ellipse-dx	embello/flib/mecrisp/graphics.fs	/^0 variable ellipse-dx   0 variable ellipse-dy$/;"	d
ellipse-dx	flib/./mecrisp/graphics.fs	/^0 variable ellipse-dx   0 variable ellipse-dy$/;"	d
ellipse-dx	flib/mecrisp/graphics.fs	/^0 variable ellipse-dx   0 variable ellipse-dy$/;"	d
ellipse-err	embello/flib/mecrisp/graphics.fs	/^0 variable ellipse-err$/;"	d
ellipse-err	flib/./mecrisp/graphics.fs	/^0 variable ellipse-err$/;"	d
ellipse-err	flib/mecrisp/graphics.fs	/^0 variable ellipse-err$/;"	d
ellipse-putpixel	embello/flib/mecrisp/graphics.fs	/^: ellipse-putpixel ( y x -- ) ellipse-xm @ + swap ellipse-ym @ + putpixel ;$/;"	d
ellipse-putpixel	flib/./mecrisp/graphics.fs	/^: ellipse-putpixel ( y x -- ) ellipse-xm @ + swap ellipse-ym @ + putpixel ;$/;"	d
ellipse-putpixel	flib/mecrisp/graphics.fs	/^: ellipse-putpixel ( y x -- ) ellipse-xm @ + swap ellipse-ym @ + putpixel ;$/;"	d
ellipse-step	embello/flib/mecrisp/graphics.fs	/^: ellipse-step ( -- )$/;"	d
ellipse-step	flib/./mecrisp/graphics.fs	/^: ellipse-step ( -- )$/;"	d
ellipse-step	flib/mecrisp/graphics.fs	/^: ellipse-step ( -- )$/;"	d
ellipse-xm	embello/flib/mecrisp/graphics.fs	/^0 variable ellipse-xm   0 variable ellipse-ym$/;"	d
ellipse-xm	flib/./mecrisp/graphics.fs	/^0 variable ellipse-xm   0 variable ellipse-ym$/;"	d
ellipse-xm	flib/mecrisp/graphics.fs	/^0 variable ellipse-xm   0 variable ellipse-ym$/;"	d
empty-stack	follower/follower.fs	/^: empty-stack ( any -- ) \\ checks that the stack is empty, if not flash LED and empty it$/;"	d
empty-stack	follower/hc05-test.fs	/^: empty-stack ( any -- ) \\ checks that the stack is empty, if not flash LED and empty it$/;"	d
empty-stack	temp/rftemp.fs	/^: empty-stack ( any -- ) \\ checks that the stack is empty, if not flash LED and empty it$/;"	d
empty-stack	tlib/rfloop.fs	/^: empty-stack ( any -- ) \\ checks that the stack is empty, if not flash LED and empty it$/;"	d
enable-systick-pid	embello/sic/main.fs	/^: enable-systick-pid ( -- )$/;"	d
encA-tick	embello/jz4/ex/rot7.fs	/^: encA-tick ( -- )  \\ interrupt handler for EXTI2_3$/;"	d
encA-tick	embello/jz4/ex/rot8.fs	/^: encA-tick ( -- )  \\ interrupt handler for EXTI2_3$/;"	d
encB-tick	embello/jz4/ex/rot7.fs	/^: encB-tick ( -- )  \\ interrupt handler for EXTI4-15$/;"	d
encB-tick	embello/jz4/ex/rot8.fs	/^: encB-tick ( -- )  \\ interrupt handler for EXTI4-15$/;"	d
ep-addr	embello/suf/usb.fs	/^: ep-addr ( ep -- addr ) cells USB-EP0R + ;$/;"	d
ep-in	embello/suf/usb.fs	/^: ep-in ( ep -- )  \\ incoming polls, sent from this device to host$/;"	d
ep-out	embello/suf/usb.fs	/^: ep-out ( ep -- )  \\ outgoing packets, sent from host to this device$/;"	d
ep-reg	embello/suf/usb.fs	/^: ep-reg ( ep n -- addr ) 2* swap 8 * + usb-pma ;$/;"	d
ep-reset-rx#	embello/suf/usb.fs	/^: ep-reset-rx# ( ep -- ) $8400 over 3 ep-reg h! 3 rxstat! ;$/;"	d
ep-setup	embello/suf/usb.fs	/^: ep-setup ( ep -- )  \\ setup packets, sent from host to config this device$/;"	d
erase	embello/qld/dev.fs	/^: erase ( n -- )$/;"	d
eraseflashfrom	embello/flib/stm32f7/hal.fs	/^: eraseflashfrom ( addr -- )  \\ "polyfill" to emulate missing core word$/;"	d
eraseflashfrom	flib/./stm32f7/hal.fs	/^: eraseflashfrom ( addr -- )  \\ "polyfill" to emulate missing core word$/;"	d
eraseflashfrom	flib/stm32f7/hal.fs	/^: eraseflashfrom ( addr -- )  \\ "polyfill" to emulate missing core word$/;"	d
evenParity?	embello/flib/i2c/tlv493.fs	/^: evenParity? ( u -- f )  \\ true if the 32-bit input has even parity$/;"	d
evenParity?	flib/./i2c/tlv493.fs	/^: evenParity? ( u -- f )  \\ true if the 32-bit input has even parity$/;"	d
evenParity?	flib/i2c/tlv493.fs	/^: evenParity? ( u -- f )  \\ true if the 32-bit input has even parity$/;"	d
expand-key	embello/flib/any/aes128inv.fs	/^: expand-key ( key )$/;"	d
expand-key	flib/./any/aes128inv.fs	/^: expand-key ( key )$/;"	d
expand-key	flib/any/aes128inv.fs	/^: expand-key ( key )$/;"	d
ext3-tick	embello/jz4/ex/exti.fs	/^: ext3-tick ( -- )  \\ interrupt handler for EXTI3$/;"	d
ext3-tick	embello/sic/e-pinchange.fs	/^: ext3-tick ( -- )  \\ interrupt handler for EXTI3$/;"	d
ext5-tick	embello/jz4/ex/exti.fs	/^: ext5-tick ( -- )  \\ interrupt handler for EXTI9_5$/;"	d
ez80-8MHz	embello/ezr/ex/bridge.fs	/^: ez80-8MHz ( -- )$/;"	d
ez80-8MHz	embello/ezr/pokemon.fs	/^: ez80-8MHz ( -- )$/;"	d
f.000	embello/flib/any/pid.fs	/^: f.000 3 f.n ;  \\ Output fixed point value$/;"	d
f.000	flib/./any/pid.fs	/^: f.000 3 f.n ;  \\ Output fixed point value$/;"	d
f.000	flib/any/pid.fs	/^: f.000 3 f.n ;  \\ Output fixed point value$/;"	d
f.n.m	tlib/numprint.fs	/^: f.n.m ( ncomma nwhole n m -- ) \\ prints fixed-point using n int and m decimal digits$/;"	d
f2s	embello/flib/any/pid.fs	/^: f2s ( f -- s )  \\ Fixed point to signed number (rounded)$/;"	d
f2s	flib/./any/pid.fs	/^: f2s ( f -- s )  \\ Fixed point to signed number (rounded)$/;"	d
f2s	flib/any/pid.fs	/^: f2s ( f -- s )  \\ Fixed point to signed number (rounded)$/;"	d
f3>pkt	embello/flib/uart/gps.fs	/^: f3>pkt ( c-addr -- c-addr ) \\ send number with 3 fractional digits$/;"	d
f3>pkt	flib/./uart/gps.fs	/^: f3>pkt ( c-addr -- c-addr ) \\ send number with 3 fractional digits$/;"	d
f3>pkt	flib/uart/gps.fs	/^: f3>pkt ( c-addr -- c-addr ) \\ send number with 3 fractional digits$/;"	d
f4>pkt	embello/flib/uart/gps.fs	/^: f4>pkt ( c-addr -- c-addr ) \\ send number with 4 fractional digits$/;"	d
f4>pkt	flib/./uart/gps.fs	/^: f4>pkt ( c-addr -- c-addr ) \\ send number with 4 fractional digits$/;"	d
f4>pkt	flib/uart/gps.fs	/^: f4>pkt ( c-addr -- c-addr ) \\ send number with 4 fractional digits$/;"	d
f4d	embello/flib/uart/gps.fs	/^: f4d ( c-addr c -- c-addr n ) \\ prep number with 4 fractional digits and sign encoded by char$/;"	d
f4d	flib/./uart/gps.fs	/^: f4d ( c-addr c -- c-addr n ) \\ prep number with 4 fractional digits and sign encoded by char$/;"	d
f4d	flib/uart/gps.fs	/^: f4d ( c-addr c -- c-addr n ) \\ prep number with 4 fractional digits and sign encoded by char$/;"	d
f4d>pkt	embello/flib/uart/gps.fs	/^: f4d>pkt ( c-addr c -- c-addr ) f4d +pkt ;$/;"	d
f4d>pkt	flib/./uart/gps.fs	/^: f4d>pkt ( c-addr c -- c-addr ) f4d +pkt ;$/;"	d
f4d>pkt	flib/uart/gps.fs	/^: f4d>pkt ( c-addr c -- c-addr ) f4d +pkt ;$/;"	d
f>n.m	tlib/numprint.fs	/^: f>n.m ( ncomma nwhole n m -- c-addr len ) \\ convert fractional number with m frac digits, n chars total$/;"	d
fail-test	embello/flib/any/testing.fs	/^: fail-test 1 BAD-tests +! ; \\ used by assertions$/;"	d
fail-test	flib/./any/testing.fs	/^: fail-test 1 BAD-tests +! ; \\ used by assertions$/;"	d
fail-test	flib/any/testing.fs	/^: fail-test 1 BAD-tests +! ; \\ used by assertions$/;"	d
fake-key?	embello/i2c/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	embello/jz1/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	embello/jz3/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	embello/jz4/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	embello/lnr/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	embello/rvm/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	embello/ten/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	jz1/./board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	jz1/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	jz3/./board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	jz3/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fake-key?	oledtemp/board.fs	/^: fake-key? ( -- f )  \\ check for RX pin being pulled high$/;"	d
fast	embello/jz1/ex/clock.fs	/^: fast 2.1MHz 1000 systick-hz ;$/;"	d
fast	embello/jz3/ex/clock.fs	/^: fast 16MHz  1000 systick-hz ;  \\ 2000 µA$/;"	d
fast	embello/jz3/ex/clock.fs	/^: fast 2.1MHz 1000 systick-hz ;  \\ 680 µA$/;"	d
fast	jz1/./ex/clock.fs	/^: fast 2.1MHz 1000 systick-hz ;$/;"	d
fast	jz1/ex/clock.fs	/^: fast 2.1MHz 1000 systick-hz ;$/;"	d
fast	jz3/./ex/clock.fs	/^: fast 16MHz  1000 systick-hz ;  \\ 2000 µA$/;"	d
fast	jz3/./ex/clock.fs	/^: fast 2.1MHz 1000 systick-hz ;  \\ 680 µA$/;"	d
fast	jz3/ex/clock.fs	/^: fast 16MHz  1000 systick-hz ;  \\ 2000 µA$/;"	d
fast	jz3/ex/clock.fs	/^: fast 2.1MHz 1000 systick-hz ;  \\ 680 µA$/;"	d
fat-chain	embello/flib/spi/sdcard.fs	/^: fat-chain ( u n -- )  \\ store clusters for use as file map n$/;"	d
fat-chain	flib/./spi/sdcard.fs	/^: fat-chain ( u n -- )  \\ store clusters for use as file map n$/;"	d
fat-chain	flib/spi/sdcard.fs	/^: fat-chain ( u n -- )  \\ store clusters for use as file map n$/;"	d
fat-find	embello/flib/spi/sdcard.fs	/^: fat-find ( addr -- u )  \\ find entry by name, return data cluster, else $FFFF$/;"	d
fat-find	flib/./spi/sdcard.fs	/^: fat-find ( addr -- u )  \\ find entry by name, return data cluster, else $FFFF$/;"	d
fat-find	flib/spi/sdcard.fs	/^: fat-find ( addr -- u )  \\ find entry by name, return data cluster, else $FFFF$/;"	d
fat-map	embello/flib/spi/sdcard.fs	/^: fat-map ( n1 n2 -- n )  \\ map block n1 to raw block number, using file n2 map$/;"	d
fat-map	flib/./spi/sdcard.fs	/^: fat-map ( n1 n2 -- n )  \\ map block n1 to raw block number, using file n2 map$/;"	d
fat-map	flib/spi/sdcard.fs	/^: fat-map ( n1 n2 -- n )  \\ map block n1 to raw block number, using file n2 map$/;"	d
fat-next	embello/flib/spi/sdcard.fs	/^: fat-next ( u -- u )  \\ return next FAT cluster, or $FFFx at end$/;"	d
fat-next	flib/./spi/sdcard.fs	/^: fat-next ( u -- u )  \\ return next FAT cluster, or $FFFx at end$/;"	d
fat-next	flib/spi/sdcard.fs	/^: fat-next ( u -- u )  \\ return next FAT cluster, or $FFFx at end$/;"	d
fault-anykey	central/main.fs	/^: fault-anykey ( -- ) unhandled ." continue?" key drop ;$/;"	d
file	embello/flib/spi/sdcard.fs	/^: file ( n -- a )  \\ convert file 0..3 to a map address inside fat.maps$/;"	d
file	flib/./spi/sdcard.fs	/^: file ( n -- a )  \\ convert file 0..3 to a map address inside fat.maps$/;"	d
file	flib/spi/sdcard.fs	/^: file ( n -- a )  \\ convert file 0..3 to a map address inside fat.maps$/;"	d
fill	embello/ezr/cpm2/wr1280k.c	/^fill() {$/;"	f
fill-imu-buffer	tracker/tracker.fs	/^: fill-imu-buffer ( millis calib addr -- ) \\ fill IMU buffer at addr, gets data from bno.data$/;"	d
find-comma	embello/flib/uart/gps.fs	/^: find-comma ( c-addr -- i )$/;"	d
find-comma	flib/./uart/gps.fs	/^: find-comma ( c-addr -- i )$/;"	d
find-comma	flib/uart/gps.fs	/^: find-comma ( c-addr -- i )$/;"	d
fix-ssel	embello/flib/stm32l0/spi.fs	/^: fix-ssel ( -- ) \\ internal to calculate ssel.bit & ssel.addr$/;"	d
fix-ssel	flib/./stm32l0/spi.fs	/^: fix-ssel ( -- ) \\ internal to calculate ssel.bit & ssel.addr$/;"	d
fix-ssel	flib/stm32l0/spi.fs	/^: fix-ssel ( -- ) \\ internal to calculate ssel.bit & ssel.addr$/;"	d
flash-art-clear	embello/kb7/clock.fs	/^: flash-art-clear ( -- )$/;"	d
flash-art-dis	embello/kb7/clock.fs	/^: flash-art-dis ( -- ) 9 bit FLASH_ACR bic! ;$/;"	d
flash-art-ena	embello/kb7/clock.fs	/^: flash-art-ena ( -- ) 9 bit FLASH_ACR bis! ;$/;"	d
flash-art-ena?	embello/kb7/clock.fs	/^: flash-art-ena? ( -- f ) 9 bit FLASH_ACR bit@ ;$/;"	d
flash-art-reset	embello/kb7/clock.fs	/^: flash-art-reset ( -- ) 11 bit FLASH_ACR bis! ;$/;"	d
flash-art-unreset	embello/kb7/clock.fs	/^: flash-art-unreset ( -- ) 11 bit FLASH_ACR bic! ;$/;"	d
flash-kb	embello/flib/stm32f1/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	embello/flib/stm32f4/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	embello/flib/stm32f7/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	embello/flib/stm32l0/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	embello/suf/hal-stm32f1.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	flib/./stm32f1/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	flib/./stm32f4/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	flib/./stm32f7/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	flib/./stm32l0/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	flib/stm32f1/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	flib/stm32f4/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	flib/stm32f7/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-kb	flib/stm32l0/hal.fs	/^: flash-kb ( -- u )  \\ return size of flash memory in KB$/;"	d
flash-pagesize	embello/flib/stm32f1/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	embello/flib/stm32f7/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	embello/flib/stm32l0/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	embello/suf/hal-stm32f1.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	flib/./stm32f1/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	flib/./stm32f7/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	flib/./stm32l0/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	flib/stm32f1/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	flib/stm32f7/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-pagesize	flib/stm32l0/hal.fs	/^: flash-pagesize ( addr - u )  \\ return size of flash page at given address$/;"	d
flash-prefetch-dis	embello/kb7/clock.fs	/^: flash-prefetch-dis ( -- ) 8 bit FLASH_ACR bic! ;$/;"	d
flash-prefetch-ena	embello/kb7/clock.fs	/^: flash-prefetch-ena ( -- ) 8 bit FLASH_ACR bis! ;$/;"	d
flash-ws!	embello/kb7/clock.fs	/^: flash-ws! ( n -- ) $f FLASH_ACR bits! ;$/;"	d
flush.cnt	embello/jz3/ook/rf69ook-polling.fs	/^0 variable flush.cnt$/;"	d
flush.cnt	jz3/./ook/rf69ook-polling.fs	/^0 variable flush.cnt$/;"	d
flush.cnt	jz3/ook/rf69ook-polling.fs	/^0 variable flush.cnt$/;"	d
font-x	embello/flib/mecrisp/graphics.fs	/^0 variable font-x   0 variable font-y$/;"	d
font-x	flib/./mecrisp/graphics.fs	/^0 variable font-x   0 variable font-y$/;"	d
font-x	flib/mecrisp/graphics.fs	/^0 variable font-x   0 variable font-y$/;"	d
forever	embello/cag/ex/io.fs	/^: forever$/;"	d
forever	embello/g6s/ex/io.fs	/^: forever$/;"	d
forward1	embello/wpp/dev.fs	/^: forward1 M1A step M1B step M1C step M1D step ;$/;"	d
forward2	embello/wpp/dev.fs	/^: forward2 M2A step M2B step M2C step M2D step ;$/;"	d
free-imu-buffer	tracker/tracker.fs	/^: free-imu-buffer ( ) \\ free first IMU buffer by moving rest up$/;"	d
freq!	embello/flib/i2c/si570.fs	/^: freq! ( ud -- )$/;"	d
freq!	flib/./i2c/si570.fs	/^: freq! ( ud -- )$/;"	d
freq!	flib/i2c/si570.fs	/^: freq! ( ud -- )$/;"	d
freq@	embello/flib/i2c/si570.fs	/^: freq@ ( -- ud )$/;"	d
freq@	flib/./i2c/si570.fs	/^: freq@ ( -- ud )$/;"	d
freq@	flib/i2c/si570.fs	/^: freq@ ( -- ud )$/;"	d
from	embello/flib/mecrisp/disassembler-m3.fs	/^                                \\ Extract 16 Bit constant from opcode:$/;"	d
from	flib/./mecrisp/disassembler-m3.fs	/^                                \\ Extract 16 Bit constant from opcode:$/;"	d
from	flib/mecrisp/disassembler-m3.fs	/^                                \\ Extract 16 Bit constant from opcode:$/;"	d
fs20.decode	embello/jz3/ook/ook-decoder.fs	/^: fs20.decode ( width -- flag ) \\ decode stream to bits$/;"	d
fs20.decode	jz3/./ook/ook-decoder.fs	/^: fs20.decode ( width -- flag ) \\ decode stream to bits$/;"	d
fs20.decode	jz3/ook/ook-decoder.fs	/^: fs20.decode ( width -- flag ) \\ decode stream to bits$/;"	d
fs20.print	embello/jz3/ook/ook-decoder.fs	/^: fs20.print$/;"	d
fs20.print	jz3/./ook/ook-decoder.fs	/^: fs20.print$/;"	d
fs20.print	jz3/ook/ook-decoder.fs	/^: fs20.print$/;"	d
fs20>rstream	embello/jz3/ook/ook-decoder.fs	/^: fs20>rstream ( width signal rssi -- flag ) \\ stream one interval into decoder$/;"	d
fs20>rstream	jz3/./ook/ook-decoder.fs	/^: fs20>rstream ( width signal rssi -- flag ) \\ stream one interval into decoder$/;"	d
fs20>rstream	jz3/ook/ook-decoder.fs	/^: fs20>rstream ( width signal rssi -- flag ) \\ stream one interval into decoder$/;"	d
fs20>stream	embello/jz3/ook/ook-decoder.fs	/^: fs20>stream ( width -- flag ) \\ stream one interval into decoder$/;"	d
fs20>stream	jz3/./ook/ook-decoder.fs	/^: fs20>stream ( width -- flag ) \\ stream one interval into decoder$/;"	d
fs20>stream	jz3/ook/ook-decoder.fs	/^: fs20>stream ( width -- flag ) \\ stream one interval into decoder$/;"	d
get-ack	temp/rftemp.fs	/^: get-ack ( -- ) \\ wait a bit to receive an ACK, adjust rate-now accordingly$/;"	d
get-ack	tlib/rfloop.fs	/^: get-ack ( -- ) \\ wait a bit to receive an ACK, adjust rate-now accordingly$/;"	d
get-byte	embello/flib/spi/lcd-pcd8544.fs	/^: get-byte ( x y -- r ) LCD_WIDTH * LCD_BUFFER + + c@ ;$/;"	d
get-byte	flib/./spi/lcd-pcd8544.fs	/^: get-byte ( x y -- r ) LCD_WIDTH * LCD_BUFFER + + c@ ;$/;"	d
get-byte	flib/spi/lcd-pcd8544.fs	/^: get-byte ( x y -- r ) LCD_WIDTH * LCD_BUFFER + + c@ ;$/;"	d
get-cmd	embello/qld/dev.fs	/^: get-cmd ( -- n )$/;"	d
get-gps	tracker/oldtracker.fs	/^: get-gps init-hw begin gps-line ?dup 0<> until txbuf -rot buffer-cpy ;$/;"	d
get-id	embello/qld/dev.fs	/^: get-id ( -- n )$/;"	d
get-key	embello/flib/uart/gps-test.fs	/^: get-key inptr dup @ dup c@ swap 1+ rot ! ;$/;"	d
get-key	flib/./uart/gps-test.fs	/^: get-key inptr dup @ dup c@ swap 1+ rot ! ;$/;"	d
get-key	flib/uart/gps-test.fs	/^: get-key inptr dup @ dup c@ swap 1+ rot ! ;$/;"	d
get-key	tracker/tracker-test.fs	/^: get-key inptr dup @ dup c@ swap 1+ rot ! ;$/;"	d
get-response	follower/hc05.fs	/^: get-response ( -- c-addr len ) \\ wait for OK\\r\\n, return previous line$/;"	d
get-version	embello/qld/dev.fs	/^: get-version ( -- n )$/;"	d
get-version	follower/hc05.fs	/^: get-version ( -- f )$/;"	d
getc	embello/flib/uart/gps.fs	/^: getc ( c-addr -- c-addr+1 digit ) dup 1+ swap c@ [char] 0 - ;$/;"	d
getc	flib/./uart/gps.fs	/^: getc ( c-addr -- c-addr+1 digit ) dup 1+ swap c@ [char] 0 - ;$/;"	d
getc	flib/uart/gps.fs	/^: getc ( c-addr -- c-addr+1 digit ) dup 1+ swap c@ [char] 0 - ;$/;"	d
gfmod	embello/flib/any/aes128.fs	/^: gfmod ( a -- a' )$/;"	d
gfmod	flib/./any/aes128.fs	/^: gfmod ( a -- a' )$/;"	d
gfmod	flib/any/aes128.fs	/^: gfmod ( a -- a' )$/;"	d
gmul	embello/flib/any/aes128inv.fs	/^: gmul ( a b -- p )$/;"	d
gmul	flib/./any/aes128inv.fs	/^: gmul ( a b -- p )$/;"	d
gmul	flib/any/aes128inv.fs	/^: gmul ( a b -- p )$/;"	d
go	embello/bme/dev.fs	/^: go$/;"	d
go	embello/ezr/dev.fs	/^: go  $3A6000 a c t ;$/;"	d
go	embello/i2c/ex/bb.fs	/^: go$/;"	d
go	embello/i2c/ex/bme.fs	/^: go$/;"	d
go	embello/i2c/ex/font.fs	/^: go$/;"	d
go	embello/i2c/ex/mag.fs	/^: go$/;"	d
go	embello/i2c/ex/oled.fs	/^: go$/;"	d
go	embello/i2c/ex/si570.fs	/^: go$/;"	d
go	embello/i2c/ex/tlv.fs	/^: go$/;"	d
go	embello/i2c/ex/tsl.fs	/^: go$/;"	d
go	embello/i2c/ex/veml.fs	/^: go$/;"	d
go	embello/jz1/ex/adc.fs	/^: go$/;"	d
go	embello/jz1/ex/iorate.fs	/^: go$/;"	d
go	embello/jz1/ex/leds.fs	/^: go$/;"	d
go	embello/jz1/ex/node.fs	/^: go$/;"	d
go	embello/jz3/ex/leds.fs	/^: go$/;"	d
go	embello/jz3/ex/sensor.fs	/^: go$/;"	d
go	embello/rfc/dev.fs	/^: go$/;"	d
go	jz1/./ex/adc.fs	/^: go$/;"	d
go	jz1/./ex/iorate.fs	/^: go$/;"	d
go	jz1/./ex/leds.fs	/^: go$/;"	d
go	jz1/./ex/node.fs	/^: go$/;"	d
go	jz1/ex/adc.fs	/^: go$/;"	d
go	jz1/ex/iorate.fs	/^: go$/;"	d
go	jz1/ex/leds.fs	/^: go$/;"	d
go	jz1/ex/node.fs	/^: go$/;"	d
go	jz3/./ex/leds.fs	/^: go$/;"	d
go	jz3/./ex/sensor.fs	/^: go$/;"	d
go	jz3/ex/leds.fs	/^: go$/;"	d
go	jz3/ex/sensor.fs	/^: go$/;"	d
go	oledtemp/e-oled.fs	/^: go$/;"	d
good-char	embello/flib/uart/gps.fs	/^: good-char ( c -- c f ) dup STAR <> over LF <> and ;$/;"	d
good-char	flib/./uart/gps.fs	/^: good-char ( c -- c f ) dup STAR <> over LF <> and ;$/;"	d
good-char	flib/uart/gps.fs	/^: good-char ( c -- c f ) dup STAR <> over LF <> and ;$/;"	d
good-test	embello/flib/any/testing.fs	/^: good-test 1 OK-tests +! ; \\ used by assertions$/;"	d
good-test	flib/./any/testing.fs	/^: good-test 1 OK-tests +! ; \\ used by assertions$/;"	d
good-test	flib/any/testing.fs	/^: good-test 1 OK-tests +! ; \\ used by assertions$/;"	d
goxy	embello/flib/spi/tft-ili9163.fs	/^: goxy ( x y -- )$/;"	d
goxy	flib/./spi/tft-ili9163.fs	/^: goxy ( x y -- )$/;"	d
goxy	flib/spi/tft-ili9163.fs	/^: goxy ( x y -- )$/;"	d
gpgga>uart2	follower/follower.fs	/^: gpgga>uart2 ( -- c-addr len ) \\ generate gpgga GPS record from avail data$/;"	d
gps-decode	follower/follower.fs	/^: gps-decode ( len -- ) \\ decode GPS packet$/;"	d
gps-line	embello/flib/uart/gps.fs	/^: gps-line ( -- 0 | c-addr length ) \\ wait for a GPS line and return the info, or just 0$/;"	d
gps-line	flib/./uart/gps.fs	/^: gps-line ( -- 0 | c-addr length ) \\ wait for a GPS line and return the info, or just 0$/;"	d
gps-line	flib/uart/gps.fs	/^: gps-line ( -- 0 | c-addr length ) \\ wait for a GPS line and return the info, or just 0$/;"	d
gps-loop	tracker/tracker.fs	/^: gps-loop ( -- )$/;"	d
gps>oled	follower/follower.fs	/^: gps>oled ( -- ) \\ display some GPS info on oled$/;"	d
gps>uart	follower/follower.fs	/^: gps>uart ( -- ) \\ print GPS info$/;"	d
gpslen	tracker/tracker.fs	/^ 0 variable gpslen              \\ length of msg in gpsbuf$/;"	d
gpslock	tracker/tracker.fs	/^ gpslen 1+ dup constant gpslock \\ true if gpsbuf is being transmitted$/;"	d
gr:line	follower/follower.fs	/^: gr:line line ;$/;"	d
grab-$	embello/flib/uart/gps.fs	/^: grab-$ ( -- f ) begin get-key DOLLAR <> while skip-line repeat ;$/;"	d
grab-$	flib/./uart/gps.fs	/^: grab-$ ( -- f ) begin get-key DOLLAR <> while skip-line repeat ;$/;"	d
grab-$	flib/uart/gps.fs	/^: grab-$ ( -- f ) begin get-key DOLLAR <> while skip-line repeat ;$/;"	d
greeting	embello/i2c/ex/oled.fs	/^: greeting$/;"	d
h	embello/ezr/dev.fs	/^: h  \\ send greeting over serial, see asm\/hello.asm$/;"	d
h.1	embello/i2c/main.fs	/^: h.1 ( u -- ) $F and base @ hex swap  .digit emit  base ! ;$/;"	d
h.2	embello/flib/mecrisp/hexdump.fs	/^: h.2 ( u -- ) base @ hex swap  u.2  base ! ;$/;"	d
h.2	flib/./mecrisp/hexdump.fs	/^: h.2 ( u -- ) base @ hex swap  u.2  base ! ;$/;"	d
h.2	flib/mecrisp/hexdump.fs	/^: h.2 ( u -- ) base @ hex swap  u.2  base ! ;$/;"	d
h.4	embello/flib/mecrisp/hexdump.fs	/^: h.4 ( u -- ) base @ hex swap  u.4  base ! ;$/;"	d
h.4	flib/./mecrisp/hexdump.fs	/^: h.4 ( u -- ) base @ hex swap  u.4  base ! ;$/;"	d
h.4	flib/mecrisp/hexdump.fs	/^: h.4 ( u -- ) base @ hex swap  u.4  base ! ;$/;"	d
h>n	central/main.fs	/^: h>n ( u n -- ) \\ convert hex to n digit string$/;"	d
h>tft	embello/flib/spi/tft-ili9163.fs	/^: h>tft ( u -- )$/;"	d
h>tft	flib/./spi/tft-ili9163.fs	/^: h>tft ( u -- )$/;"	d
h>tft	flib/spi/tft-ili9163.fs	/^: h>tft ( u -- )$/;"	d
halt	embello/ezr/dev.fs	/^: halt $76 ins1 ;$/;"	d
handler	embello/flib/mecrisp/multi.fs	/^: handler    ( -- handler ) up @ 3 cells + inline ;$/;"	d
handler	flib/./mecrisp/multi.fs	/^: handler    ( -- handler ) up @ 3 cells + inline ;$/;"	d
handler	flib/mecrisp/multi.fs	/^: handler    ( -- handler ) up @ 3 cells + inline ;$/;"	d
hc05:config	follower/hc05.fs	/^: hc05:config$/;"	d
hc05:run	follower/hc05.fs	/^: hc05:run s" AT+RESET" send-line ;$/;"	d
hcalc	embello/bme/dev.fs	/^: hcalc ( rawh -- h100 )$/;"	d
hcalc	embello/flib/i2c/bme280.fs	/^: hcalc ( rawh -- h100 )$/;"	d
hcalc	flib/./i2c/bme280.fs	/^: hcalc ( rawh -- h100 )$/;"	d
hcalc	flib/i2c/bme280.fs	/^: hcalc ( rawh -- h100 )$/;"	d
heat-start	embello/sic/main.fs	/^0 variable heat-start$/;"	d
heat-state	embello/sic/main.fs	/^0 variable heat-state$/;"	d
heat-temp	embello/sic/main.fs	/^0 variable heat-temp$/;"	d
heater-mv	embello/prc2/dev.fs	/^: heater-mv ( -- u )  \\ measure heater voltage, just under power rail when on$/;"	d
heatmon	embello/sic/main.fs	/^: heatmon ( pwm -- pwm )$/;"	d
heatmon-checkifok	embello/sic/main.fs	/^: heatmon-checkifok ( pwm -- pwm)$/;"	d
heatmon-isoff	embello/sic/main.fs	/^: heatmon-isoff ( pwm -- pwm )$/;"	d
heatmon-ison	embello/sic/main.fs	/^: heatmon-ison ( pwm -- pwm )$/;"	d
hello	central/board.fs	/^: hello ( -- ) flash-kb . ." KB <tve-central> " hwid hex.$/;"	d
hello	embello/cag/board.fs	/^: hello ( -- ) flash-kb . ." KB <cag> " hwid hex.$/;"	d
hello	embello/g6s/board.fs	/^: hello ( -- ) flash-kb . ." KB <g6s> " hwid hex.$/;"	d
hello	embello/g6u/board.fs	/^: hello ( -- ) flash-kb . ." KB <g6u> " hwid hex.$/;"	d
hello	embello/jz1/board.fs	/^: hello ( -- ) flash-kb . ." KB <jz1-tve> " hwid hex.$/;"	d
hello	embello/jz3/board.fs	/^: hello ( -- ) flash-kb . ." KB <jnz> " hwid hex.$/;"	d
hello	embello/jz4/board.fs	/^: hello ( -- ) flash-kb . ." KB <jz4> " hwid hex.$/;"	d
hello	embello/lnr/board.fs	/^: hello ( -- ) flash-kb . ." KB <lnr> " hwid hex.$/;"	d
hello	embello/prc2/board.fs	/^: hello ( -- ) flash-kb . ." KB <prc2> " hwid hex.$/;"	d
hello	embello/qld/board.fs	/^: hello ( -- ) flash-kb . ." KB <qld> " hwid hex.$/;"	d
hello	embello/sic/board.fs	/^: hello ( -- ) flash-kb . ." KB <g6s> " hwid hex.$/;"	d
hello	embello/ten/board.fs	/^: hello ( -- ) flash-kb . ." KB <ten> " hwid hex.$/;"	d
hello	embello/tex/board.fs	/^: hello ( -- ) flash-kb . ." KB <tex> " hwid hex.$/;"	d
hello	embello/trf/board.fs	/^: hello ( -- ) flash-kb . ." KB <trf> " hwid hex.$/;"	d
hello	fanctrl/bug.fs	/^: hello ." hello" cr ;$/;"	d
hello	jz1/./board.fs	/^: hello ( -- ) flash-kb . ." KB <jz1-tve> " hwid hex.$/;"	d
hello	jz1/board.fs	/^: hello ( -- ) flash-kb . ." KB <jz1-tve> " hwid hex.$/;"	d
hello	jz3/./board.fs	/^: hello ( -- ) flash-kb . ." KB <jnz> " hwid hex.$/;"	d
hello	jz3/board.fs	/^: hello ( -- ) flash-kb . ." KB <jnz> " hwid hex.$/;"	d
hello	oledtemp/board.fs	/^: hello ( -- ) flash-kb . ." KB <jz1-tve> " hwid hex.$/;"	d
hex-char	embello/flib/uart/gps.fs	/^: hex-char ( c - u ) 48 - dup 9 > if 7 - dup 15 > if 32 - then then $f and ;$/;"	d
hex-char	flib/./uart/gps.fs	/^: hex-char ( c - u ) 48 - dup 9 > if 7 - dup 15 > if 32 - then then $f and ;$/;"	d
hex-char	flib/uart/gps.fs	/^: hex-char ( c - u ) 48 - dup 9 > if 7 - dup 15 > if 32 - then then $f and ;$/;"	d
hex.empty	embello/flib/mecrisp/hexdump.fs	/^$FF variable hex.empty  \\ needs to be variable, some flash is zero when empty$/;"	d
hex.empty	flib/./mecrisp/hexdump.fs	/^$FF variable hex.empty  \\ needs to be variable, some flash is zero when empty$/;"	d
hex.empty	flib/mecrisp/hexdump.fs	/^$FF variable hex.empty  \\ needs to be variable, some flash is zero when empty$/;"	d
hexdump	embello/flib/mecrisp/hexdump.fs	/^: hexdump ( -- ) \\ dumps entire flash as Intel hex$/;"	d
hexdump	flib/./mecrisp/hexdump.fs	/^: hexdump ( -- ) \\ dumps entire flash as Intel hex$/;"	d
hexdump	flib/mecrisp/hexdump.fs	/^: hexdump ( -- ) \\ dumps entire flash as Intel hex$/;"	d
hi-fill	embello/cag/ex/hiflash.fs	/^: hi-fill ( u -- )$/;"	d
hi-fill	embello/g6s/ex/hiflash.fs	/^: hi-fill ( u -- )$/;"	d
hi-fillall	embello/cag/ex/hiflash.fs	/^: hi-fillall$/;"	d
hi-fillall	embello/g6s/ex/hiflash.fs	/^: hi-fillall$/;"	d
hi-test	embello/cag/ex/hiflash.fs	/^: hi-test ( u -- )$/;"	d
hi-test	embello/g6s/ex/hiflash.fs	/^: hi-test ( u -- )$/;"	d
hi-testall	embello/cag/ex/hiflash.fs	/^: hi-testall$/;"	d
hi-testall	embello/g6s/ex/hiflash.fs	/^: hi-testall$/;"	d
hi-wipe	embello/cag/ex/hiflash.fs	/^: hi-wipe$/;"	d
hi-wipe	embello/g6s/ex/hiflash.fs	/^: hi-wipe$/;"	d
high-power-sleep	fanctrl/fanctrl.fs	/^: high-power-sleep ( n -- ) 100 * ms ;$/;"	d
highz-gpio	embello/jz1/ex/stop.fs	/^: highz-gpio$/;"	d
highz-gpio	embello/jz3/ex/stop.fs	/^: highz-gpio$/;"	d
highz-gpio	jz1/./ex/stop.fs	/^: highz-gpio$/;"	d
highz-gpio	jz1/ex/stop.fs	/^: highz-gpio$/;"	d
highz-gpio	jz3/./ex/stop.fs	/^: highz-gpio$/;"	d
highz-gpio	jz3/ex/stop.fs	/^: highz-gpio$/;"	d
highz-gpio	temp/rftemp.fs	/^: highz-gpio$/;"	d
highz-gpio	tlib/lpsleep.fs	/^: highz-gpio$/;"	d
hms	follower/follower.fs	/^: hms ( n -- c-addr len ) \\ convert gps hour-minute-sec to string with : sep$/;"	d
hse-byp-off	embello/kb7/clock.fs	/^: hse-byp-off ( -- ) 18 bit RCC_CR bic! ;$/;"	d
hse-byp-on	embello/kb7/clock.fs	/^: hse-byp-on ( -- ) 18 bit RCC_CR bis! ;$/;"	d
hse-off	embello/kb7/clock.fs	/^: hse-off ( -- ) 16 bit RCC_CR bic! ;$/;"	d
hse-on	embello/kb7/clock.fs	/^: hse-on ( -- ) 16 bit RCC_CR bis! ;$/;"	d
hse-stable?	embello/kb7/clock.fs	/^: hse-stable? ( -- f ) 17 bit RCC_CR bit@ ;$/;"	d
hse-wait-stable	embello/kb7/clock.fs	/^: hse-wait-stable ( -- ) begin hse-on hse-stable? until ;$/;"	d
hsi-on	embello/flib/stm32l0/hal.fs	/^: hsi-on ( -- )  \\ turn on internal 16 MHz clock, needed by ADC$/;"	d
hsi-on	embello/kb7/clock.fs	/^: hsi-on ( -- ) 0 bit RCC_CR bis! ;$/;"	d
hsi-on	flib/./stm32l0/hal.fs	/^: hsi-on ( -- )  \\ turn on internal 16 MHz clock, needed by ADC$/;"	d
hsi-on	flib/stm32l0/hal.fs	/^: hsi-on ( -- )  \\ turn on internal 16 MHz clock, needed by ADC$/;"	d
hsi-stable?	embello/kb7/clock.fs	/^: hsi-stable? ( -- f ) 1 bit RCC_CR bit@ ;$/;"	d
hsi-wait-stable	embello/kb7/clock.fs	/^: hsi-wait-stable ( -- ) hsi-on begin hsi-stable? until ;$/;"	d
hsi-wakeup	embello/flib/stm32l0/hal.fs	/^: hsi-wakeup ( -- )  \\ wake up using the 16 MHz clock$/;"	d
hsi-wakeup	flib/./stm32l0/hal.fs	/^: hsi-wakeup ( -- )  \\ wake up using the 16 MHz clock$/;"	d
hsi-wakeup	flib/stm32l0/hal.fs	/^: hsi-wakeup ( -- )  \\ wake up using the 16 MHz clock$/;"	d
hwid	embello/flib/stm32f1/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	embello/flib/stm32f4/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	embello/flib/stm32f7/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	embello/flib/stm32l0/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	embello/suf/hal-stm32f1.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	flib/./stm32f1/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	flib/./stm32f4/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	flib/./stm32f7/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	flib/./stm32l0/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	flib/stm32f1/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	flib/stm32f4/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	flib/stm32f7/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
hwid	flib/stm32l0/hal.fs	/^: hwid ( -- u )  \\ a "fairly unique" hardware ID as single 32-bit int$/;"	d
i2c++	embello/flib/stm32l0/i2c.fs	/^: i2c++ ( -- addr )  i2c.ptr @  dup 1+ i2c.ptr ! ;$/;"	d
i2c++	flib/./stm32l0/i2c.fs	/^: i2c++ ( -- addr )  i2c.ptr @  dup 1+ i2c.ptr ! ;$/;"	d
i2c++	flib/stm32l0/i2c.fs	/^: i2c++ ( -- addr )  i2c.ptr @  dup 1+ i2c.ptr ! ;$/;"	d
i2c-ACK-0	embello/flib/stm32f1/i2c.fs	/^: i2c-ACK-0 ( -- ) 10 bit I2C1-CR1 hbic! ;$/;"	d
i2c-ACK-0	flib/./stm32f1/i2c.fs	/^: i2c-ACK-0 ( -- ) 10 bit I2C1-CR1 hbic! ;$/;"	d
i2c-ACK-0	flib/stm32f1/i2c.fs	/^: i2c-ACK-0 ( -- ) 10 bit I2C1-CR1 hbic! ;$/;"	d
i2c-ACK-1	embello/flib/stm32f1/i2c.fs	/^: i2c-ACK-1 ( -- ) 10 bit I2C1-CR1 hbis! ;$/;"	d
i2c-ACK-1	flib/./stm32f1/i2c.fs	/^: i2c-ACK-1 ( -- ) 10 bit I2C1-CR1 hbis! ;$/;"	d
i2c-ACK-1	flib/stm32f1/i2c.fs	/^: i2c-ACK-1 ( -- ) 10 bit I2C1-CR1 hbis! ;$/;"	d
i2c-ADDR?	embello/flib/stm32f1/i2c.fs	/^: i2c-ADDR? ( -- b)  1  bit i2c-SR1-flag? ;     \\ ADDR bit$/;"	d
i2c-ADDR?	flib/./stm32f1/i2c.fs	/^: i2c-ADDR? ( -- b)  1  bit i2c-SR1-flag? ;     \\ ADDR bit$/;"	d
i2c-ADDR?	flib/stm32f1/i2c.fs	/^: i2c-ADDR? ( -- b)  1  bit i2c-SR1-flag? ;     \\ ADDR bit$/;"	d
i2c-AF-0	embello/flib/stm32f1/i2c.fs	/^: i2c-AF-0 ( -- )  10 bit I2C1-SR1 hbic! ;      \\ Clears AF flag$/;"	d
i2c-AF-0	flib/./stm32f1/i2c.fs	/^: i2c-AF-0 ( -- )  10 bit I2C1-SR1 hbic! ;      \\ Clears AF flag$/;"	d
i2c-AF-0	flib/stm32f1/i2c.fs	/^: i2c-AF-0 ( -- )  10 bit I2C1-SR1 hbic! ;      \\ Clears AF flag$/;"	d
i2c-DR!	embello/flib/stm32f1/i2c.fs	/^: i2c-DR!     ( c -- )  I2C1-DR c! ;            \\ Writes data register$/;"	d
i2c-DR!	flib/./stm32f1/i2c.fs	/^: i2c-DR!     ( c -- )  I2C1-DR c! ;            \\ Writes data register$/;"	d
i2c-DR!	flib/stm32f1/i2c.fs	/^: i2c-DR!     ( c -- )  I2C1-DR c! ;            \\ Writes data register$/;"	d
i2c-DR@	embello/flib/stm32f1/i2c.fs	/^: i2c-DR@     (  -- c ) I2C1-DR c@ ;            \\ Writes data register$/;"	d
i2c-DR@	flib/./stm32f1/i2c.fs	/^: i2c-DR@     (  -- c ) I2C1-DR c@ ;            \\ Writes data register$/;"	d
i2c-DR@	flib/stm32f1/i2c.fs	/^: i2c-DR@     (  -- c ) I2C1-DR c@ ;            \\ Writes data register$/;"	d
i2c-EV5	embello/flib/stm32f1/i2c.fs	/^: i2c-EV5   i2c-SR1-SB   i2c-SR1-wait ;$/;"	d
i2c-EV5	flib/./stm32f1/i2c.fs	/^: i2c-EV5   i2c-SR1-SB   i2c-SR1-wait ;$/;"	d
i2c-EV5	flib/stm32f1/i2c.fs	/^: i2c-EV5   i2c-SR1-SB   i2c-SR1-wait ;$/;"	d
i2c-EV6	embello/flib/stm32f1/i2c.fs	/^: i2c-EV6 i2c-EV6a i2c-EV6b ;                        \\ Performs full EV6 action$/;"	d
i2c-EV6	flib/./stm32f1/i2c.fs	/^: i2c-EV6 i2c-EV6a i2c-EV6b ;                        \\ Performs full EV6 action$/;"	d
i2c-EV6	flib/stm32f1/i2c.fs	/^: i2c-EV6 i2c-EV6a i2c-EV6b ;                        \\ Performs full EV6 action$/;"	d
i2c-EV6a	embello/flib/stm32f1/i2c.fs	/^: i2c-EV6a i2c-SR1-ADDR i2c-SR1-AF or i2c-SR1-wait ; \\ performs the wait, does not clear ADDR$/;"	d
i2c-EV6a	flib/./stm32f1/i2c.fs	/^: i2c-EV6a i2c-SR1-ADDR i2c-SR1-AF or i2c-SR1-wait ; \\ performs the wait, does not clear ADDR$/;"	d
i2c-EV6a	flib/stm32f1/i2c.fs	/^: i2c-EV6a i2c-SR1-ADDR i2c-SR1-AF or i2c-SR1-wait ; \\ performs the wait, does not clear ADDR$/;"	d
i2c-EV6b	embello/flib/stm32f1/i2c.fs	/^: i2c-EV6b I2C1-SR1 h@ drop I2C1-SR2 h@ drop ;       \\ clears ADDR$/;"	d
i2c-EV6b	flib/./stm32f1/i2c.fs	/^: i2c-EV6b I2C1-SR1 h@ drop I2C1-SR2 h@ drop ;       \\ clears ADDR$/;"	d
i2c-EV6b	flib/stm32f1/i2c.fs	/^: i2c-EV6b I2C1-SR1 h@ drop I2C1-SR2 h@ drop ;       \\ clears ADDR$/;"	d
i2c-EV7	embello/flib/stm32f1/i2c.fs	/^: i2c-EV7   i2c-SR1-RxNE i2c-SR1-wait ;$/;"	d
i2c-EV7	flib/./stm32f1/i2c.fs	/^: i2c-EV7   i2c-SR1-RxNE i2c-SR1-wait ;$/;"	d
i2c-EV7	flib/stm32f1/i2c.fs	/^: i2c-EV7   i2c-SR1-RxNE i2c-SR1-wait ;$/;"	d
i2c-EV7_2	embello/flib/stm32f1/i2c.fs	/^: i2c-EV7_2 i2c-SR1-BTF  i2c-SR1-wait ;$/;"	d
i2c-EV7_2	flib/./stm32f1/i2c.fs	/^: i2c-EV7_2 i2c-SR1-BTF  i2c-SR1-wait ;$/;"	d
i2c-EV7_2	flib/stm32f1/i2c.fs	/^: i2c-EV7_2 i2c-SR1-BTF  i2c-SR1-wait ;$/;"	d
i2c-EV8_1	embello/flib/stm32f1/i2c.fs	/^: i2c-EV8_1 i2c-SR1-TxE  i2c-SR1-wait ;$/;"	d
i2c-EV8_1	flib/./stm32f1/i2c.fs	/^: i2c-EV8_1 i2c-SR1-TxE  i2c-SR1-wait ;$/;"	d
i2c-EV8_1	flib/stm32f1/i2c.fs	/^: i2c-EV8_1 i2c-SR1-TxE  i2c-SR1-wait ;$/;"	d
i2c-MSL?	embello/flib/stm32f1/i2c.fs	/^: i2c-MSL? ( -- b)   0  bit I2C1-SR2 hbit@ ;    \\ MSL bit$/;"	d
i2c-MSL?	flib/./stm32f1/i2c.fs	/^: i2c-MSL? ( -- b)   0  bit I2C1-SR2 hbit@ ;    \\ MSL bit$/;"	d
i2c-MSL?	flib/stm32f1/i2c.fs	/^: i2c-MSL? ( -- b)   0  bit I2C1-SR2 hbit@ ;    \\ MSL bit$/;"	d
i2c-POS-0	embello/flib/stm32f1/i2c.fs	/^: i2c-POS-0 ( -- ) 11 bit I2C1-CR1 hbic! ;$/;"	d
i2c-POS-0	flib/./stm32f1/i2c.fs	/^: i2c-POS-0 ( -- ) 11 bit I2C1-CR1 hbic! ;$/;"	d
i2c-POS-0	flib/stm32f1/i2c.fs	/^: i2c-POS-0 ( -- ) 11 bit I2C1-CR1 hbic! ;$/;"	d
i2c-POS-1	embello/flib/stm32f1/i2c.fs	/^: i2c-POS-1 ( -- ) 11 bit I2C1-CR1 hbis! ;$/;"	d
i2c-POS-1	flib/./stm32f1/i2c.fs	/^: i2c-POS-1 ( -- ) 11 bit I2C1-CR1 hbis! ;$/;"	d
i2c-POS-1	flib/stm32f1/i2c.fs	/^: i2c-POS-1 ( -- ) 11 bit I2C1-CR1 hbis! ;$/;"	d
i2c-SR1-!wait	embello/flib/stm32f1/i2c.fs	/^: i2c-SR1-!wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR1-flag? 0= or until 2drop ; \\ Waits until SR1 has zero on bit mask or timeout$/;"	d
i2c-SR1-!wait	flib/./stm32f1/i2c.fs	/^: i2c-SR1-!wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR1-flag? 0= or until 2drop ; \\ Waits until SR1 has zero on bit mask or timeout$/;"	d
i2c-SR1-!wait	flib/stm32f1/i2c.fs	/^: i2c-SR1-!wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR1-flag? 0= or until 2drop ; \\ Waits until SR1 has zero on bit mask or timeout$/;"	d
i2c-SR1-ADDR	embello/flib/stm32f1/i2c.fs	/^1  bit constant i2c-SR1-ADDR$/;"	d
i2c-SR1-ADDR	flib/./stm32f1/i2c.fs	/^1  bit constant i2c-SR1-ADDR$/;"	d
i2c-SR1-ADDR	flib/stm32f1/i2c.fs	/^1  bit constant i2c-SR1-ADDR$/;"	d
i2c-SR1-AF	embello/flib/stm32f1/i2c.fs	/^10 bit constant i2c-SR1-AF$/;"	d
i2c-SR1-AF	flib/./stm32f1/i2c.fs	/^10 bit constant i2c-SR1-AF$/;"	d
i2c-SR1-AF	flib/stm32f1/i2c.fs	/^10 bit constant i2c-SR1-AF$/;"	d
i2c-SR1-BTF	embello/flib/stm32f1/i2c.fs	/^2  bit constant i2c-SR1-BTF$/;"	d
i2c-SR1-BTF	flib/./stm32f1/i2c.fs	/^2  bit constant i2c-SR1-BTF$/;"	d
i2c-SR1-BTF	flib/stm32f1/i2c.fs	/^2  bit constant i2c-SR1-BTF$/;"	d
i2c-SR1-RxNE	embello/flib/stm32f1/i2c.fs	/^6  bit constant i2c-SR1-RxNE$/;"	d
i2c-SR1-RxNE	flib/./stm32f1/i2c.fs	/^6  bit constant i2c-SR1-RxNE$/;"	d
i2c-SR1-RxNE	flib/stm32f1/i2c.fs	/^6  bit constant i2c-SR1-RxNE$/;"	d
i2c-SR1-SB	embello/flib/stm32f1/i2c.fs	/^0  bit constant i2c-SR1-SB$/;"	d
i2c-SR1-SB	flib/./stm32f1/i2c.fs	/^0  bit constant i2c-SR1-SB$/;"	d
i2c-SR1-SB	flib/stm32f1/i2c.fs	/^0  bit constant i2c-SR1-SB$/;"	d
i2c-SR1-TxE	embello/flib/stm32f1/i2c.fs	/^7  bit constant i2c-SR1-TxE$/;"	d
i2c-SR1-TxE	flib/./stm32f1/i2c.fs	/^7  bit constant i2c-SR1-TxE$/;"	d
i2c-SR1-TxE	flib/stm32f1/i2c.fs	/^7  bit constant i2c-SR1-TxE$/;"	d
i2c-SR1-flag?	embello/flib/stm32f1/i2c.fs	/^: i2c-SR1-flag? ( u -- ) I2C1-SR1 hbit@ ;$/;"	d
i2c-SR1-flag?	flib/./stm32f1/i2c.fs	/^: i2c-SR1-flag? ( u -- ) I2C1-SR1 hbit@ ;$/;"	d
i2c-SR1-flag?	flib/stm32f1/i2c.fs	/^: i2c-SR1-flag? ( u -- ) I2C1-SR1 hbit@ ;$/;"	d
i2c-SR1-wait	embello/flib/stm32f1/i2c.fs	/^: i2c-SR1-wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR1-flag? or until 2drop ; \\ Waits until SR1 meets bit mask or timeout$/;"	d
i2c-SR1-wait	flib/./stm32f1/i2c.fs	/^: i2c-SR1-wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR1-flag? or until 2drop ; \\ Waits until SR1 meets bit mask or timeout$/;"	d
i2c-SR1-wait	flib/stm32f1/i2c.fs	/^: i2c-SR1-wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR1-flag? or until 2drop ; \\ Waits until SR1 meets bit mask or timeout$/;"	d
i2c-SR2-!wait	embello/flib/stm32f1/i2c.fs	/^: i2c-SR2-!wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR2-flag? 0= or until 2drop ; \\ Waits until SR2 has zero on bit mask or timeout$/;"	d
i2c-SR2-!wait	flib/./stm32f1/i2c.fs	/^: i2c-SR2-!wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR2-flag? 0= or until 2drop ; \\ Waits until SR2 has zero on bit mask or timeout$/;"	d
i2c-SR2-!wait	flib/stm32f1/i2c.fs	/^: i2c-SR2-!wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR2-flag? 0= or until 2drop ; \\ Waits until SR2 has zero on bit mask or timeout$/;"	d
i2c-SR2-MSL	embello/flib/stm32f1/i2c.fs	/^ 0 bit constant i2c-SR2-MSL$/;"	d
i2c-SR2-MSL	flib/./stm32f1/i2c.fs	/^ 0 bit constant i2c-SR2-MSL$/;"	d
i2c-SR2-MSL	flib/stm32f1/i2c.fs	/^ 0 bit constant i2c-SR2-MSL$/;"	d
i2c-SR2-flag?	embello/flib/stm32f1/i2c.fs	/^: i2c-SR2-flag? ( u -- ) I2C1-SR2 hbit@ ;$/;"	d
i2c-SR2-flag?	flib/./stm32f1/i2c.fs	/^: i2c-SR2-flag? ( u -- ) I2C1-SR2 hbit@ ;$/;"	d
i2c-SR2-flag?	flib/stm32f1/i2c.fs	/^: i2c-SR2-flag? ( u -- ) I2C1-SR2 hbit@ ;$/;"	d
i2c-SR2-wait	embello/flib/stm32f1/i2c.fs	/^: i2c-SR2-wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR2-flag? or until 2drop ; \\ Waits until SR2 meets bit mask or timeout$/;"	d
i2c-SR2-wait	flib/./stm32f1/i2c.fs	/^: i2c-SR2-wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR2-flag? or until 2drop ; \\ Waits until SR2 meets bit mask or timeout$/;"	d
i2c-SR2-wait	flib/stm32f1/i2c.fs	/^: i2c-SR2-wait ( u -- ) i2c.timeout @ begin 1- 2dup 0= swap i2c-SR2-flag? or until 2drop ; \\ Waits until SR2 meets bit mask or timeout$/;"	d
i2c-START-0	embello/flib/stm32f1/i2c.fs	/^: i2c-START-0 ( -- )   8 bit I2C1-CR1 hbic! ;   \\ Clears START condition$/;"	d
i2c-START-0	flib/./stm32f1/i2c.fs	/^: i2c-START-0 ( -- )   8 bit I2C1-CR1 hbic! ;   \\ Clears START condition$/;"	d
i2c-START-0	flib/stm32f1/i2c.fs	/^: i2c-START-0 ( -- )   8 bit I2C1-CR1 hbic! ;   \\ Clears START condition$/;"	d
i2c-TxE?	embello/flib/stm32f1/i2c.fs	/^: i2c-TxE? ( -- b)   7  bit i2c-SR1-flag? ;     \\ TX register empty$/;"	d
i2c-TxE?	flib/./stm32f1/i2c.fs	/^: i2c-TxE? ( -- b)   7  bit i2c-SR1-flag? ;     \\ TX register empty$/;"	d
i2c-TxE?	flib/stm32f1/i2c.fs	/^: i2c-TxE? ( -- b)   7  bit i2c-SR1-flag? ;     \\ TX register empty$/;"	d
i2c-addr	embello/flib/any/i2c-bb.fs	/^: i2c-addr ( u -- )  \\ start a new I2C transaction$/;"	d
i2c-addr	embello/flib/stm32f1/i2c.fs	/^: i2c-addr ( u --) \\ Start a new transaction and send address in write mode$/;"	d
i2c-addr	embello/flib/stm32l0/i2c.fs	/^: i2c-addr ( u -- )  shl I2C1-CR2 !  i2c-reset ;$/;"	d
i2c-addr	flib/./any/i2c-bb.fs	/^: i2c-addr ( u -- )  \\ start a new I2C transaction$/;"	d
i2c-addr	flib/./stm32f1/i2c.fs	/^: i2c-addr ( u --) \\ Start a new transaction and send address in write mode$/;"	d
i2c-addr	flib/./stm32l0/i2c.fs	/^: i2c-addr ( u -- )  shl I2C1-CR2 !  i2c-reset ;$/;"	d
i2c-addr	flib/any/i2c-bb.fs	/^: i2c-addr ( u -- )  \\ start a new I2C transaction$/;"	d
i2c-addr	flib/stm32f1/i2c.fs	/^: i2c-addr ( u --) \\ Start a new transaction and send address in write mode$/;"	d
i2c-addr	flib/stm32l0/i2c.fs	/^: i2c-addr ( u -- )  shl I2C1-CR2 !  i2c-reset ;$/;"	d
i2c-busy?	embello/flib/stm32f1/i2c.fs	/^: i2c-busy?   ( -- b) I2C1-SR2 h@ 1 bit and 0<> ;$/;"	d
i2c-busy?	flib/./stm32f1/i2c.fs	/^: i2c-busy?   ( -- b) I2C1-SR2 h@ 1 bit and 0<> ;$/;"	d
i2c-busy?	flib/stm32f1/i2c.fs	/^: i2c-busy?   ( -- b) I2C1-SR2 h@ 1 bit and 0<> ;$/;"	d
i2c-flush	embello/flib/any/i2c-bb.fs	/^: i2c-flush ( -- )$/;"	d
i2c-flush	flib/./any/i2c-bb.fs	/^: i2c-flush ( -- )$/;"	d
i2c-flush	flib/any/i2c-bb.fs	/^: i2c-flush ( -- )$/;"	d
i2c-half	embello/flib/any/i2c-bb.fs	/^: i2c-half ( -- )  \\ half-cycle timing delay for I2C$/;"	d
i2c-half	flib/./any/i2c-bb.fs	/^: i2c-half ( -- )  \\ half-cycle timing delay for I2C$/;"	d
i2c-half	flib/any/i2c-bb.fs	/^: i2c-half ( -- )  \\ half-cycle timing delay for I2C$/;"	d
i2c-init	embello/flib/any/i2c-bb.fs	/^: i2c-init ( -- )  \\ initialise bit-banged I2C$/;"	d
i2c-init	embello/flib/stm32f1/i2c.fs	/^: i2c-init$/;"	d
i2c-init	embello/flib/stm32l0/i2c.fs	/^: i2c-init ( -- )  \\ initialise I2C hardware$/;"	d
i2c-init	flib/./any/i2c-bb.fs	/^: i2c-init ( -- )  \\ initialise bit-banged I2C$/;"	d
i2c-init	flib/./stm32f1/i2c.fs	/^: i2c-init$/;"	d
i2c-init	flib/./stm32l0/i2c.fs	/^: i2c-init ( -- )  \\ initialise I2C hardware$/;"	d
i2c-init	flib/any/i2c-bb.fs	/^: i2c-init ( -- )  \\ initialise bit-banged I2C$/;"	d
i2c-init	flib/stm32f1/i2c.fs	/^: i2c-init$/;"	d
i2c-init	flib/stm32l0/i2c.fs	/^: i2c-init ( -- )  \\ initialise I2C hardware$/;"	d
i2c-nak?	embello/flib/stm32f1/i2c.fs	/^: i2c-nak? ( -- b)   10 bit i2c-SR1-flag? ;     \\ Gets AF bit flag$/;"	d
i2c-nak?	flib/./stm32f1/i2c.fs	/^: i2c-nak? ( -- b)   10 bit i2c-SR1-flag? ;     \\ Gets AF bit flag$/;"	d
i2c-nak?	flib/stm32f1/i2c.fs	/^: i2c-nak? ( -- b)   10 bit i2c-SR1-flag? ;     \\ Gets AF bit flag$/;"	d
i2c-probe	embello/flib/stm32f1/i2c.fs	/^: i2c-probe ( c -- nak ) \\ Sets address and waits for ACK or NAK$/;"	d
i2c-probe	flib/./stm32f1/i2c.fs	/^: i2c-probe ( c -- nak ) \\ Sets address and waits for ACK or NAK$/;"	d
i2c-probe	flib/stm32f1/i2c.fs	/^: i2c-probe ( c -- nak ) \\ Sets address and waits for ACK or NAK$/;"	d
i2c-rd	embello/flib/stm32l0/i2c.fs	/^: i2c-rd ( -- )  \\ receive bytes from the I2C interface$/;"	d
i2c-rd	flib/./stm32l0/i2c.fs	/^: i2c-rd ( -- )  \\ receive bytes from the I2C interface$/;"	d
i2c-rd	flib/stm32l0/i2c.fs	/^: i2c-rd ( -- )  \\ receive bytes from the I2C interface$/;"	d
i2c-reset	embello/flib/stm32l0/i2c.fs	/^: i2c-reset ( -- )  i2c.buf i2c.ptr ! ;$/;"	d
i2c-reset	flib/./stm32l0/i2c.fs	/^: i2c-reset ( -- )  i2c.buf i2c.ptr ! ;$/;"	d
i2c-reset	flib/stm32l0/i2c.fs	/^: i2c-reset ( -- )  i2c.buf i2c.ptr ! ;$/;"	d
i2c-sb?	embello/flib/stm32f1/i2c.fs	/^: i2c-sb?  ( -- b)   0  bit i2c-SR1-flag? ;     \\ Gets start bit flag$/;"	d
i2c-sb?	flib/./stm32f1/i2c.fs	/^: i2c-sb?  ( -- b)   0  bit i2c-SR1-flag? ;     \\ Gets start bit flag$/;"	d
i2c-sb?	flib/stm32f1/i2c.fs	/^: i2c-sb?  ( -- b)   0  bit i2c-SR1-flag? ;     \\ Gets start bit flag$/;"	d
i2c-setn	embello/flib/stm32l0/i2c.fs	/^: i2c-setn ( u -- )  \\ prepare for N-byte transfer and reset buffer pointer$/;"	d
i2c-setn	flib/./stm32l0/i2c.fs	/^: i2c-setn ( u -- )  \\ prepare for N-byte transfer and reset buffer pointer$/;"	d
i2c-setn	flib/stm32l0/i2c.fs	/^: i2c-setn ( u -- )  \\ prepare for N-byte transfer and reset buffer pointer$/;"	d
i2c-start	embello/flib/any/i2c-bb.fs	/^: i2c-start ( -- )  \\ with SCL high, change SDA from 1 to 0$/;"	d
i2c-start	embello/flib/stm32f1/i2c.fs	/^: i2c-start ( -- ) \\ set start bit and wait for start condition$/;"	d
i2c-start	embello/flib/stm32l0/i2c.fs	/^: i2c-start ( rd -- )$/;"	d
i2c-start	flib/./any/i2c-bb.fs	/^: i2c-start ( -- )  \\ with SCL high, change SDA from 1 to 0$/;"	d
i2c-start	flib/./stm32f1/i2c.fs	/^: i2c-start ( -- ) \\ set start bit and wait for start condition$/;"	d
i2c-start	flib/./stm32l0/i2c.fs	/^: i2c-start ( rd -- )$/;"	d
i2c-start	flib/any/i2c-bb.fs	/^: i2c-start ( -- )  \\ with SCL high, change SDA from 1 to 0$/;"	d
i2c-start	flib/stm32f1/i2c.fs	/^: i2c-start ( -- ) \\ set start bit and wait for start condition$/;"	d
i2c-start	flib/stm32l0/i2c.fs	/^: i2c-start ( rd -- )$/;"	d
i2c-start!	embello/flib/stm32f1/i2c.fs	/^: i2c-start!  ( -- )    8 bit I2C1-CR1 hbis! ;$/;"	d
i2c-start!	flib/./stm32f1/i2c.fs	/^: i2c-start!  ( -- )    8 bit I2C1-CR1 hbis! ;$/;"	d
i2c-start!	flib/stm32f1/i2c.fs	/^: i2c-start!  ( -- )    8 bit I2C1-CR1 hbis! ;$/;"	d
i2c-stop	embello/flib/any/i2c-bb.fs	/^: i2c-stop  ( -- )  \\ with SCL high, change SDA from 0 to 1$/;"	d
i2c-stop	embello/flib/stm32f1/i2c.fs	/^: i2c-stop  ( -- )  i2c-stop! i2c-SR2-MSL i2c-SR2-!wait ; \\ stop and wait$/;"	d
i2c-stop	embello/flib/stm32l0/i2c.fs	/^: i2c-stop  ( -- )$/;"	d
i2c-stop	flib/./any/i2c-bb.fs	/^: i2c-stop  ( -- )  \\ with SCL high, change SDA from 0 to 1$/;"	d
i2c-stop	flib/./stm32f1/i2c.fs	/^: i2c-stop  ( -- )  i2c-stop! i2c-SR2-MSL i2c-SR2-!wait ; \\ stop and wait$/;"	d
i2c-stop	flib/./stm32l0/i2c.fs	/^: i2c-stop  ( -- )$/;"	d
i2c-stop	flib/any/i2c-bb.fs	/^: i2c-stop  ( -- )  \\ with SCL high, change SDA from 0 to 1$/;"	d
i2c-stop	flib/stm32f1/i2c.fs	/^: i2c-stop  ( -- )  i2c-stop! i2c-SR2-MSL i2c-SR2-!wait ; \\ stop and wait$/;"	d
i2c-stop	flib/stm32l0/i2c.fs	/^: i2c-stop  ( -- )$/;"	d
i2c-stop!	embello/flib/stm32f1/i2c.fs	/^: i2c-stop!   ( -- )    9 bit I2C1-CR1 hbis! ;$/;"	d
i2c-stop!	flib/./stm32f1/i2c.fs	/^: i2c-stop!   ( -- )    9 bit I2C1-CR1 hbis! ;$/;"	d
i2c-stop!	flib/stm32f1/i2c.fs	/^: i2c-stop!   ( -- )    9 bit I2C1-CR1 hbis! ;$/;"	d
i2c-wr	embello/flib/stm32l0/i2c.fs	/^: i2c-wr ( -- )  \\ send bytes to the I2C interface$/;"	d
i2c-wr	flib/./stm32l0/i2c.fs	/^: i2c-wr ( -- )  \\ send bytes to the I2C interface$/;"	d
i2c-wr	flib/stm32l0/i2c.fs	/^: i2c-wr ( -- )  \\ send bytes to the I2C interface$/;"	d
i2c-xfer	embello/flib/any/i2c-bb.fs	/^: i2c-xfer ( u -- nak )  \\ prepare for the reply$/;"	d
i2c-xfer	embello/flib/stm32f1/i2c.fs	/^: i2c-xfer ( u -- nak) \\ prepares for an nbyte reply. Use after i2c-addr. Stops i2c after completion.$/;"	d
i2c-xfer	embello/flib/stm32l0/i2c.fs	/^: i2c-xfer ( u -- nak )$/;"	d
i2c-xfer	flib/./any/i2c-bb.fs	/^: i2c-xfer ( u -- nak )  \\ prepare for the reply$/;"	d
i2c-xfer	flib/./stm32f1/i2c.fs	/^: i2c-xfer ( u -- nak) \\ prepares for an nbyte reply. Use after i2c-addr. Stops i2c after completion.$/;"	d
i2c-xfer	flib/./stm32l0/i2c.fs	/^: i2c-xfer ( u -- nak )$/;"	d
i2c-xfer	flib/any/i2c-bb.fs	/^: i2c-xfer ( u -- nak )  \\ prepare for the reply$/;"	d
i2c-xfer	flib/stm32f1/i2c.fs	/^: i2c-xfer ( u -- nak) \\ prepares for an nbyte reply. Use after i2c-addr. Stops i2c after completion.$/;"	d
i2c-xfer	flib/stm32l0/i2c.fs	/^: i2c-xfer ( u -- nak )$/;"	d
i2c.	embello/flib/any/i2c-bb.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.	embello/flib/stm32f1/i2c.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.	embello/flib/stm32l0/i2c.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.	flib/./any/i2c-bb.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.	flib/./stm32f1/i2c.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.	flib/./stm32l0/i2c.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.	flib/any/i2c-bb.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.	flib/stm32f1/i2c.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.	flib/stm32l0/i2c.fs	/^: i2c. ( -- )  \\ scan and report all I2C devices on the bus$/;"	d
i2c.addr	embello/flib/stm32f1/i2c.fs	/^     0 variable i2c.addr$/;"	d
i2c.addr	flib/./stm32f1/i2c.fs	/^     0 variable i2c.addr$/;"	d
i2c.addr	flib/stm32f1/i2c.fs	/^     0 variable i2c.addr$/;"	d
i2c.adr	embello/flib/any/i2c-bb.fs	/^0 variable i2c.adr$/;"	d
i2c.adr	flib/./any/i2c-bb.fs	/^0 variable i2c.adr$/;"	d
i2c.adr	flib/any/i2c-bb.fs	/^0 variable i2c.adr$/;"	d
i2c.cnt	embello/flib/any/i2c-bb.fs	/^0 variable i2c.cnt$/;"	d
i2c.cnt	embello/flib/stm32f1/i2c.fs	/^     0 variable i2c.cnt$/;"	d
i2c.cnt	flib/./any/i2c-bb.fs	/^0 variable i2c.cnt$/;"	d
i2c.cnt	flib/./stm32f1/i2c.fs	/^     0 variable i2c.cnt$/;"	d
i2c.cnt	flib/any/i2c-bb.fs	/^0 variable i2c.cnt$/;"	d
i2c.cnt	flib/stm32f1/i2c.fs	/^     0 variable i2c.cnt$/;"	d
i2c.nak	embello/flib/any/i2c-bb.fs	/^0 variable i2c.nak$/;"	d
i2c.nak	flib/./any/i2c-bb.fs	/^0 variable i2c.nak$/;"	d
i2c.nak	flib/any/i2c-bb.fs	/^0 variable i2c.nak$/;"	d
i2c.needstop	embello/flib/stm32f1/i2c.fs	/^     0 variable i2c.needstop$/;"	d
i2c.needstop	flib/./stm32f1/i2c.fs	/^     0 variable i2c.needstop$/;"	d
i2c.needstop	flib/stm32f1/i2c.fs	/^     0 variable i2c.needstop$/;"	d
i2c.prv	embello/flib/any/i2c-bb.fs	/^0 variable i2c.prv$/;"	d
i2c.prv	flib/./any/i2c-bb.fs	/^0 variable i2c.prv$/;"	d
i2c.prv	flib/any/i2c-bb.fs	/^0 variable i2c.prv$/;"	d
i2c.ptr	embello/flib/stm32l0/i2c.fs	/^ 0 variable i2c.ptr$/;"	d
i2c.ptr	flib/./stm32l0/i2c.fs	/^ 0 variable i2c.ptr$/;"	d
i2c.ptr	flib/stm32l0/i2c.fs	/^ 0 variable i2c.ptr$/;"	d
i2c.short	embello/i2c/main.fs	/^: i2c.short ( -- )  \\ scan and report all I2C devices on the bus, short format$/;"	d
i2c.timeout	embello/flib/stm32f1/i2c.fs	/^ $ffff variable i2c.timeout$/;"	d
i2c.timeout	flib/./stm32f1/i2c.fs	/^ $ffff variable i2c.timeout$/;"	d
i2c.timeout	flib/stm32f1/i2c.fs	/^ $ffff variable i2c.timeout$/;"	d
i2c>	embello/flib/any/i2c-bb.fs	/^: i2c> ( -- u )  \\ read one byte back from the I2C bus$/;"	d
i2c>	embello/flib/stm32f1/i2c.fs	/^: i2c>$/;"	d
i2c>	embello/flib/stm32l0/i2c.fs	/^: i2c> ( -- u )  i2c++ c@ ;$/;"	d
i2c>	flib/./any/i2c-bb.fs	/^: i2c> ( -- u )  \\ read one byte back from the I2C bus$/;"	d
i2c>	flib/./stm32f1/i2c.fs	/^: i2c>$/;"	d
i2c>	flib/./stm32l0/i2c.fs	/^: i2c> ( -- u )  i2c++ c@ ;$/;"	d
i2c>	flib/any/i2c-bb.fs	/^: i2c> ( -- u )  \\ read one byte back from the I2C bus$/;"	d
i2c>	flib/stm32f1/i2c.fs	/^: i2c>$/;"	d
i2c>	flib/stm32l0/i2c.fs	/^: i2c> ( -- u )  i2c++ c@ ;$/;"	d
i2c>b	embello/flib/any/i2c-bb.fs	/^: i2c>b ( -- b )  \\ receive one I2C bit$/;"	d
i2c>b	flib/./any/i2c-bb.fs	/^: i2c>b ( -- b )  \\ receive one I2C bit$/;"	d
i2c>b	flib/any/i2c-bb.fs	/^: i2c>b ( -- b )  \\ receive one I2C bit$/;"	d
i2c>h	embello/flib/any/i2c-bb.fs	/^: i2c>h ( -- u )  i2c> i2c> 8 lshift or ;$/;"	d
i2c>h	embello/flib/stm32f1/i2c.fs	/^: i2c>h$/;"	d
i2c>h	embello/flib/stm32l0/i2c.fs	/^: i2c>h ( -- u )  i2c> i2c> 8 lshift or ;$/;"	d
i2c>h	flib/./any/i2c-bb.fs	/^: i2c>h ( -- u )  i2c> i2c> 8 lshift or ;$/;"	d
i2c>h	flib/./stm32f1/i2c.fs	/^: i2c>h$/;"	d
i2c>h	flib/./stm32l0/i2c.fs	/^: i2c>h ( -- u )  i2c> i2c> 8 lshift or ;$/;"	d
i2c>h	flib/any/i2c-bb.fs	/^: i2c>h ( -- u )  i2c> i2c> 8 lshift or ;$/;"	d
i2c>h	flib/stm32f1/i2c.fs	/^: i2c>h$/;"	d
i2c>h	flib/stm32l0/i2c.fs	/^: i2c>h ( -- u )  i2c> i2c> 8 lshift or ;$/;"	d
i2c>h.be	embello/flib/i2c/mcp9808.fs	/^: i2c>h.be ( -- u )  i2c> 8 lshift i2c> or ;$/;"	d
i2c>h.be	flib/./i2c/mcp9808.fs	/^: i2c>h.be ( -- u )  i2c> 8 lshift i2c> or ;$/;"	d
i2c>h.be	flib/i2c/mcp9808.fs	/^: i2c>h.be ( -- u )  i2c> 8 lshift i2c> or ;$/;"	d
i2c>h_inv	embello/flib/stm32f1/i2c.fs	/^: i2c>h_inv$/;"	d
i2c>h_inv	flib/./stm32f1/i2c.fs	/^: i2c>h_inv$/;"	d
i2c>h_inv	flib/stm32f1/i2c.fs	/^: i2c>h_inv$/;"	d
i2c?	embello/flib/stm32f1/i2c.fs	/^: i2c? cr I2C1-CR1 h@ hex. I2C1-CR2 h@ hex. I2C1-SR1 h@ hex. I2C1-SR2 h@ hex. ;$/;"	d
i2c?	embello/flib/stm32l0/i2c.fs	/^: i2c? ( -- )$/;"	d
i2c?	flib/./stm32f1/i2c.fs	/^: i2c? cr I2C1-CR1 h@ hex. I2C1-CR2 h@ hex. I2C1-SR1 h@ hex. I2C1-SR2 h@ hex. ;$/;"	d
i2c?	flib/./stm32l0/i2c.fs	/^: i2c? ( -- )$/;"	d
i2c?	flib/stm32f1/i2c.fs	/^: i2c? cr I2C1-CR1 h@ hex. I2C1-CR2 h@ hex. I2C1-SR1 h@ hex. I2C1-SR2 h@ hex. ;$/;"	d
i2c?	flib/stm32l0/i2c.fs	/^: i2c? ( -- )$/;"	d
id?	embello/flib/i2c/bno055.fs	/^: id? ( -- f ) 0 page 0 reg@ $a0 = ; \\ verify the CHIP ID$/;"	d
id?	flib/./i2c/bno055.fs	/^: id? ( -- f ) 0 page 0 reg@ $a0 = ; \\ verify the CHIP ID$/;"	d
id?	flib/i2c/bno055.fs	/^: id? ( -- f ) 0 page 0 reg@ $a0 = ; \\ verify the CHIP ID$/;"	d
idle	embello/flib/mecrisp/multi.fs	/^: idle ( task -- ) 1 cells + false swap ! ;  \\ Idle a random task (IRQ safe)$/;"	d
idle	embello/jz4/ex/rot8.fs	/^   0 variable idle$/;"	d
idle	flib/./mecrisp/multi.fs	/^: idle ( task -- ) 1 cells + false swap ! ;  \\ Idle a random task (IRQ safe)$/;"	d
idle	flib/mecrisp/multi.fs	/^: idle ( task -- ) 1 cells + false swap ! ;  \\ Idle a random task (IRQ safe)$/;"	d
if-send	embello/jz4/ex/rot8.fs	/^: if-send ( f -- )  if 7 <pkt counter @ +pkt pkt>rf rf-sleep then ;$/;"	d
imm12.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm12. ( Opcode -- Opcode )$/;"	d
imm12.	flib/./mecrisp/disassembler-m3.fs	/^: imm12. ( Opcode -- Opcode )$/;"	d
imm12.	flib/mecrisp/disassembler-m3.fs	/^: imm12. ( Opcode -- Opcode )$/;"	d
imm3.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm3. ( Opcode Position -- Opcode ) over swap rshift  $7  and const. ;$/;"	d
imm3.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm3. ( Opcode Position -- Opcode ) over swap rshift  $7  and const. ;$/;"	d
imm3.	flib/./mecrisp/disassembler-m0.fs	/^: imm3. ( Opcode Position -- Opcode ) over swap rshift  $7  and const. ;$/;"	d
imm3.	flib/./mecrisp/disassembler-m3.fs	/^: imm3. ( Opcode Position -- Opcode ) over swap rshift  $7  and const. ;$/;"	d
imm3.	flib/mecrisp/disassembler-m0.fs	/^: imm3. ( Opcode Position -- Opcode ) over swap rshift  $7  and const. ;$/;"	d
imm3.	flib/mecrisp/disassembler-m3.fs	/^: imm3. ( Opcode Position -- Opcode ) over swap rshift  $7  and const. ;$/;"	d
imm3<<1.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm3<<1. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl const. ;$/;"	d
imm3<<1.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm3<<1. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl const. ;$/;"	d
imm3<<1.	flib/./mecrisp/disassembler-m0.fs	/^: imm3<<1. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl const. ;$/;"	d
imm3<<1.	flib/./mecrisp/disassembler-m3.fs	/^: imm3<<1. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl const. ;$/;"	d
imm3<<1.	flib/mecrisp/disassembler-m0.fs	/^: imm3<<1. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl const. ;$/;"	d
imm3<<1.	flib/mecrisp/disassembler-m3.fs	/^: imm3<<1. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl const. ;$/;"	d
imm3<<2.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm3<<2. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl shl const. ;$/;"	d
imm3<<2.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm3<<2. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl shl const. ;$/;"	d
imm3<<2.	flib/./mecrisp/disassembler-m0.fs	/^: imm3<<2. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl shl const. ;$/;"	d
imm3<<2.	flib/./mecrisp/disassembler-m3.fs	/^: imm3<<2. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl shl const. ;$/;"	d
imm3<<2.	flib/mecrisp/disassembler-m0.fs	/^: imm3<<2. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl shl const. ;$/;"	d
imm3<<2.	flib/mecrisp/disassembler-m3.fs	/^: imm3<<2. ( Opcode Position -- Opcode ) over swap rshift  $7  and shl shl const. ;$/;"	d
imm5.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm5. ( Opcode Position -- Opcode ) over swap rshift  $1F and const. ;$/;"	d
imm5.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm5. ( Opcode Position -- Opcode ) over swap rshift  $1F and const. ;$/;"	d
imm5.	flib/./mecrisp/disassembler-m0.fs	/^: imm5. ( Opcode Position -- Opcode ) over swap rshift  $1F and const. ;$/;"	d
imm5.	flib/./mecrisp/disassembler-m3.fs	/^: imm5. ( Opcode Position -- Opcode ) over swap rshift  $1F and const. ;$/;"	d
imm5.	flib/mecrisp/disassembler-m0.fs	/^: imm5. ( Opcode Position -- Opcode ) over swap rshift  $1F and const. ;$/;"	d
imm5.	flib/mecrisp/disassembler-m3.fs	/^: imm5. ( Opcode Position -- Opcode ) over swap rshift  $1F and const. ;$/;"	d
imm5<<1.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm5<<1. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl const. ;$/;"	d
imm5<<1.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm5<<1. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl const. ;$/;"	d
imm5<<1.	flib/./mecrisp/disassembler-m0.fs	/^: imm5<<1. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl const. ;$/;"	d
imm5<<1.	flib/./mecrisp/disassembler-m3.fs	/^: imm5<<1. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl const. ;$/;"	d
imm5<<1.	flib/mecrisp/disassembler-m0.fs	/^: imm5<<1. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl const. ;$/;"	d
imm5<<1.	flib/mecrisp/disassembler-m3.fs	/^: imm5<<1. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl const. ;$/;"	d
imm5<<2.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm5<<2. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl shl const. ;$/;"	d
imm5<<2.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm5<<2. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl shl const. ;$/;"	d
imm5<<2.	flib/./mecrisp/disassembler-m0.fs	/^: imm5<<2. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl shl const. ;$/;"	d
imm5<<2.	flib/./mecrisp/disassembler-m3.fs	/^: imm5<<2. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl shl const. ;$/;"	d
imm5<<2.	flib/mecrisp/disassembler-m0.fs	/^: imm5<<2. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl shl const. ;$/;"	d
imm5<<2.	flib/mecrisp/disassembler-m3.fs	/^: imm5<<2. ( Opcode Position -- Opcode ) over swap rshift  $1F and shl shl const. ;$/;"	d
imm7<<2.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm7<<2. ( Opcode Position -- Opcode ) over swap rshift  $7F and shl shl const. ;$/;"	d
imm7<<2.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm7<<2. ( Opcode Position -- Opcode ) over swap rshift  $7F and shl shl const. ;$/;"	d
imm7<<2.	flib/./mecrisp/disassembler-m0.fs	/^: imm7<<2. ( Opcode Position -- Opcode ) over swap rshift  $7F and shl shl const. ;$/;"	d
imm7<<2.	flib/./mecrisp/disassembler-m3.fs	/^: imm7<<2. ( Opcode Position -- Opcode ) over swap rshift  $7F and shl shl const. ;$/;"	d
imm7<<2.	flib/mecrisp/disassembler-m0.fs	/^: imm7<<2. ( Opcode Position -- Opcode ) over swap rshift  $7F and shl shl const. ;$/;"	d
imm7<<2.	flib/mecrisp/disassembler-m3.fs	/^: imm7<<2. ( Opcode Position -- Opcode ) over swap rshift  $7F and shl shl const. ;$/;"	d
imm8.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm8. ( Opcode Position -- Opcode ) over swap rshift  $FF and const. ;$/;"	d
imm8.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm8. ( Opcode Position -- Opcode ) over swap rshift  $FF and const. ;$/;"	d
imm8.	flib/./mecrisp/disassembler-m0.fs	/^: imm8. ( Opcode Position -- Opcode ) over swap rshift  $FF and const. ;$/;"	d
imm8.	flib/./mecrisp/disassembler-m3.fs	/^: imm8. ( Opcode Position -- Opcode ) over swap rshift  $FF and const. ;$/;"	d
imm8.	flib/mecrisp/disassembler-m0.fs	/^: imm8. ( Opcode Position -- Opcode ) over swap rshift  $FF and const. ;$/;"	d
imm8.	flib/mecrisp/disassembler-m3.fs	/^: imm8. ( Opcode Position -- Opcode ) over swap rshift  $FF and const. ;$/;"	d
imm8<<1.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm8<<1. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl const. ;$/;"	d
imm8<<1.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm8<<1. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl const. ;$/;"	d
imm8<<1.	flib/./mecrisp/disassembler-m0.fs	/^: imm8<<1. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl const. ;$/;"	d
imm8<<1.	flib/./mecrisp/disassembler-m3.fs	/^: imm8<<1. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl const. ;$/;"	d
imm8<<1.	flib/mecrisp/disassembler-m0.fs	/^: imm8<<1. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl const. ;$/;"	d
imm8<<1.	flib/mecrisp/disassembler-m3.fs	/^: imm8<<1. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl const. ;$/;"	d
imm8<<2.	embello/flib/mecrisp/disassembler-m0.fs	/^: imm8<<2. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl shl const. ;$/;"	d
imm8<<2.	embello/flib/mecrisp/disassembler-m3.fs	/^: imm8<<2. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl shl const. ;$/;"	d
imm8<<2.	flib/./mecrisp/disassembler-m0.fs	/^: imm8<<2. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl shl const. ;$/;"	d
imm8<<2.	flib/./mecrisp/disassembler-m3.fs	/^: imm8<<2. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl shl const. ;$/;"	d
imm8<<2.	flib/mecrisp/disassembler-m0.fs	/^: imm8<<2. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl shl const. ;$/;"	d
imm8<<2.	flib/mecrisp/disassembler-m3.fs	/^: imm8<<2. ( Opcode Position -- Opcode ) over swap rshift  $FF and shl shl const. ;$/;"	d
imu-loop	tracker/tracker.fs	/^: imu-loop ( -- )$/;"	d
imulen	tracker/tracker.fs	/^   constant imulen \\ length of IMU messages$/;"	d
imumax	tracker/tracker.fs	/^ 4 constant imumax \\ max number of buffered IMU msgs$/;"	d
imunum	tracker/tracker.fs	/^        1+ dup constant imunum  \\ number of IMU messages in buffer$/;"	d
init	central/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/cag/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/ezr/asm/hello.asm	/^init:	ld  b, 0$/;"	l
init	embello/ezr/asm/hellow.asm	/^init:	ld  b, 0$/;"	l
init	embello/g6s/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/g6u/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/i2c/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/i2c/freeze.fs	/^: init init unattended main ;$/;"	d
init	embello/jz1/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/jz1/freeze.fs	/^: init init unattended main ;$/;"	d
init	embello/jz3/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/jz3/freeze.fs	/^: init init unattended main ;$/;"	d
init	embello/jz4/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/jz4/ex/rot6.fs	/^: init init unattended read-enc ;$/;"	d
init	embello/jz4/ex/rot7.fs	/^: init init unattended read-enc ;$/;"	d
init	embello/jz4/ex/rot8.fs	/^: init init unattended read-enc ;$/;"	d
init	embello/jz4/freeze.fs	/^: init init ( unattended ) blip ;$/;"	d
init	embello/lnr/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/lnr/freeze.fs	/^: init init unattended main ;$/;"	d
init	embello/prc2/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/qld/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/rvm/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/rvm/freeze.fs	/^: init init unattended main ;$/;"	d
init	embello/sic/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/suf/f-common.fs	/^: init ( -- )$/;"	d
init	embello/suf/f-hotcbo.fs	/^: init ( -- )$/;"	d
init	embello/suf/f-maplemini.fs	/^: init ( -- )$/;"	d
init	embello/suf/f-olimexino.fs	/^: init ( -- )$/;"	d
init	embello/suf/f-olip103.fs	/^: init ( -- )$/;"	d
init	embello/suf/fz-port103z.fs	/^: init ( -- )$/;"	d
init	embello/ten/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/ten/freeze.fs	/^: init init unattended echo ;$/;"	d
init	embello/tex/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	embello/trf/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	fanctrl/bug.fs	/^: init init$/;"	d
init	fanctrl/freeze.fs	/^: init init unattended 3blinks main ;$/;"	d
init	follower/freeze.fs	/^: init init unattended 3blinks main ;$/;"	d
init	jz1/./board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	jz1/./freeze.fs	/^: init init unattended main ;$/;"	d
init	jz1/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	jz1/freeze.fs	/^: init init unattended main ;$/;"	d
init	jz3/./board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	jz3/./freeze.fs	/^: init init unattended main ;$/;"	d
init	jz3/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	jz3/freeze.fs	/^: init init unattended main ;$/;"	d
init	oledtemp/board.fs	/^: init ( -- )  \\ board initialisation$/;"	d
init	oledtemp/freeze.fs	/^: init init unattended 3blinks main ;$/;"	d
init	temp/freeze.fs	/^: init init unattended 3blinks main ;$/;"	d
init	tracker/freeze.fs	/^: init init unattended 3blinks main ;$/;"	d
init-all	embello/ezr/vdisk.fs	/^: init-all$/;"	d
init-hw	fanctrl/fanctrl.fs	/^: init-hw$/;"	d
init-hw	follower/follower.fs	/^: init-hw$/;"	d
init-hw	imu-test/imu.fs	/^: init-hw$/;"	d
init-hw	oledtemp/rftemp.fs	/^: init-hw$/;"	d
init-hw	temp/rftemp.fs	/^: init-hw$/;"	d
init-hw	tracker/oldtracker.fs	/^: init-hw$/;"	d
init-hw	tracker/tracker.fs	/^: init-hw$/;"	d
init-leds	embello/zeb/dev.fs	/^: init-leds$/;"	d
init-ring	embello/flib/any/ring.fs	/^: init-ring ( addr size -- )  \\ initialise a ring buffer$/;"	d
init-ring	flib/./any/ring.fs	/^: init-ring ( addr size -- )  \\ initialise a ring buffer$/;"	d
init-ring	flib/any/ring.fs	/^: init-ring ( addr size -- )  \\ initialise a ring buffer$/;"	d
inptr	embello/flib/uart/gps-test.fs	/^0 variable inptr$/;"	d
inptr	flib/./uart/gps-test.fs	/^0 variable inptr$/;"	d
inptr	flib/uart/gps-test.fs	/^0 variable inptr$/;"	d
inptr	follower/hc05-test.fs	/^0 variable inptr \\ points to next char to consume$/;"	d
inptr	tracker/tracker-test.fs	/^0 variable inptr$/;"	d
ins1	embello/ezr/pokemon.fs	/^: ins1 ( u1 -- )              $25 >zdi ;$/;"	d
ins2	embello/ezr/pokemon.fs	/^: ins2 ( u1 u2 -- )           $24 >zdi ins1 ;$/;"	d
ins3	embello/ezr/pokemon.fs	/^: ins3 ( u1 u2 u3 -- )        $23 >zdi ins2 ;$/;"	d
ins4	embello/ezr/pokemon.fs	/^: ins4 ( u1 u2 u3 u4 -- )     $22 >zdi ins3 ;$/;"	d
ins5	embello/ezr/pokemon.fs	/^: ins5 ( u1 u2 u3 u4 u5 -- )  $21 >zdi ins4 ;$/;"	d
insert	embello/flib/mecrisp/multi.fs	/^: insert ( task -- ) \\ Insert a task into the round-robin list$/;"	d
insert	flib/./mecrisp/multi.fs	/^: insert ( task -- ) \\ Insert a task into the round-robin list$/;"	d
insert	flib/mecrisp/multi.fs	/^: insert ( task -- ) \\ Insert a task into the round-robin list$/;"	d
int	embello/flib/any/varint.fs	/^\\ variable int encoding for use in RF packets. Encodes up to 32-bit integers using$/;"	d
int	flib/./any/varint.fs	/^\\ variable int encoding for use in RF packets. Encodes up to 32-bit integers using$/;"	d
int	flib/any/varint.fs	/^\\ variable int encoding for use in RF packets. Encodes up to 32-bit integers using$/;"	d
int2temp	embello/sic/main.fs	/^: int2temp ( s -- s )$/;"	d
interval	embello/flib/any/pid.fs	/^0    variable interval     \\ sampling interval (in ms)$/;"	d
interval	flib/./any/pid.fs	/^0    variable interval     \\ sampling interval (in ms)$/;"	d
interval	flib/any/pid.fs	/^0    variable interval     \\ sampling interval (in ms)$/;"	d
io	embello/flib/stm32f1/io-orig.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	embello/flib/stm32f1/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	embello/flib/stm32f4/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	embello/flib/stm32l0/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	flib/./stm32f1/io-orig.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	flib/./stm32f1/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	flib/./stm32f4/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	flib/./stm32l0/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	flib/stm32f1/io-orig.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	flib/stm32f1/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	flib/stm32f4/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io	flib/stm32l0/io.fs	/^: io ( port# pin# -- pin )  \\ combine port and pin into single int$/;"	d
io!	embello/flib/stm32f1/io-orig.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	embello/flib/stm32f1/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	embello/flib/stm32f4/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	embello/flib/stm32l0/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	flib/./stm32f1/io-orig.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	flib/./stm32f1/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	flib/./stm32f4/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	flib/./stm32l0/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	flib/stm32f1/io-orig.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	flib/stm32f1/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	flib/stm32f4/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io!	flib/stm32l0/io.fs	/^: io! ( f pin -- )  \\ set pin value$/;"	d
io#	embello/flib/stm32f1/io-orig.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	embello/flib/stm32f1/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	embello/flib/stm32f4/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	embello/flib/stm32l0/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	flib/./stm32f1/io-orig.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	flib/./stm32f1/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	flib/./stm32f4/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	flib/./stm32l0/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	flib/stm32f1/io-orig.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	flib/stm32f1/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	flib/stm32f4/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io#	flib/stm32l0/io.fs	/^: io# ( pin -- u )  \\ convert pin to bit position$/;"	d
io-base	embello/flib/stm32f1/io-orig.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	embello/flib/stm32f1/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	embello/flib/stm32f4/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	embello/flib/stm32l0/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	flib/./stm32f1/io-orig.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	flib/./stm32f1/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	flib/./stm32f4/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	flib/./stm32l0/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	flib/stm32f1/io-orig.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	flib/stm32f1/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	flib/stm32f4/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-base	flib/stm32l0/io.fs	/^: io-base ( pin -- addr )  \\ convert pin to GPIO base address$/;"	d
io-config	embello/flib/stm32l0/io.fs	/^: io-config ( bits pin offset -- )  \\ replace 2 bits in specified h\/w register$/;"	d
io-config	flib/./stm32l0/io.fs	/^: io-config ( bits pin offset -- )  \\ replace 2 bits in specified h\/w register$/;"	d
io-config	flib/stm32l0/io.fs	/^: io-config ( bits pin offset -- )  \\ replace 2 bits in specified h\/w register$/;"	d
io-init	embello/eee/core.fs	/^: io-init$/;"	d
io-mask	embello/flib/stm32f1/io-orig.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	embello/flib/stm32f1/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	embello/flib/stm32f4/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	embello/flib/stm32l0/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	flib/./stm32f1/io-orig.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	flib/./stm32f1/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	flib/./stm32f4/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	flib/./stm32l0/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	flib/stm32f1/io-orig.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	flib/stm32f1/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	flib/stm32f4/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mask	flib/stm32l0/io.fs	/^: io-mask ( pin -- u )  \\ convert pin to bit mask$/;"	d
io-mode!	embello/flib/stm32f1/io-orig.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	embello/flib/stm32f1/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	embello/flib/stm32f4/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	embello/flib/stm32l0/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	flib/./stm32f1/io-orig.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	flib/./stm32f1/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	flib/./stm32f4/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	flib/./stm32l0/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	flib/stm32f1/io-orig.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	flib/stm32f1/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	flib/stm32f4/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-mode!	flib/stm32l0/io.fs	/^: io-mode! ( mode pin -- )  \\ set the CNF and MODE bits for a pin$/;"	d
io-modes!	embello/flib/stm32f1/io-orig.fs	/^: io-modes! ( mode pin mask -- )  \\ shorthand to config multiple pins of a port$/;"	d
io-modes!	embello/flib/stm32f1/io.fs	/^: io-modes! ( mode pin mask -- )  \\ shorthand to config multiple pins of a port$/;"	d
io-modes!	flib/./stm32f1/io-orig.fs	/^: io-modes! ( mode pin mask -- )  \\ shorthand to config multiple pins of a port$/;"	d
io-modes!	flib/./stm32f1/io.fs	/^: io-modes! ( mode pin mask -- )  \\ shorthand to config multiple pins of a port$/;"	d
io-modes!	flib/stm32f1/io-orig.fs	/^: io-modes! ( mode pin mask -- )  \\ shorthand to config multiple pins of a port$/;"	d
io-modes!	flib/stm32f1/io.fs	/^: io-modes! ( mode pin mask -- )  \\ shorthand to config multiple pins of a port$/;"	d
io-port	embello/flib/stm32f1/io-orig.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	embello/flib/stm32f1/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	embello/flib/stm32f4/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	embello/flib/stm32l0/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	flib/./stm32f1/io-orig.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	flib/./stm32f1/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	flib/./stm32f4/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	flib/./stm32l0/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	flib/stm32f1/io-orig.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	flib/stm32f1/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	flib/stm32f4/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-port	flib/stm32l0/io.fs	/^: io-port ( pin -- u )  \\ convert pin to port number (A=0, B=1, etc)$/;"	d
io-ports	embello/bme/dev.fs	/^4 constant io-ports  \\ A..D$/;"	d
io-ports	embello/cag/board.fs	/^4 constant io-ports  \\ A..D$/;"	d
io-ports	embello/g6s/board.fs	/^4 constant io-ports  \\ A..D$/;"	d
io-ports	embello/sic/board.fs	/^4 constant io-ports  \\ A..D$/;"	d
io-ports	embello/zeb/dev.fs	/^7 constant io-ports  \\ A..G$/;"	d
io-test	embello/eee/core.fs	/^: io-test$/;"	d
io.	embello/flib/stm32f1/io-orig.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	embello/flib/stm32f1/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	embello/flib/stm32f4/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	embello/flib/stm32l0/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	flib/./stm32f1/io-orig.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	flib/./stm32f1/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	flib/./stm32f4/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	flib/./stm32l0/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	flib/stm32f1/io-orig.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	flib/stm32f1/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	flib/stm32f4/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.	flib/stm32l0/io.fs	/^: io. ( pin -- )  \\ display readable GPIO registers associated with a pin$/;"	d
io.all	embello/flib/stm32f1/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	embello/flib/stm32f4/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	embello/flib/stm32f7/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	embello/flib/stm32l0/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	flib/./stm32f1/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	flib/./stm32f4/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	flib/./stm32f7/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	flib/./stm32l0/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	flib/stm32f1/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	flib/stm32f4/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	flib/stm32f7/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.all	flib/stm32l0/hal.fs	/^: io.all ( -- )  \\ display all the readable GPIO registers$/;"	d
io.out0	embello/jz1/ex/iorate.fs	/^: io.out0       IO.PIN 16 + bit  IO.GPIO GPIO.BSRR    + !    ;$/;"	d
io.out0	jz1/./ex/iorate.fs	/^: io.out0       IO.PIN 16 + bit  IO.GPIO GPIO.BSRR    + !    ;$/;"	d
io.out0	jz1/ex/iorate.fs	/^: io.out0       IO.PIN 16 + bit  IO.GPIO GPIO.BSRR    + !    ;$/;"	d
io.out1	embello/jz1/ex/iorate.fs	/^: io.out1       IO.PIN      bit  IO.GPIO GPIO.BSRR    + !    ;$/;"	d
io.out1	jz1/./ex/iorate.fs	/^: io.out1       IO.PIN      bit  IO.GPIO GPIO.BSRR    + !    ;$/;"	d
io.out1	jz1/ex/iorate.fs	/^: io.out1       IO.PIN      bit  IO.GPIO GPIO.BSRR    + !    ;$/;"	d
io@	embello/flib/stm32f1/io-orig.fs	/^: io@ ( pin -- f )  \\ get pin value (true or false)$/;"	d
io@	embello/flib/stm32f1/io.fs	/^: io@ ( pin -- f )  \\ get pin value (0 or -1)$/;"	d
io@	embello/flib/stm32f4/io.fs	/^: io@ ( pin -- u )  \\ get pin value (0 or 1)$/;"	d
io@	embello/flib/stm32l0/io.fs	/^: io@ ( pin -- u )  \\ get pin value (0 or -1)$/;"	d
io@	flib/./stm32f1/io-orig.fs	/^: io@ ( pin -- f )  \\ get pin value (true or false)$/;"	d
io@	flib/./stm32f1/io.fs	/^: io@ ( pin -- f )  \\ get pin value (0 or -1)$/;"	d
io@	flib/./stm32f4/io.fs	/^: io@ ( pin -- u )  \\ get pin value (0 or 1)$/;"	d
io@	flib/./stm32l0/io.fs	/^: io@ ( pin -- u )  \\ get pin value (0 or -1)$/;"	d
io@	flib/stm32f1/io-orig.fs	/^: io@ ( pin -- f )  \\ get pin value (true or false)$/;"	d
io@	flib/stm32f1/io.fs	/^: io@ ( pin -- f )  \\ get pin value (0 or -1)$/;"	d
io@	flib/stm32f4/io.fs	/^: io@ ( pin -- u )  \\ get pin value (0 or 1)$/;"	d
io@	flib/stm32l0/io.fs	/^: io@ ( pin -- u )  \\ get pin value (0 or -1)$/;"	d
ioc!	embello/flib/stm32f1/io-orig.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	embello/flib/stm32f1/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	embello/flib/stm32f4/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	embello/flib/stm32l0/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	flib/./stm32f1/io-orig.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	flib/./stm32f1/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	flib/./stm32f4/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	flib/./stm32l0/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	flib/stm32f1/io-orig.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	flib/stm32f1/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	flib/stm32f4/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ioc!	flib/stm32l0/io.fs	/^: ioc! ( pin -- )  \\ clear pin to low$/;"	d
ios!	embello/flib/stm32f1/io-orig.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	embello/flib/stm32f1/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	embello/flib/stm32f4/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	embello/flib/stm32l0/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	flib/./stm32f1/io-orig.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	flib/./stm32f1/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	flib/./stm32f4/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	flib/./stm32l0/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	flib/stm32f1/io-orig.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	flib/stm32f1/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	flib/stm32f4/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
ios!	flib/stm32l0/io.fs	/^: ios! ( pin -- )  \\ set pin to high$/;"	d
iox!	embello/flib/stm32f1/io-orig.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
iox!	embello/flib/stm32f1/io.fs	/^: iox! ( pin -- )  \\ toggle pin, not interrupt safe$/;"	d
iox!	embello/flib/stm32f4/io.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
iox!	embello/flib/stm32l0/io.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
iox!	flib/./stm32f1/io-orig.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
iox!	flib/./stm32f1/io.fs	/^: iox! ( pin -- )  \\ toggle pin, not interrupt safe$/;"	d
iox!	flib/./stm32f4/io.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
iox!	flib/./stm32l0/io.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
iox!	flib/stm32f1/io-orig.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
iox!	flib/stm32f1/io.fs	/^: iox! ( pin -- )  \\ toggle pin, not interrupt safe$/;"	d
iox!	flib/stm32f4/io.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
iox!	flib/stm32l0/io.fs	/^: iox! ( pin -- )  \\ toggle pin$/;"	d
is	embello/flib/mecrisp/disassembler-m3.fs	/^      \\ Otherwise, the 32-bit constant is rotated left until the most significant bit is bit[7]. The size of the left$/;"	d
is	flib/./mecrisp/disassembler-m3.fs	/^      \\ Otherwise, the 32-bit constant is rotated left until the most significant bit is bit[7]. The size of the left$/;"	d
is	flib/mecrisp/disassembler-m3.fs	/^      \\ Otherwise, the 32-bit constant is rotated left until the most significant bit is bit[7]. The size of the left$/;"	d
is-cr?	follower/hc05.fs	/^: is-cr? ( c -- f ) RET = ;$/;"	d
iter	oledtemp/rftemp.fs	/^: iter$/;"	d
iter	temp/rftemp.fs	/^: iter$/;"	d
jtag-deinit	embello/flib/stm32f1/hal.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
jtag-deinit	embello/g6u/board.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
jtag-deinit	embello/prc2/board.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
jtag-deinit	embello/qld/board.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
jtag-deinit	embello/ten/board.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
jtag-deinit	embello/tex/board.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
jtag-deinit	embello/trf/board.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
jtag-deinit	flib/./stm32f1/hal.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
jtag-deinit	flib/stm32f1/hal.fs	/^: jtag-deinit ( -- )  \\ disable JTAG on PB3 PB4 PA15$/;"	d
k	follower/hc05-test.fs	/^: k s" OK" ; k set-input read-line 2 =always$/;"	d
key-in	embello/flib/any/aes128.fs	/^: key-in ( caddr -- )$/;"	d
key-in	flib/./any/aes128.fs	/^: key-in ( caddr -- )$/;"	d
key-in	flib/any/aes128.fs	/^: key-in ( caddr -- )$/;"	d
l	embello/ezr/dev.fs	/^: l  \\ send greeting over serial, see asm\/hellow.asm, in low mem$/;"	d
last-input	embello/flib/any/pid.fs	/^0    variable last-input   \\ last seen input$/;"	d
last-input	flib/./any/pid.fs	/^0    variable last-input   \\ last seen input$/;"	d
last-input	flib/any/pid.fs	/^0    variable last-input   \\ last seen input$/;"	d
last-status	fanctrl/fanctrl.fs	/^0 variable last-status$/;"	d
lcd!c	embello/flib/i2c/ssd1306.fs	/^: lcd!c ( v -- )  \\ send a command to the lcd$/;"	d
lcd!c	flib/./i2c/ssd1306.fs	/^: lcd!c ( v -- )  \\ send a command to the lcd$/;"	d
lcd!c	flib/i2c/ssd1306.fs	/^: lcd!c ( v -- )  \\ send a command to the lcd$/;"	d
lcd-bufpos	embello/i2c/ex/font.fs	/^: lcd-bufpos ( -- addr )$/;"	d
lcd-command	embello/flib/spi/lcd-pcd8544.fs	/^: lcd-command ( command -- ) LCD_CD ioc! +spi >spi -spi ;$/;"	d
lcd-command	flib/./spi/lcd-pcd8544.fs	/^: lcd-command ( command -- ) LCD_CD ioc! +spi >spi -spi ;$/;"	d
lcd-command	flib/spi/lcd-pcd8544.fs	/^: lcd-command ( command -- ) LCD_CD ioc! +spi >spi -spi ;$/;"	d
lcd-data	embello/flib/spi/lcd-pcd8544.fs	/^: lcd-data ( data -- ) LCD_CD ios! +spi >spi -spi ;$/;"	d
lcd-data	flib/./spi/lcd-pcd8544.fs	/^: lcd-data ( data -- ) LCD_CD ios! +spi >spi -spi ;$/;"	d
lcd-data	flib/spi/lcd-pcd8544.fs	/^: lcd-data ( data -- ) LCD_CD ios! +spi >spi -spi ;$/;"	d
lcd-emit	embello/i2c/ex/font.fs	/^: lcd-emit ( c -- )  \\ switch the output to the OLED, cr's move to next line$/;"	d
lcd-emit	embello/i2c/ex/oled.fs	/^: lcd-emit ( c -- )  \\ switch the output to the OLED, cr's move to next line$/;"	d
lcd-emit	embello/i2c/main.fs	/^: lcd-emit ( c -- )  \\ switch the output to the OLED, cr's move to next line$/;"	d
lcd-init	embello/flib/i2c/ssd1306.fs	/^: lcd-init ( -- )  \\ initialise the oled display$/;"	d
lcd-init	embello/flib/spi/lcd-pcd8544.fs	/^: lcd-init ( -- ) $/;"	d
lcd-init	flib/./i2c/ssd1306.fs	/^: lcd-init ( -- )  \\ initialise the oled display$/;"	d
lcd-init	flib/./spi/lcd-pcd8544.fs	/^: lcd-init ( -- ) $/;"	d
lcd-init	flib/i2c/ssd1306.fs	/^: lcd-init ( -- )  \\ initialise the oled display$/;"	d
lcd-init	flib/spi/lcd-pcd8544.fs	/^: lcd-init ( -- ) $/;"	d
lcd-invert	embello/flib/spi/lcd-pcd8544.fs	/^: lcd-invert ( -- ) DISPLAYCONTROL DISPLAYINVERTED or lcd-command  ;$/;"	d
lcd-invert	flib/./spi/lcd-pcd8544.fs	/^: lcd-invert ( -- ) DISPLAYCONTROL DISPLAYINVERTED or lcd-command  ;$/;"	d
lcd-invert	flib/spi/lcd-pcd8544.fs	/^: lcd-invert ( -- ) DISPLAYCONTROL DISPLAYINVERTED or lcd-command  ;$/;"	d
lcd-normal	embello/flib/spi/lcd-pcd8544.fs	/^: lcd-normal ( -- ) DISPLAYCONTROL DISPLAYNORMAL or lcd-command  ;$/;"	d
lcd-normal	flib/./spi/lcd-pcd8544.fs	/^: lcd-normal ( -- ) DISPLAYCONTROL DISPLAYNORMAL or lcd-command  ;$/;"	d
lcd-normal	flib/spi/lcd-pcd8544.fs	/^: lcd-normal ( -- ) DISPLAYCONTROL DISPLAYNORMAL or lcd-command  ;$/;"	d
lcd-pins	embello/flib/spi/lcd-pcd8544.fs	/^: lcd-pins ( -- ) OMODE-PP dup LCD_CD io-mode! dup LCD_RESET io-mode! drop ;$/;"	d
lcd-pins	flib/./spi/lcd-pcd8544.fs	/^: lcd-pins ( -- ) OMODE-PP dup LCD_CD io-mode! dup LCD_RESET io-mode! drop ;$/;"	d
lcd-pins	flib/spi/lcd-pcd8544.fs	/^: lcd-pins ( -- ) OMODE-PP dup LCD_CD io-mode! dup LCD_RESET io-mode! drop ;$/;"	d
lcd-put-byte	embello/flib/spi/lcd-pcd8544.fs	/^: lcd-put-byte ( r x y -- ) $/;"	d
lcd-put-byte	flib/./spi/lcd-pcd8544.fs	/^: lcd-put-byte ( r x y -- ) $/;"	d
lcd-put-byte	flib/spi/lcd-pcd8544.fs	/^: lcd-put-byte ( r x y -- ) $/;"	d
lcd-reset	embello/flib/spi/lcd-pcd8544.fs	/^: lcd-reset ( -- ) LCD_RESET dup ioc! 500 ms ios! 500 ms ;$/;"	d
lcd-reset	flib/./spi/lcd-pcd8544.fs	/^: lcd-reset ( -- ) LCD_RESET dup ioc! 500 ms ios! 500 ms ;$/;"	d
lcd-reset	flib/spi/lcd-pcd8544.fs	/^: lcd-reset ( -- ) LCD_RESET dup ioc! 500 ms ios! 500 ms ;$/;"	d
lcd?	embello/flib/i2c/ssd1306.fs	/^: lcd? ( -- f )  \\ probe whether device exists, return true if it does$/;"	d
lcd?	flib/./i2c/ssd1306.fs	/^: lcd? ( -- f )  \\ probe whether device exists, return true if it does$/;"	d
lcd?	flib/i2c/ssd1306.fs	/^: lcd? ( -- f )  \\ probe whether device exists, return true if it does$/;"	d
led	embello/cag/ex/dim.fs	/^pc13 constant led$/;"	d
led	embello/g6s/ex/dim.fs	/^pc13 constant led$/;"	d
led-blinker	embello/prc2/dev.fs	/^: led-blinker [: LED3 iox! ;] led.timer 500 periodic-ms ;$/;"	d
led-init	embello/cag/ex/dim.fs	/^: led-init             omode-pp led io-mode! ;$/;"	d
led-init	embello/g6s/ex/dim.fs	/^: led-init             omode-pp led io-mode! ;$/;"	d
led-off	central/main.fs	/^: led-off LED ios! ;$/;"	d
led-off	embello/cag/ex/dim.fs	/^: led-off              led ios! ;$/;"	d
led-off	embello/ezr/vdisk.fs	/^: led-off LED ios! ;$/;"	d
led-off	embello/g6s/ex/dim.fs	/^: led-off              led ios! ;$/;"	d
led-off	embello/i2c/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	embello/jz1/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	embello/jz3/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	embello/jz4/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	embello/lnr/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	embello/prc2/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	embello/rvm/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	jz1/./board.fs	/^: led-off LED ios! ;$/;"	d
led-off	jz1/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	jz3/./board.fs	/^: led-off LED ios! ;$/;"	d
led-off	jz3/board.fs	/^: led-off LED ios! ;$/;"	d
led-off	oledtemp/board.fs	/^: led-off LED ios! ;$/;"	d
led-on	central/main.fs	/^: led-on LED ioc! ;$/;"	d
led-on	embello/cag/ex/dim.fs	/^: led-on               led ioc! ;$/;"	d
led-on	embello/ezr/vdisk.fs	/^: led-on LED ioc! ;$/;"	d
led-on	embello/g6s/ex/dim.fs	/^: led-on               led ioc! ;$/;"	d
led-on	embello/i2c/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	embello/jz1/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	embello/jz3/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	embello/jz4/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	embello/lnr/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	embello/prc2/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	embello/rvm/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	jz1/./board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	jz1/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	jz3/./board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	jz3/board.fs	/^: led-on LED ioc! ;$/;"	d
led-on	oledtemp/board.fs	/^: led-on LED ioc! ;$/;"	d
led-setup	embello/ezr/vdisk.fs	/^: led-setup  OMODE-PP LED io-mode!  led-off ;$/;"	d
led.timer	embello/prc2/dev.fs	/^0 variable led.timer  \\ passed to periodic-ms$/;"	d
leds-pwm	embello/i2c/main.fs	/^: leds-pwm ( -- )  \\ blink the attached LEDs, just because we can...$/;"	d
line	embello/flib/mecrisp/graphics.fs	/^: line ( x0 y0 x1 y1 -- )$/;"	d
line	flib/./mecrisp/graphics.fs	/^: line ( x0 y0 x1 y1 -- )$/;"	d
line	flib/mecrisp/graphics.fs	/^: line ( x0 y0 x1 y1 -- )$/;"	d
line-dx	embello/flib/mecrisp/graphics.fs	/^0 variable line-dx   0 variable line-dy$/;"	d
line-dx	flib/./mecrisp/graphics.fs	/^0 variable line-dx   0 variable line-dy$/;"	d
line-dx	flib/mecrisp/graphics.fs	/^0 variable line-dx   0 variable line-dy$/;"	d
line-err	embello/flib/mecrisp/graphics.fs	/^0 variable line-err$/;"	d
line-err	flib/./mecrisp/graphics.fs	/^0 variable line-err$/;"	d
line-err	flib/mecrisp/graphics.fs	/^0 variable line-err$/;"	d
line-sx	embello/flib/mecrisp/graphics.fs	/^0 variable line-sx   0 variable line-sy$/;"	d
line-sx	flib/./mecrisp/graphics.fs	/^0 variable line-sx   0 variable line-sy$/;"	d
line-sx	flib/mecrisp/graphics.fs	/^0 variable line-sx   0 variable line-sy$/;"	d
line-x1	embello/flib/mecrisp/graphics.fs	/^0 variable line-x1   0 variable line-y1$/;"	d
line-x1	flib/./mecrisp/graphics.fs	/^0 variable line-x1   0 variable line-y1$/;"	d
line-x1	flib/mecrisp/graphics.fs	/^0 variable line-x1   0 variable line-y1$/;"	d
list	central/board.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/flib/mecrisp/disassembler-m0.fs	/^: list ( -- )$/;"	d
list	embello/flib/mecrisp/disassembler-m3.fs	/^: list ( -- )$/;"	d
list	embello/flib/stm32f1/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/flib/stm32f4/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/flib/stm32f7/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/flib/stm32l0/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/g6u/board.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/prc2/board.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/qld/board.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/ten/board.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/tex/board.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	embello/trf/board.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	flib/./mecrisp/disassembler-m0.fs	/^: list ( -- )$/;"	d
list	flib/./mecrisp/disassembler-m3.fs	/^: list ( -- )$/;"	d
list	flib/./stm32f1/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	flib/./stm32f4/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	flib/./stm32f7/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	flib/./stm32l0/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	flib/mecrisp/disassembler-m0.fs	/^: list ( -- )$/;"	d
list	flib/mecrisp/disassembler-m3.fs	/^: list ( -- )$/;"	d
list	flib/stm32f1/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	flib/stm32f4/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	flib/stm32f7/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
list	flib/stm32l0/hal.fs	/^: list ( -- )  \\ list all words in dictionary, short form$/;"	d
lost	embello/jz1/ex/clock.fs	/^: lost   slow only-msi wait-for-key           fast ;  \\ 200 µA$/;"	d
lost	embello/jz3/ex/clock.fs	/^: lost      only-msi wait             fast ;  \\ 195 µA, UART dead$/;"	d
lost	jz1/./ex/clock.fs	/^: lost   slow only-msi wait-for-key           fast ;  \\ 200 µA$/;"	d
lost	jz1/ex/clock.fs	/^: lost   slow only-msi wait-for-key           fast ;  \\ 200 µA$/;"	d
lost	jz3/./ex/clock.fs	/^: lost      only-msi wait             fast ;  \\ 195 µA, UART dead$/;"	d
lost	jz3/ex/clock.fs	/^: lost      only-msi wait             fast ;  \\ 195 µA, UART dead$/;"	d
low-power-sleep	embello/jz1/main.fs	/^: low-power-sleep$/;"	d
low-power-sleep	embello/jz3/main.fs	/^: low-power-sleep$/;"	d
low-power-sleep	jz1/./main.fs	/^: low-power-sleep$/;"	d
low-power-sleep	jz1/main.fs	/^: low-power-sleep$/;"	d
low-power-sleep	jz3/./main.fs	/^: low-power-sleep$/;"	d
low-power-sleep	jz3/main.fs	/^: low-power-sleep$/;"	d
low-power-sleep	oledtemp/rftemp.fs	/^: low-power-sleep$/;"	d
low-power-sleep	temp/rftemp.fs	/^: low-power-sleep ( n -- ) \\ sleeps for n * 100ms$/;"	d
low-power-sleep	tlib/lpsleep.fs	/^: low-power-sleep *lps @ execute ;      \\ indirect call via *lps$/;"	d
low-power-sleep-simple	tlib/lpsleep.fs	/^: low-power-sleep-simple ( n -- ) \\ sleeps for n * 100ms$/;"	d
lowpower&	embello/flib/mecrisp/multi.fs	/^: lowpower& ( -- )$/;"	d
lowpower&	flib/./mecrisp/multi.fs	/^: lowpower& ( -- )$/;"	d
lowpower&	flib/mecrisp/multi.fs	/^: lowpower& ( -- )$/;"	d
lp-blink	embello/jz1/ex/stop.fs	/^: lp-blink ( -- )$/;"	d
lp-blink	embello/jz3/ex/stop.fs	/^: lp-blink ( -- )$/;"	d
lp-blink	jz1/./ex/stop.fs	/^: lp-blink ( -- )$/;"	d
lp-blink	jz1/ex/stop.fs	/^: lp-blink ( -- )$/;"	d
lp-blink	jz3/./ex/stop.fs	/^: lp-blink ( -- )$/;"	d
lp-blink	jz3/ex/stop.fs	/^: lp-blink ( -- )$/;"	d
lpt	temp/rftemp.fs	/^: lpt \\ low power test$/;"	d
lptim-init	embello/flib/stm32l0/sleep.fs	/^: lptim-init ( -- )  \\ enable the low-power timer$/;"	d
lptim-init	flib/./stm32l0/sleep.fs	/^: lptim-init ( -- )  \\ enable the low-power timer$/;"	d
lptim-init	flib/stm32l0/sleep.fs	/^: lptim-init ( -- )  \\ enable the low-power timer$/;"	d
lptim?	embello/flib/stm32l0/sleep.fs	/^: lptim? ( -- )  \\ dump the low-power timer registers$/;"	d
lptim?	flib/./stm32l0/sleep.fs	/^: lptim? ( -- )  \\ dump the low-power timer registers$/;"	d
lptim?	flib/stm32l0/sleep.fs	/^: lptim? ( -- )  \\ dump the low-power timer registers$/;"	d
ls	embello/flib/spi/sdcard.fs	/^: ls  ( -- ) \\ display files in root dir (skipping all LFNs and deleted files)$/;"	d
ls	flib/./spi/sdcard.fs	/^: ls  ( -- ) \\ display files in root dir (skipping all LFNs and deleted files)$/;"	d
ls	flib/spi/sdcard.fs	/^: ls  ( -- ) \\ display files in root dir (skipping all LFNs and deleted files)$/;"	d
m	embello/bct/ex/adc.fs	/^: m ( u -- ) dup dup config-all meas.all 10 ms meas.all 10 ms meas.all ;$/;"	d
m	embello/ezr/pokemon.fs	/^: m ( u7..u0 -- )$/;"	d
m	tracker/oldtracker.fs	/^: m init-hw begin 80 0 do gps-line ?dup if tx+ack then loop ." *** RESET" cr 432600 rf!freq again ;$/;"	d
m1m2	embello/flib/any/aes128.fs	/^: m1m2$/;"	d
m1m2	flib/./any/aes128.fs	/^: m1m2$/;"	d
m1m2	flib/any/aes128.fs	/^: m1m2$/;"	d
mag-data	embello/flib/i2c/mag3110.fs	/^: mag-data ( -- x y z )$/;"	d
mag-data	flib/./i2c/mag3110.fs	/^: mag-data ( -- x y z )$/;"	d
mag-data	flib/i2c/mag3110.fs	/^: mag-data ( -- x y z )$/;"	d
mag-init	embello/flib/i2c/mag3110.fs	/^: mag-init ( -- nak )$/;"	d
mag-init	flib/./i2c/mag3110.fs	/^: mag-init ( -- nak )$/;"	d
mag-init	flib/i2c/mag3110.fs	/^: mag-init ( -- nak )$/;"	d
main	embello/ezr/cpm2/bin2fs.go	/^func main() {$/;"	f
main	embello/ezr/cpm2/bin2fs.go	/^package main$/;"	p
main	embello/ezr/cpm2/wr1280k.c	/^main() {$/;"	f
main	embello/i2c/main.fs	/^: main ( -- )$/;"	d
main	embello/jz1/main.fs	/^: main$/;"	d
main	embello/jz3/main.fs	/^: main$/;"	d
main	embello/jz3/ook/rf69ook-polling.fs	/^: main$/;"	d
main	embello/lnr/main.fs	/^: main$/;"	d
main	embello/rvm/main.fs	/^: main$/;"	d
main	fanctrl/fanctrl.fs	/^: main$/;"	d
main	follower/follower.fs	/^: main$/;"	d
main	jz1/./main.fs	/^: main$/;"	d
main	jz1/main.fs	/^: main$/;"	d
main	jz3/./main.fs	/^: main$/;"	d
main	jz3/./ook/rf69ook-polling.fs	/^: main$/;"	d
main	jz3/main.fs	/^: main$/;"	d
main	jz3/ook/rf69ook-polling.fs	/^: main$/;"	d
main	oledtemp/rftemp.fs	/^: main$/;"	d
main	temp/rftemp.fs	/^: main$/;"	d
main	tracker/oldtracker.fs	/^: main$/;"	d
main	tracker/tracker.fs	/^: main init-hw multitask gps-loop imu-loop radio-loop tasks ;$/;"	d
manual	embello/flib/any/pid.fs	/^: manual ( s -- )  \\ Override output - switches PID into *manual mode*$/;"	d
manual	flib/./any/pid.fs	/^: manual ( s -- )  \\ Override output - switches PID into *manual mode*$/;"	d
manual	flib/any/pid.fs	/^: manual ( s -- )  \\ Override output - switches PID into *manual mode*$/;"	d
margin	temp/rftemp.fs	/^15 constant margin \\ target SNR margin in dB 8dB demod + log10(2*RxBw) + 5dB margin$/;"	d
margin	tlib/rfloop.fs	/^ 15 constant margin   \\ target SNR margin in dB [8dB demod + log10(2*RxBw) + 5dB margin]$/;"	d
max	embello/ezr/cpm2/Makefile	/^max = -b $s\/RLOAD.COM -b $s\/SLOAD.COM -b $s\/BDOS22.COM -b $s\/MAXBIOS.COM$/;"	m
mb>	embello/ezr/pokemon.fs	/^: mb> ( -- u )            \\ get MBASE$/;"	d
mcp-data	embello/flib/i2c/mcp3424.fs	/^: mcp-data ( chan -- n )  \\ measure as signed 17-bit, wait in stop mode$/;"	d
mcp-data	flib/./i2c/mcp3424.fs	/^: mcp-data ( chan -- n )  \\ measure as signed 17-bit, wait in stop mode$/;"	d
mcp-data	flib/i2c/mcp3424.fs	/^: mcp-data ( chan -- n )  \\ measure as signed 17-bit, wait in stop mode$/;"	d
mcp-init	embello/flib/i2c/mcp3424.fs	/^: mcp-init ( -- nak )$/;"	d
mcp-init	flib/./i2c/mcp3424.fs	/^: mcp-init ( -- nak )$/;"	d
mcp-init	flib/i2c/mcp3424.fs	/^: mcp-init ( -- nak )$/;"	d
mcp9808-addr	embello/flib/i2c/mcp9808.fs	/^: mcp9808-addr $18 i2c-addr ;                 \\ set the device i2c address$/;"	d
mcp9808-addr	flib/./i2c/mcp9808.fs	/^: mcp9808-addr $18 i2c-addr ;                 \\ set the device i2c address$/;"	d
mcp9808-addr	flib/i2c/mcp9808.fs	/^: mcp9808-addr $18 i2c-addr ;                 \\ set the device i2c address$/;"	d
mcp9808-convert	embello/flib/i2c/mcp9808.fs	/^: mcp9808-convert ( -- ms ) \\ put device into continuous mode, returns ms before first cvt$/;"	d
mcp9808-convert	flib/./i2c/mcp9808.fs	/^: mcp9808-convert ( -- ms ) \\ put device into continuous mode, returns ms before first cvt$/;"	d
mcp9808-convert	flib/i2c/mcp9808.fs	/^: mcp9808-convert ( -- ms ) \\ put device into continuous mode, returns ms before first cvt$/;"	d
mcp9808-data	embello/flib/i2c/mcp9808.fs	/^: mcp9808-data ( -- v ) \\ read data, return as 1\/100th centigrade$/;"	d
mcp9808-data	flib/./i2c/mcp9808.fs	/^: mcp9808-data ( -- v ) \\ read data, return as 1\/100th centigrade$/;"	d
mcp9808-data	flib/i2c/mcp9808.fs	/^: mcp9808-data ( -- v ) \\ read data, return as 1\/100th centigrade$/;"	d
mcp9808-init	embello/flib/i2c/mcp9808.fs	/^: mcp9808-init ( -- nak ) \\ put device into continuous mode, 0.125C precision$/;"	d
mcp9808-init	flib/./i2c/mcp9808.fs	/^: mcp9808-init ( -- nak ) \\ put device into continuous mode, 0.125C precision$/;"	d
mcp9808-init	flib/i2c/mcp9808.fs	/^: mcp9808-init ( -- nak ) \\ put device into continuous mode, 0.125C precision$/;"	d
mcp9808-reg	embello/flib/i2c/mcp9808.fs	/^: mcp9808-reg ( n -- ) mcp9808-addr >i2c ;    \\ select register n$/;"	d
mcp9808-reg	flib/./i2c/mcp9808.fs	/^: mcp9808-reg ( n -- ) mcp9808-addr >i2c ;    \\ select register n$/;"	d
mcp9808-reg	flib/i2c/mcp9808.fs	/^: mcp9808-reg ( n -- ) mcp9808-addr >i2c ;    \\ select register n$/;"	d
mcp9808-sleep	embello/flib/i2c/mcp9808.fs	/^: mcp9808-sleep ( -- ) \\ put device to sleep$/;"	d
mcp9808-sleep	flib/./i2c/mcp9808.fs	/^: mcp9808-sleep ( -- ) \\ put device to sleep$/;"	d
mcp9808-sleep	flib/i2c/mcp9808.fs	/^: mcp9808-sleep ( -- ) \\ put device to sleep$/;"	d
meas.	embello/bct/ex/adc.fs	/^: meas. ( n -- )  \\ measure and print voltage with mV accuracy, i.e. 3 decimals$/;"	d
meas.all	embello/bct/ex/adc.fs	/^: meas.all ( -- )  cr 25 spaces  rd meas.  bk meas.  yw meas. ;$/;"	d
measure	embello/bct/ex/adc.fs	/^: measure ( n -- mv )  \\ measure voltage on ADC <n>$/;"	d
measure	embello/sic/main.fs	/^: measure ( -- s_temp )$/;"	d
mem++	tracker/rf-test.fs	/^: mem++ ( addr -- n ) dup @ dup 1+ rot ! ;$/;"	d
memstamp	embello/flib/mecrisp/disassembler-m0.fs	/^: memstamp \\ ( Addr -- ) Shows a memory location nicely$/;"	d
memstamp	embello/flib/mecrisp/disassembler-m3.fs	/^: memstamp \\ ( Addr -- ) Shows a memory location nicely$/;"	d
memstamp	flib/./mecrisp/disassembler-m0.fs	/^: memstamp \\ ( Addr -- ) Shows a memory location nicely$/;"	d
memstamp	flib/./mecrisp/disassembler-m3.fs	/^: memstamp \\ ( Addr -- ) Shows a memory location nicely$/;"	d
memstamp	flib/mecrisp/disassembler-m0.fs	/^: memstamp \\ ( Addr -- ) Shows a memory location nicely$/;"	d
memstamp	flib/mecrisp/disassembler-m3.fs	/^: memstamp \\ ( Addr -- ) Shows a memory location nicely$/;"	d
micros	central/x-clock.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	embello/flib/stm32f1/clock.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	embello/flib/stm32f1/hal.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	embello/flib/stm32f7/hal.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	embello/flib/stm32l0/hal.fs	/^: micros ( -- u )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	flib/./stm32f1/clock.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	flib/./stm32f1/hal.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	flib/./stm32f7/hal.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	flib/./stm32l0/hal.fs	/^: micros ( -- u )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	flib/stm32f1/clock.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	flib/stm32f1/hal.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	flib/stm32f7/hal.fs	/^: micros ( -- n )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
micros	flib/stm32l0/hal.fs	/^: micros ( -- u )  \\ return elapsed microseconds, this wraps after some 2000s$/;"	d
millis	central/x-clock.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	embello/flib/stm32f1/clock.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	embello/flib/stm32f1/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	embello/flib/stm32f7/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	embello/flib/stm32l0/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	flib/./stm32f1/clock.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	flib/./stm32f1/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	flib/./stm32f7/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	flib/./stm32l0/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	flib/stm32f1/clock.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	flib/stm32f1/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	flib/stm32f7/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
millis	flib/stm32l0/hal.fs	/^: millis ( -- u )  \\ return elapsed milliseconds, this wraps after 49 days$/;"	d
min	embello/ezr/cpm2/Makefile	/^min = -b $s\/RLOAD.COM -b $s\/SLOAD.COM -b $s\/BDOS22.COM -b $s\/MINBIOS.COM$/;"	m
missed	temp/rftemp.fs	/^  1 variable missed   \\ number of consecutive ACKs missed$/;"	d
missed	tlib/rfloop.fs	/^  0 variable missed   \\ number of consecutive ACKs missed$/;"	d
missed++	temp/rftemp.fs	/^: missed++ missed dup @ 1+ swap ! ;$/;"	d
missed++	tlib/rfloop.fs	/^: missed++ missed dup @ 1+ swap ! ;$/;"	d
mix-col	embello/flib/any/aes128.fs	/^: mix-col$/;"	d
mix-col	flib/./any/aes128.fs	/^: mix-col$/;"	d
mix-col	flib/any/aes128.fs	/^: mix-col$/;"	d
mixing	embello/flib/any/aes128.fs	/^: mixing$/;"	d
mixing	flib/./any/aes128.fs	/^: mixing$/;"	d
mixing	flib/any/aes128.fs	/^: mixing$/;"	d
ms	central/x-clock.fs	/^: ms ( n -- )  \\ millisecond delay, current limit is about 2000s$/;"	d
ms	embello/bme/dev.fs	/^: ms 0 do 12000 0 do loop loop ;  \\ assumes 72 MHz clock$/;"	d
ms	embello/flib/stm32f1/clock.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	embello/flib/stm32f1/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	embello/flib/stm32f7/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	embello/flib/stm32l0/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	flib/./stm32f1/clock.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	flib/./stm32f1/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	flib/./stm32f7/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	flib/./stm32l0/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	flib/stm32f1/clock.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	flib/stm32f1/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	flib/stm32f7/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
ms	flib/stm32l0/hal.fs	/^: ms ( n -- )  \\ millisecond delay, multi-tasker aware (may switch tasks!)$/;"	d
msg	embello/ezr/asm/hello.asm	/^msg:	dm  "Hello world!", 10, 13, 0$/;"	d
msg	embello/ezr/asm/hellow.asm	/^msg:	dm  "Hello World!", 10, 13, 0$/;"	d
multitask	embello/flib/mecrisp/multi.fs	/^: multitask  ( -- ) ['] (pause) hook-pause ! ;$/;"	d
multitask	flib/./mecrisp/multi.fs	/^: multitask  ( -- ) ['] (pause) hook-pause ! ;$/;"	d
multitask	flib/mecrisp/multi.fs	/^: multitask  ( -- ) ['] (pause) hook-pause ! ;$/;"	d
n-flash	follower/follower.fs	/^: n-flash ( n -- ) \\ flash LED n times very briefly (100ms)$/;"	d
n-flash	temp/rftemp.fs	/^: n-flash ( n -- ) \\ flash LED n times very briefly (100ms)$/;"	d
n-flash	tlib/rfloop.fs	/^: n-flash ( n -- ) \\ flash LED n times very briefly (100ms)$/;"	d
n>f3	follower/follower.fs	/^: n>f3 ( n -- ncomma nwhole ) \\ convert n with 4 frac digits to double$/;"	d
n>f4	follower/follower.fs	/^: n>f4 ( n -- ncomma nwhole ) \\ convert n with 4 frac digits to double$/;"	d
n>pkt	embello/flib/uart/gps.fs	/^: n>pkt ( c-addr -- c-addr ) \\ send number$/;"	d
n>pkt	flib/./uart/gps.fs	/^: n>pkt ( c-addr -- c-addr ) \\ send number$/;"	d
n>pkt	flib/uart/gps.fs	/^: n>pkt ( c-addr -- c-addr ) \\ send number$/;"	d
name.	embello/flib/mecrisp/disassembler-m0.fs	/^: name. ( Address -- ) \\ If the address is Code-Start of a dictionary word, it gets named.$/;"	d
name.	embello/flib/mecrisp/disassembler-m3.fs	/^: name. ( Address -- ) \\ If the address is Code-Start of a dictionary word, it gets named.$/;"	d
name.	flib/./mecrisp/disassembler-m0.fs	/^: name. ( Address -- ) \\ If the address is Code-Start of a dictionary word, it gets named.$/;"	d
name.	flib/./mecrisp/disassembler-m3.fs	/^: name. ( Address -- ) \\ If the address is Code-Start of a dictionary word, it gets named.$/;"	d
name.	flib/mecrisp/disassembler-m0.fs	/^: name. ( Address -- ) \\ If the address is Code-Start of a dictionary word, it gets named.$/;"	d
name.	flib/mecrisp/disassembler-m3.fs	/^: name. ( Address -- ) \\ If the address is Code-Start of a dictionary word, it gets named.$/;"	d
needs-run?	embello/flib/any/timed.fs	/^: needs-run? ( slot# -- flag )$/;"	d
needs-run?	flib/./any/timed.fs	/^: needs-run? ( slot# -- flag )$/;"	d
needs-run?	flib/any/timed.fs	/^: needs-run? ( slot# -- flag )$/;"	d
next	embello/flib/uart/gps.fs	/^: next ( c-addr -- c-addr2 c-addr i true | c-addr false )$/;"	d
next	embello/sic/main.fs	/^: next ( step wait -- ) 1 - wait-time ! next-step !  ;$/;"	d
next	flib/./uart/gps.fs	/^: next ( c-addr -- c-addr2 c-addr i true | c-addr false )$/;"	d
next	flib/uart/gps.fs	/^: next ( c-addr -- c-addr2 c-addr i true | c-addr false )$/;"	d
next-imu-buffer	tracker/tracker.fs	/^: next-imu-buffer ( -- addr ) \\ returns address of IMU buffer to fill$/;"	d
next-step	embello/sic/main.fs	/^0 variable next-step$/;"	d
next-task	embello/flib/mecrisp/multi.fs	/^: next-task  ( -- task )    up @ inline ;$/;"	d
next-task	flib/./mecrisp/multi.fs	/^: next-task  ( -- task )    up @ inline ;$/;"	d
next-task	flib/mecrisp/multi.fs	/^: next-task  ( -- task )    up @ inline ;$/;"	d
nexttoken	embello/flib/mecrisp/cond.fs	/^: nexttoken ( -- addr len )$/;"	d
nexttoken	flib/./mecrisp/cond.fs	/^: nexttoken ( -- addr len )$/;"	d
nexttoken	flib/mecrisp/cond.fs	/^: nexttoken ( -- addr len )$/;"	d
no-ack-continue	temp/rftemp.fs	/^: no-ack-continue ( -- ) \\ missed a few ACKs, raise power$/;"	d
no-ack-continue	tlib/rfloop.fs	/^: no-ack-continue ( -- ) \\ missed a few ACKs, raise power$/;"	d
no-ack-repeat	temp/rftemp.fs	/^: no-ack-repeat ( -- ) \\ first missed ACK, quickly repeat$/;"	d
no-ack-repeat	tlib/rfloop.fs	/^: no-ack-repeat ( -- ) \\ first missed ACK, quickly repeat$/;"	d
no-ack-slow	temp/rftemp.fs	/^: no-ack-slow ( -- ) \\ missed a pile of ACKs, toggle high\/med power and go slow$/;"	d
no-ack-slow	tlib/rfloop.fs	/^: no-ack-slow ( -- ) \\ missed a pile of ACKs, toggle high\/med power and go slow$/;"	d
not-OK?	follower/hc05.fs	/^: not-OK? ( n -- n ) \\ returns 0 if line is "OK"$/;"	d
not-lf?	follower/hc05.fs	/^: not-lf? ( c -- c f ) LF <> ;$/;"	d
notip?	embello/sic/main.fs	/^: notip? ( s_adc -- flag )$/;"	d
now	embello/flib/stm32f1/rtc.fs	/^: now ( -- u )  \\ return current time in seconds$/;"	d
now	flib/./stm32f1/rtc.fs	/^: now ( -- u )  \\ return current time in seconds$/;"	d
now	flib/stm32f1/rtc.fs	/^: now ( -- u )  \\ return current time in seconds$/;"	d
now!	embello/flib/stm32f1/rtc.fs	/^: now! ( u -- )  \\ set current time$/;"	d
now!	flib/./stm32f1/rtc.fs	/^: now! ( u -- )  \\ set current time$/;"	d
now!	flib/stm32f1/rtc.fs	/^: now! ( u -- )  \\ set current time$/;"	d
null-terminate	embello/flib/uart/gps.fs	/^: null-terminate ( c-addr len -- ) + 0 swap c! ;$/;"	d
null-terminate	flib/./uart/gps.fs	/^: null-terminate ( c-addr len -- ) + 0 swap c! ;$/;"	d
null-terminate	flib/uart/gps.fs	/^: null-terminate ( c-addr len -- ) + 0 swap c! ;$/;"	d
numbertable	embello/flib/mecrisp/sine.fs	/^: numbertable <builds does> swap 2 lshift + @ ;$/;"	d
numbertable	flib/./mecrisp/sine.fs	/^: numbertable <builds does> swap 2 lshift + @ ;$/;"	d
numbertable	flib/mecrisp/sine.fs	/^: numbertable <builds does> swap 2 lshift + @ ;$/;"	d
od.flip	embello/jz3/ook/ook-decoder.fs	/^  0 variable od.flip$/;"	d
od.flip	jz3/./ook/ook-decoder.fs	/^  0 variable od.flip$/;"	d
od.flip	jz3/ook/ook-decoder.fs	/^  0 variable od.flip$/;"	d
od.nbits	embello/jz3/ook/ook-decoder.fs	/^  0 variable od.nbits$/;"	d
od.nbits	jz3/./ook/ook-decoder.fs	/^  0 variable od.nbits$/;"	d
od.nbits	jz3/ook/ook-decoder.fs	/^  0 variable od.nbits$/;"	d
od.pad	embello/jz3/ook/ook-decoder.fs	/^: od.pad ( -- ) \\ pad the remaining bits in last byte$/;"	d
od.pad	jz3/./ook/ook-decoder.fs	/^: od.pad ( -- ) \\ pad the remaining bits in last byte$/;"	d
od.pad	jz3/ook/ook-decoder.fs	/^: od.pad ( -- ) \\ pad the remaining bits in last byte$/;"	d
od.reset	embello/jz3/ook/ook-decoder.fs	/^: od.reset ( -- )$/;"	d
od.reset	jz3/./ook/ook-decoder.fs	/^: od.reset ( -- )$/;"	d
od.reset	jz3/ook/ook-decoder.fs	/^: od.reset ( -- )$/;"	d
od.signal	embello/jz3/ook/ook-decoder.fs	/^  0 variable od.signal$/;"	d
od.signal	jz3/./ook/ook-decoder.fs	/^  0 variable od.signal$/;"	d
od.signal	jz3/ook/ook-decoder.fs	/^  0 variable od.signal$/;"	d
od.state	embello/jz3/ook/ook-decoder.fs	/^  0 variable od.state$/;"	d
od.state	jz3/./ook/ook-decoder.fs	/^  0 variable od.state$/;"	d
od.state	jz3/ook/ook-decoder.fs	/^  0 variable od.state$/;"	d
od.w	embello/jz3/ook/ook-decoder.fs	/^: od.w ." w" od.width @ . ; \\ print width for debug purposes$/;"	d
od.w	jz3/./ook/ook-decoder.fs	/^: od.w ." w" od.width @ . ; \\ print width for debug purposes$/;"	d
od.w	jz3/ook/ook-decoder.fs	/^: od.w ." w" od.width @ . ; \\ print width for debug purposes$/;"	d
od.width	embello/jz3/ook/ook-decoder.fs	/^  0 variable od.width$/;"	d
od.width	jz3/./ook/ook-decoder.fs	/^  0 variable od.width$/;"	d
od.width	jz3/ook/ook-decoder.fs	/^  0 variable od.width$/;"	d
od>bit	embello/jz3/ook/ook-decoder.fs	/^: od>bit ( b -- ) \\ add one bit to the stream buffer$/;"	d
od>bit	jz3/./ook/ook-decoder.fs	/^: od>bit ( b -- ) \\ add one bit to the stream buffer$/;"	d
od>bit	jz3/ook/ook-decoder.fs	/^: od>bit ( b -- ) \\ add one bit to the stream buffer$/;"	d
off-cycle	embello/cag/ex/dim.fs	/^: off-cycle  ( n -- )  20 swap - ms ;$/;"	d
off-cycle	embello/g6s/ex/dim.fs	/^: off-cycle  ( n -- )  20 swap - ms ;$/;"	d
offs	embello/cag/ex/io.fs	/^: offs   NUM\/5 0 do 0 write5x loop ;$/;"	d
offs	embello/g6s/ex/io.fs	/^: offs   NUM\/5 0 do 0 write5x loop ;$/;"	d
on-cycle	embello/cag/ex/dim.fs	/^: on-cycle   ( n -- )  led-on ms led-off ;$/;"	d
on-cycle	embello/g6s/ex/dim.fs	/^: on-cycle   ( n -- )  led-on ms led-off ;$/;"	d
one-round	embello/flib/any/aes128.fs	/^: one-round ( round )$/;"	d
one-round	flib/./any/aes128.fs	/^: one-round ( round )$/;"	d
one-round	flib/any/aes128.fs	/^: one-round ( round )$/;"	d
one5x	embello/cag/ex/io.fs	/^: one5x   1 PIN io! 1 PIN io! 1 PIN io! 1 PIN io! 1 PIN io! ;$/;"	d
one5x	embello/g6s/ex/io.fs	/^: one5x   1 PIN io! 1 PIN io! 1 PIN io! 1 PIN io! 1 PIN io! ;$/;"	d
ones	embello/cag/ex/io.fs	/^: ones   NUM\/5 0 do one5x     loop ;$/;"	d
ones	embello/g6s/ex/io.fs	/^: ones   NUM\/5 0 do one5x     loop ;$/;"	d
only-msi	embello/flib/stm32l0/hal.fs	/^: only-msi ( -- )  \\ turn off HSI16, this disables the console UART$/;"	d
only-msi	embello/jz1/ex/clock.fs	/^: only-msi 8 bit RCC-CR ! ;$/;"	d
only-msi	flib/./stm32l0/hal.fs	/^: only-msi ( -- )  \\ turn off HSI16, this disables the console UART$/;"	d
only-msi	flib/stm32l0/hal.fs	/^: only-msi ( -- )  \\ turn off HSI16, this disables the console UART$/;"	d
only-msi	jz1/./ex/clock.fs	/^: only-msi 8 bit RCC-CR ! ;$/;"	d
only-msi	jz1/ex/clock.fs	/^: only-msi 8 bit RCC-CR ! ;$/;"	d
ons	embello/cag/ex/io.fs	/^: ons    NUM\/5 0 do 1 write5x loop ;$/;"	d
ons	embello/g6s/ex/io.fs	/^: ons    NUM\/5 0 do 1 write5x loop ;$/;"	d
ook-bitcount	embello/flib/spi/rf69ook.fs	/^: ook-bitcount ( u .. u ) \\ count 1 bits in number$/;"	d
ook-bitcount	flib/./spi/rf69ook.fs	/^: ook-bitcount ( u .. u ) \\ count 1 bits in number$/;"	d
ook-bitcount	flib/spi/rf69ook.fs	/^: ook-bitcount ( u .. u ) \\ count 1 bits in number$/;"	d
ook-bitrate	embello/flib/spi/rf69ook.fs	/^: ook-bitrate ( u -- )  \\ change reciever bitrate$/;"	d
ook-bitrate	flib/./spi/rf69ook.fs	/^: ook-bitrate ( u -- )  \\ change reciever bitrate$/;"	d
ook-bitrate	flib/spi/rf69ook.fs	/^: ook-bitrate ( u -- )  \\ change reciever bitrate$/;"	d
ook-bw	embello/flib/spi/rf69ook.fs	/^: ook-bw ( u -- )  \\ change reciever bandwidth$/;"	d
ook-bw	flib/./spi/rf69ook.fs	/^: ook-bw ( u -- )  \\ change reciever bandwidth$/;"	d
ook-bw	flib/spi/rf69ook.fs	/^: ook-bw ( u -- )  \\ change reciever bandwidth$/;"	d
ook-clrafc	embello/flib/spi/rf69ook.fs	/^: ook-clrafc \\ clear AFC. Essential for wideband OOK signals. No other way to reset from SW.$/;"	d
ook-clrafc	flib/./spi/rf69ook.fs	/^: ook-clrafc \\ clear AFC. Essential for wideband OOK signals. No other way to reset from SW.$/;"	d
ook-clrafc	flib/spi/rf69ook.fs	/^: ook-clrafc \\ clear AFC. Essential for wideband OOK signals. No other way to reset from SW.$/;"	d
ook-dio2	embello/flib/spi/rf69ook.fs	/^: ook-dio2 ( -- b ) \\ get DIO2 value$/;"	d
ook-dio2	flib/./spi/rf69ook.fs	/^: ook-dio2 ( -- b ) \\ get DIO2 value$/;"	d
ook-dio2	flib/spi/rf69ook.fs	/^: ook-dio2 ( -- b ) \\ get DIO2 value$/;"	d
ook-exit	embello/flib/spi/rf69ook.fs	/^: ook-exit ( -- ) \\ Some registers requires reseting to defaults.$/;"	d
ook-exit	flib/./spi/rf69ook.fs	/^: ook-exit ( -- ) \\ Some registers requires reseting to defaults.$/;"	d
ook-exit	flib/spi/rf69ook.fs	/^: ook-exit ( -- ) \\ Some registers requires reseting to defaults.$/;"	d
ook-filter	embello/flib/spi/rf69ook.fs	/^: ook-filter ( b -- b ) \\ moving average filter for bit stream$/;"	d
ook-filter	flib/./spi/rf69ook.fs	/^: ook-filter ( b -- b ) \\ moving average filter for bit stream$/;"	d
ook-filter	flib/spi/rf69ook.fs	/^: ook-filter ( b -- b ) \\ moving average filter for bit stream$/;"	d
ook-init	embello/flib/spi/rf69ook.fs	/^: ook-init ( freq -- )  \\ init the RFM69 radio module$/;"	d
ook-init	flib/./spi/rf69ook.fs	/^: ook-init ( freq -- )  \\ init the RFM69 radio module$/;"	d
ook-init	flib/spi/rf69ook.fs	/^: ook-init ( freq -- )  \\ init the RFM69 radio module$/;"	d
ook-rssi@	embello/flib/spi/rf69ook.fs	/^: ook-rssi@ ( -- u ) \\ get RSSI value$/;"	d
ook-rssi@	flib/./spi/rf69ook.fs	/^: ook-rssi@ ( -- u ) \\ get RSSI value$/;"	d
ook-rssi@	flib/spi/rf69ook.fs	/^: ook-rssi@ ( -- u ) \\ get RSSI value$/;"	d
ook-thd	embello/flib/spi/rf69ook.fs	/^: ook-thd ( u -- )  \\ change OOK threshold$/;"	d
ook-thd	flib/./spi/rf69ook.fs	/^: ook-thd ( u -- )  \\ change OOK threshold$/;"	d
ook-thd	flib/spi/rf69ook.fs	/^: ook-thd ( u -- )  \\ change OOK threshold$/;"	d
ook-thdMode	embello/flib/spi/rf69ook.fs	/^: ook-thdMode ( u -- )  \\ change OOK thresholdmode$/;"	d
ook-thdMode	flib/./spi/rf69ook.fs	/^: ook-thdMode ( u -- )  \\ change OOK thresholdmode$/;"	d
ook-thdMode	flib/spi/rf69ook.fs	/^: ook-thdMode ( u -- )  \\ change OOK thresholdmode$/;"	d
ook.dio2	embello/flib/spi/rf69ook.fs	/^    0 variable ook.dio2$/;"	d
ook.dio2	flib/./spi/rf69ook.fs	/^    0 variable ook.dio2$/;"	d
ook.dio2	flib/spi/rf69ook.fs	/^    0 variable ook.dio2$/;"	d
ook.filter	embello/flib/spi/rf69ook.fs	/^    0 variable ook.filter$/;"	d
ook.filter	flib/./spi/rf69ook.fs	/^    0 variable ook.filter$/;"	d
ook.filter	flib/spi/rf69ook.fs	/^    0 variable ook.filter$/;"	d
ook.mask	embello/flib/spi/rf69ook.fs	/^    1 OOK.ALEN lshift 1- constant ook.mask$/;"	d
ook.mask	flib/./spi/rf69ook.fs	/^    1 OOK.ALEN lshift 1- constant ook.mask$/;"	d
ook.mask	flib/spi/rf69ook.fs	/^    1 OOK.ALEN lshift 1- constant ook.mask$/;"	d
ook.rssi.bi	embello/flib/spi/rf69ook.fs	/^    0 variable ook.rssi.bi$/;"	d
ook.rssi.bi	flib/./spi/rf69ook.fs	/^    0 variable ook.rssi.bi$/;"	d
ook.rssi.bi	flib/spi/rf69ook.fs	/^    0 variable ook.rssi.bi$/;"	d
ook.rssi.clr	embello/flib/spi/rf69ook.fs	/^: ook.rssi.clr$/;"	d
ook.rssi.clr	flib/./spi/rf69ook.fs	/^: ook.rssi.clr$/;"	d
ook.rssi.clr	flib/spi/rf69ook.fs	/^: ook.rssi.clr$/;"	d
ook.rssi.print	embello/flib/spi/rf69ook.fs	/^: ook.rssi.print \\ conditionally print RSSI during OFF and ON signal$/;"	d
ook.rssi.print	flib/./spi/rf69ook.fs	/^: ook.rssi.print \\ conditionally print RSSI during OFF and ON signal$/;"	d
ook.rssi.print	flib/spi/rf69ook.fs	/^: ook.rssi.print \\ conditionally print RSSI during OFF and ON signal$/;"	d
ook.rssi.qi	embello/flib/spi/rf69ook.fs	/^    0 variable ook.rssi.qi$/;"	d
ook.rssi.qi	flib/./spi/rf69ook.fs	/^    0 variable ook.rssi.qi$/;"	d
ook.rssi.qi	flib/spi/rf69ook.fs	/^    0 variable ook.rssi.qi$/;"	d
ook.thd	embello/flib/spi/rf69ook.fs	/^    0 variable ook.thd$/;"	d
ook.thd	flib/./spi/rf69ook.fs	/^    0 variable ook.thd$/;"	d
ook.thd	flib/spi/rf69ook.fs	/^    0 variable ook.thd$/;"	d
ook.ts	embello/flib/spi/rf69ook.fs	/^    0 variable ook.ts$/;"	d
ook.ts	flib/./spi/rf69ook.fs	/^    0 variable ook.ts$/;"	d
ook.ts	flib/spi/rf69ook.fs	/^    0 variable ook.ts$/;"	d
ook>rssi	embello/flib/spi/rf69ook.fs	/^: ook>rssi ( signal rssi --- )$/;"	d
ook>rssi	flib/./spi/rf69ook.fs	/^: ook>rssi ( signal rssi --- )$/;"	d
ook>rssi	flib/spi/rf69ook.fs	/^: ook>rssi ( signal rssi --- )$/;"	d
ook>rssi>delay	embello/flib/spi/rf69ook.fs	/^: ook>rssi>delay ( u -- u ) \\ delay rssi signal to be well within previous level after flip$/;"	d
ook>rssi>delay	flib/./spi/rf69ook.fs	/^: ook>rssi>delay ( u -- u ) \\ delay rssi signal to be well within previous level after flip$/;"	d
ook>rssi>delay	flib/spi/rf69ook.fs	/^: ook>rssi>delay ( u -- u ) \\ delay rssi signal to be well within previous level after flip$/;"	d
opamp-on	embello/rvm/main.fs	/^: opamp-on$/;"	d
opamp-prot	embello/sic/main.fs	/^: opamp-prot   ( -- ) OPPROT-OUT ios! ; \\ protect OpAmp input by shorting input to Gnd$/;"	d
opamp-unprot	embello/sic/main.fs	/^: opamp-unprot ( -- ) OPPROT-OUT ioc! ; \\ disable protection$/;"	d
opcode?	embello/flib/mecrisp/disassembler-m0.fs	/^: opcode? ( Opcode Bits Mask -- Opcode ? ) \\ (Opcode and Mask) = Bits$/;"	d
opcode?	embello/flib/mecrisp/disassembler-m3.fs	/^: opcode? ( Opcode Bits Mask -- Opcode ? ) \\ (Opcode and Mask) = Bits$/;"	d
opcode?	flib/./mecrisp/disassembler-m0.fs	/^: opcode? ( Opcode Bits Mask -- Opcode ? ) \\ (Opcode and Mask) = Bits$/;"	d
opcode?	flib/./mecrisp/disassembler-m3.fs	/^: opcode? ( Opcode Bits Mask -- Opcode ? ) \\ (Opcode and Mask) = Bits$/;"	d
opcode?	flib/mecrisp/disassembler-m0.fs	/^: opcode? ( Opcode Bits Mask -- Opcode ? ) \\ (Opcode and Mask) = Bits$/;"	d
opcode?	flib/mecrisp/disassembler-m3.fs	/^: opcode? ( Opcode Bits Mask -- Opcode ? ) \\ (Opcode and Mask) = Bits$/;"	d
out	embello/jz3/ex/leds.fs	/^: out ( pin -- )  OMODE-PP swap io-mode! ;$/;"	d
out	jz3/./ex/leds.fs	/^: out ( pin -- )  OMODE-PP swap io-mode! ;$/;"	d
out	jz3/ex/leds.fs	/^: out ( pin -- )  OMODE-PP swap io-mode! ;$/;"	d
out-limit	embello/flib/any/pid.fs	/^0    variable out-limit    \\ output limit (0 to `out-limit)$/;"	d
out-limit	flib/./any/pid.fs	/^0    variable out-limit    \\ output limit (0 to `out-limit)$/;"	d
out-limit	flib/any/pid.fs	/^0    variable out-limit    \\ output limit (0 to `out-limit)$/;"	d
out-override	embello/flib/any/pid.fs	/^0    variable out-override \\ output override (auto mode if -1)$/;"	d
out-override	flib/./any/pid.fs	/^0    variable out-override \\ output override (auto mode if -1)$/;"	d
out-override	flib/any/pid.fs	/^0    variable out-override \\ output override (auto mode if -1)$/;"	d
outpos	embello/suf/ex/old.fs	/^0 variable outpos$/;"	d
output	embello/flib/any/varint.fs	/^: <v ( -- ) <# ;  \\ prepare variable output$/;"	d
output	flib/./any/varint.fs	/^: <v ( -- ) <# ;  \\ prepare variable output$/;"	d
output	flib/any/varint.fs	/^: <v ( -- ) <# ;  \\ prepare variable output$/;"	d
output-is	embello/sic/main.fs	/^: output-is ( -- )$/;"	d
overdrive-enable	embello/kb7/clock.fs	/^: overdrive-enable ( -- ) 16 bit PWR_CR1 bis! ;$/;"	d
overdrive-on	embello/kb7/clock.fs	/^: overdrive-on ( -- )$/;"	d
overdrive-ready?	embello/kb7/clock.fs	/^: overdrive-ready? ( -- f ) 16 bit PWR_CSR1 bit@ ;$/;"	d
overdrive-switch-on	embello/kb7/clock.fs	/^: overdrive-switch-on ( -- ) 17 bit PWR_CR1 bis! ;$/;"	d
overdrive-switch-ready?	embello/kb7/clock.fs	/^: overdrive-switch-ready? ( -- f ) 17 bit PWR_CSR1 bit@ ;$/;"	d
p	embello/ezr/pokemon.fs	/^: p ( -- u )$/;"	d
p	embello/flib/spi/lora1276.fs	/^0 variable p$/;"	d
p	flib/./spi/lora1276.fs	/^0 variable p$/;"	d
p	flib/spi/lora1276.fs	/^0 variable p$/;"	d
p2cmp	embello/flib/stm32f1/pwm.fs	/^: p2cmp ( pin -- n ) \\ convert pin to output comp-reg# - 1 (0..3)$/;"	d
p2cmp	embello/flib/stm32l0/pwm.fs	/^: p2cmp ( pin -- n ) $3 and ;  \\ convert pin to output comp-reg# - 1 (0..3)$/;"	d
p2cmp	flib/./stm32f1/pwm.fs	/^: p2cmp ( pin -- n ) \\ convert pin to output comp-reg# - 1 (0..3)$/;"	d
p2cmp	flib/./stm32l0/pwm.fs	/^: p2cmp ( pin -- n ) $3 and ;  \\ convert pin to output comp-reg# - 1 (0..3)$/;"	d
p2cmp	flib/stm32f1/pwm.fs	/^: p2cmp ( pin -- n ) \\ convert pin to output comp-reg# - 1 (0..3)$/;"	d
p2cmp	flib/stm32l0/pwm.fs	/^: p2cmp ( pin -- n ) $3 and ;  \\ convert pin to output comp-reg# - 1 (0..3)$/;"	d
p2tim	embello/flib/stm32f1/pwm.fs	/^: p2tim ( pin -- n ) \\ convert pin to timer (1..4)$/;"	d
p2tim	embello/flib/stm32l0/pwm.fs	/^: p2tim ( pin -- n ) drop 2 ;  \\ convert pin to timer (1..4)$/;"	d
p2tim	flib/./stm32f1/pwm.fs	/^: p2tim ( pin -- n ) \\ convert pin to timer (1..4)$/;"	d
p2tim	flib/./stm32l0/pwm.fs	/^: p2tim ( pin -- n ) drop 2 ;  \\ convert pin to timer (1..4)$/;"	d
p2tim	flib/stm32f1/pwm.fs	/^: p2tim ( pin -- n ) \\ convert pin to timer (1..4)$/;"	d
p2tim	flib/stm32l0/pwm.fs	/^: p2tim ( pin -- n ) drop 2 ;  \\ convert pin to timer (1..4)$/;"	d
padding	embello/flib/any/aes128.fs	/^false variable padding$/;"	d
padding	flib/./any/aes128.fs	/^false variable padding$/;"	d
padding	flib/any/aes128.fs	/^false variable padding$/;"	d
page	embello/flib/i2c/bno055.fs	/^: page ( n -- ) 7 swap reg! ;     \\ switch to register page n$/;"	d
page	flib/./i2c/bno055.fs	/^: page ( n -- ) 7 swap reg! ;     \\ switch to register page n$/;"	d
page	flib/i2c/bno055.fs	/^: page ( n -- ) 7 swap reg! ;     \\ switch to register page n$/;"	d
pcalc	embello/bme/dev.fs	/^: pcalc ( rawp -- p1 )$/;"	d
pcalc	embello/flib/i2c/bme280.fs	/^: pcalc ( rawp -- p1 )$/;"	d
pcalc	flib/./i2c/bme280.fs	/^: pcalc ( rawp -- p1 )$/;"	d
pcalc	flib/i2c/bme280.fs	/^: pcalc ( rawp -- p1 )$/;"	d
pd_alt2	embello/ezr/asm/hello.asm	/^pd_alt2:    equ $A5$/;"	d
pd_alt2	embello/ezr/asm/hellow.asm	/^pd_alt2:    equ $A5$/;"	d
pen-cycle	embello/wpp/dev.fs	/^: pen-cycle$/;"	d
pen-down	embello/wpp/dev.fs	/^: pen-down 1000  50 0 do 10 - dup PEN pwm 10 ms loop  drop ;$/;"	d
pen-up	embello/wpp/dev.fs	/^: pen-up    500  50 0 do 10 + dup PEN pwm 10 ms loop  drop ;$/;"	d
periodic-ms	embello/prc2/dev.fs	/^: periodic-ms ( handler var ms -- )  \\ execute handler every ms milliseconds$/;"	d
pgm	embello/qld/dev.fs	/^: pgm ( a u -- )$/;"	d
pid	embello/flib/any/pid.fs	/^: pid ( s_is -- s_corr )$/;"	d
pid	flib/./any/pid.fs	/^: pid ( s_is -- s_corr )$/;"	d
pid	flib/any/pid.fs	/^: pid ( s_is -- s_corr )$/;"	d
pid-init	embello/flib/any/pid.fs	/^: pid-init ( f_kp f_ki f_kd s_sampletime s_outlimit -- )$/;"	d
pid-init	flib/./any/pid.fs	/^: pid-init ( f_kp f_ki f_kd s_sampletime s_outlimit -- )$/;"	d
pid-init	flib/any/pid.fs	/^: pid-init ( f_kp f_ki f_kd s_sampletime s_outlimit -- )$/;"	d
pid_compute	embello/flib/any/pid.fs	/^: pid_compute ( s_is -- s_corr )  \\ Do a PID calculation, return duty-cycle$/;"	d
pid_compute	flib/./any/pid.fs	/^: pid_compute ( s_is -- s_corr )  \\ Do a PID calculation, return duty-cycle$/;"	d
pid_compute	flib/any/pid.fs	/^: pid_compute ( s_is -- s_corr )  \\ Do a PID calculation, return duty-cycle$/;"	d
pkt.ptr	embello/flib/any/varint.fs	/^      0 variable pkt.ptr  \\ current position in this packet buffer$/;"	d
pkt.ptr	flib/./any/varint.fs	/^      0 variable pkt.ptr  \\ current position in this packet buffer$/;"	d
pkt.ptr	flib/any/varint.fs	/^      0 variable pkt.ptr  \\ current position in this packet buffer$/;"	d
pkt>	embello/flib/uart/gps.fs	/^: pkt> ( format -- c-addr len )    \\ encode the collected values as RF packet$/;"	d
pkt>	fanctrl/fanctrl.fs	/^: pkt> ( format -- c-addr len )    \\ encode the collected values as RF packet$/;"	d
pkt>	flib/./uart/gps.fs	/^: pkt> ( format -- c-addr len )    \\ encode the collected values as RF packet$/;"	d
pkt>	flib/uart/gps.fs	/^: pkt> ( format -- c-addr len )    \\ encode the collected values as RF packet$/;"	d
pkt>	temp/rftemp.fs	/^: pkt> ( format -- c-addr len )    \\ encode the collected values as RF packet$/;"	d
pkt>rf	embello/flib/any/varint.fs	/^: pkt>rf ( -- )  \\ broadcast the collected values as RF packet$/;"	d
pkt>rf	flib/./any/varint.fs	/^: pkt>rf ( -- )  \\ broadcast the collected values as RF packet$/;"	d
pkt>rf	flib/any/varint.fs	/^: pkt>rf ( -- )  \\ broadcast the collected values as RF packet$/;"	d
pll-clk-src-hse	embello/kb7/clock.fs	/^: pll-clk-src-hse ( -- ) 22 bit RCC_PLLCFGR bis! ;$/;"	d
pll-m!	embello/kb7/clock.fs	/^: pll-m! ( n -- ) $1f RCC_PLLCFGR bits! ;$/;"	d
pll-m@	embello/kb7/clock.fs	/^: pll-m@ ( -- n ) $1f RCC_PLLCFGR bits@ ;$/;"	d
pll-n!	embello/kb7/clock.fs	/^: pll-n! ( n -- ) $1ff 6 lshift RCC_PLLCFGR bits! ;$/;"	d
pll-n@	embello/kb7/clock.fs	/^: pll-n@ ( -- n ) $1ff 6 lshift RCC_PLLCFGR bits@ ;$/;"	d
pll-off	embello/kb7/clock.fs	/^: pll-off ( -- ) 24 bit RCC_CR bic! ;$/;"	d
pll-on	embello/kb7/clock.fs	/^: pll-on ( -- ) 24 bit RCC_CR bis! ;$/;"	d
pll-p!	embello/kb7/clock.fs	/^: pll-p! ( n -- ) 3 16 lshift RCC_PLLCFGR bits! ;$/;"	d
pll-p@	embello/kb7/clock.fs	/^: pll-p@ ( n -- ) 3 16 lshift RCC_PLLCFGR bits@ ;$/;"	d
pll-ready?	embello/kb7/clock.fs	/^: pll-ready? ( -- f ) 25 bit RCC_CR bit@ ;$/;"	d
pll-wait-stable	embello/kb7/clock.fs	/^: pll-wait-stable ( -- ) begin pll-on pll-ready? until ;$/;"	d
pllsai-divr!	embello/kb7/clock.fs	/^: pllsai-divr! ( n -- ) $3 16 lshift RCC_DKCFGR1 bits! ;$/;"	d
pllsai-n!	embello/kb7/clock.fs	/^: pllsai-n! ( n -- ) $1ff 6 lshift RCC_PLLSAICFGR bits! ;$/;"	d
pllsai-off	embello/kb7/clock.fs	/^: pllsai-off ( -- ) 28 bit RCC_CR bic! ;$/;"	d
pllsai-on	embello/kb7/clock.fs	/^: pllsai-on ( -- ) 28 bit RCC_CR bis! ;$/;"	d
pllsai-r!	embello/kb7/clock.fs	/^: pllsai-r! ( n -- ) $7 28 lshift RCC_PLLSAICFGR bits! ;$/;"	d
pllsai-ready?	embello/kb7/clock.fs	/^: pllsai-ready? ( -- f ) 29 bit RCC_CR bit@ ;$/;"	d
pllsai-wait-stable	embello/kb7/clock.fs	/^: pllsai-wait-stable ( -- ) begin pllsai-on pllsai-ready? until ;$/;"	d
power-mv	embello/prc2/dev.fs	/^: power-mv ( -- u )  \\ measure input power rail voltage, normally 12..24V$/;"	d
prep-gps	tracker/tracker.fs	/^: prep-gps ( -- addr len ) \\ prepare GPS data for tx$/;"	d
preparetask	embello/flib/mecrisp/multi.fs	/^: preparetask ( task continue -- )$/;"	d
preparetask	flib/./mecrisp/multi.fs	/^: preparetask ( task continue -- )$/;"	d
preparetask	flib/mecrisp/multi.fs	/^: preparetask ( task continue -- )$/;"	d
previous	embello/flib/mecrisp/multi.fs	/^: previous ( task -- addr-of-task-before )$/;"	d
previous	flib/./mecrisp/multi.fs	/^: previous ( task -- addr-of-task-before )$/;"	d
previous	flib/mecrisp/multi.fs	/^: previous ( task -- addr-of-task-before )$/;"	d
print	embello/ezr/asm/hello.asm	/^print:	ld  hl, msg$/;"	l
print	embello/ezr/asm/hellow.asm	/^print:	ld  hl, msg$/;"	l
print-imu-buffer	tracker/tracker.fs	/^: print-imu-buffer ( addr -- )$/;"	d
prloop	embello/ezr/asm/hello.asm	/^prloop:	ld  a, (hl)$/;"	l
prloop	embello/ezr/asm/hellow.asm	/^prloop:	ld  a, (hl)$/;"	l
process-ack	temp/rftemp.fs	/^: process-ack ( n -- )$/;"	d
process-ack	tlib/rfloop.fs	/^: process-ack ( n -- )$/;"	d
prout	embello/ezr/asm/hello.asm	/^prout:	ld  c, uart0_thr$/;"	l
prout	embello/ezr/asm/hellow.asm	/^prout:	ld  c, uart0_thr$/;"	l
prwait	embello/ezr/asm/hello.asm	/^prwait:	ld  c, uart0_lsr$/;"	l
prwait	embello/ezr/asm/hellow.asm	/^prwait:	ld  c, uart0_lsr$/;"	l
pt100-avg	embello/prc2/dev.fs	/^: pt100-avg ( -- u )  \\ averaged millivolt reading of the PT100$/;"	d
pt100-deg	embello/prc2/dev.fs	/^: pt100-deg ( -- u )  \\ return PT100 sensor temperature in degrees$/;"	d
pt100-mv	embello/prc2/dev.fs	/^: pt100-mv ( -- u )  \\ measure PT100 sensor voltage$/;"	d
put-byte	embello/flib/spi/lcd-pcd8544.fs	/^: put-byte ( r x y -- ) LCD_WIDTH * LCD_BUFFER + + c! ;$/;"	d
put-byte	flib/./spi/lcd-pcd8544.fs	/^: put-byte ( r x y -- ) LCD_WIDTH * LCD_BUFFER + + c! ;$/;"	d
put-byte	flib/spi/lcd-pcd8544.fs	/^: put-byte ( r x y -- ) LCD_WIDTH * LCD_BUFFER + + c! ;$/;"	d
putpixel	embello/flib/fsmc/tft-r61505u.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	embello/flib/i2c/ssd1306.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	embello/flib/spi/lcd-pcd8544.fs	/^: putpixel ( x y -- )$/;"	d
putpixel	embello/flib/spi/tft-ili9163.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	embello/flib/spi/tft-ili9325.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	flib/./fsmc/tft-r61505u.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	flib/./i2c/ssd1306.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	flib/./spi/lcd-pcd8544.fs	/^: putpixel ( x y -- )$/;"	d
putpixel	flib/./spi/tft-ili9163.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	flib/./spi/tft-ili9325.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	flib/fsmc/tft-r61505u.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	flib/i2c/ssd1306.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	flib/spi/lcd-pcd8544.fs	/^: putpixel ( x y -- )$/;"	d
putpixel	flib/spi/tft-ili9163.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
putpixel	flib/spi/tft-ili9325.fs	/^: putpixel ( x y -- )  \\ set a pixel in display memory$/;"	d
pwm	embello/flib/stm32f1/pwm.fs	/^: pwm ( u pin -- )  \\ set pwm rate, 0 = full off, 10000 = full on$/;"	d
pwm	embello/flib/stm32l0/pwm.fs	/^: pwm ( u pin -- )  \\ set pwm rate, 0 = full off, 10000 = full on$/;"	d
pwm	flib/./stm32f1/pwm.fs	/^: pwm ( u pin -- )  \\ set pwm rate, 0 = full off, 10000 = full on$/;"	d
pwm	flib/./stm32l0/pwm.fs	/^: pwm ( u pin -- )  \\ set pwm rate, 0 = full off, 10000 = full on$/;"	d
pwm	flib/stm32f1/pwm.fs	/^: pwm ( u pin -- )  \\ set pwm rate, 0 = full off, 10000 = full on$/;"	d
pwm	flib/stm32l0/pwm.fs	/^: pwm ( u pin -- )  \\ set pwm rate, 0 = full off, 10000 = full on$/;"	d
pwm-deinit	embello/flib/stm32f1/pwm.fs	/^: pwm-deinit ( pin -- )  \\ disable PWM, but leave timer running$/;"	d
pwm-deinit	embello/flib/stm32l0/pwm.fs	/^: pwm-deinit ( pin -- )  \\ disable PWM, but leave timer running$/;"	d
pwm-deinit	flib/./stm32f1/pwm.fs	/^: pwm-deinit ( pin -- )  \\ disable PWM, but leave timer running$/;"	d
pwm-deinit	flib/./stm32l0/pwm.fs	/^: pwm-deinit ( pin -- )  \\ disable PWM, but leave timer running$/;"	d
pwm-deinit	flib/stm32f1/pwm.fs	/^: pwm-deinit ( pin -- )  \\ disable PWM, but leave timer running$/;"	d
pwm-deinit	flib/stm32l0/pwm.fs	/^: pwm-deinit ( pin -- )  \\ disable PWM, but leave timer running$/;"	d
pwm-init	embello/flib/stm32f1/pwm.fs	/^: pwm-init ( hz pin -- )  \\ set up PWM for pin, using specified repetition rate$/;"	d
pwm-init	embello/flib/stm32l0/pwm.fs	/^: pwm-init ( hz pin -- )  \\ set up PWM for pin, using specified repetition rate$/;"	d
pwm-init	flib/./stm32f1/pwm.fs	/^: pwm-init ( hz pin -- )  \\ set up PWM for pin, using specified repetition rate$/;"	d
pwm-init	flib/./stm32l0/pwm.fs	/^: pwm-init ( hz pin -- )  \\ set up PWM for pin, using specified repetition rate$/;"	d
pwm-init	flib/stm32f1/pwm.fs	/^: pwm-init ( hz pin -- )  \\ set up PWM for pin, using specified repetition rate$/;"	d
pwm-init	flib/stm32l0/pwm.fs	/^: pwm-init ( hz pin -- )  \\ set up PWM for pin, using specified repetition rate$/;"	d
pwr-clock-on	embello/kb7/clock.fs	/^: pwr-clock-on ( -- ) 28 bit RCC_APB1ENR bis! ;$/;"	d
q.	embello/flib/spi/lora1276.fs	/^: q. ( c -- ) \\ print character with quoting$/;"	d
q.	flib/./spi/lora1276.fs	/^: q. ( c -- ) \\ print character with quoting$/;"	d
q.	flib/spi/lora1276.fs	/^: q. ( c -- ) \\ print character with quoting$/;"	d
qdemo	embello/jz3/ex/quot.fs	/^: qdemo 3 { 1+ 5 * } execute . ;$/;"	d
qdemo	jz3/./ex/quot.fs	/^: qdemo 3 { 1+ 5 * } execute . ;$/;"	d
qdemo	jz3/ex/quot.fs	/^: qdemo 3 { 1+ 5 * } execute . ;$/;"	d
r	embello/ezr/cpm2/wr1280k.c	/^unsigned r;$/;"	v
r	embello/ezr/pokemon.fs	/^: r  ." FA" 0 r1  ." BC" 1 r1  ." DE" 2 r1  ." HL" 3 r1$/;"	d
r	follower/hc05-test.fs	/^: r s" hello worlD" ; s r string-eq 0 =always$/;"	d
r	follower/hc05-test.fs	/^: r s" hello" ; s r string-eq 0 =always$/;"	d
r	tracker/speed.fs	/^: r 2 0 do  RF:SYNC rf@  $39 spi2>  $39 spi2> + + loop + . ;$/;"	d
r-high	embello/bct/ex/adc.fs	/^466000 constant r-high$/;"	d
r-low	embello/bct/ex/adc.fs	/^673    constant r-low$/;"	d
r-mid	embello/bct/ex/adc.fs	/^17700  constant r-mid$/;"	d
r.cnt	embello/jz3/ook/rf69ook-polling.fs	/^0 variable r.cnt$/;"	d
r.cnt	jz3/./ook/rf69ook-polling.fs	/^0 variable r.cnt$/;"	d
r.cnt	jz3/ook/rf69ook-polling.fs	/^0 variable r.cnt$/;"	d
r.flips	embello/jz3/ook/rf69ook-polling.fs	/^0 variable r.flips$/;"	d
r.flips	jz3/./ook/rf69ook-polling.fs	/^0 variable r.flips$/;"	d
r.flips	jz3/ook/rf69ook-polling.fs	/^0 variable r.flips$/;"	d
r.flush	embello/jz3/ook/rf69ook-polling.fs	/^: r.flush$/;"	d
r.flush	jz3/./ook/rf69ook-polling.fs	/^: r.flush$/;"	d
r.flush	jz3/ook/rf69ook-polling.fs	/^: r.flush$/;"	d
r.report	embello/jz3/ook/rf69ook-polling.fs	/^: r.report ( -- flag ) \\ returns true if rssi reported$/;"	d
r.report	jz3/./ook/rf69ook-polling.fs	/^: r.report ( -- flag ) \\ returns true if rssi reported$/;"	d
r.report	jz3/ook/rf69ook-polling.fs	/^: r.report ( -- flag ) \\ returns true if rssi reported$/;"	d
r.rssi	embello/jz3/ook/rf69ook-polling.fs	/^: r.rssi ( --  ) $/;"	d
r.rssi	jz3/./ook/rf69ook-polling.fs	/^: r.rssi ( --  ) $/;"	d
r.rssi	jz3/ook/rf69ook-polling.fs	/^: r.rssi ( --  ) $/;"	d
r.sample	embello/jz3/ook/rf69ook-polling.fs	/^: r.sample$/;"	d
r.sample	jz3/./ook/rf69ook-polling.fs	/^: r.sample$/;"	d
r.sample	jz3/ook/rf69ook-polling.fs	/^: r.sample$/;"	d
r.stream	embello/jz3/ook/rf69ook-polling.fs	/^: r.stream ( b -- )$/;"	d
r.stream	jz3/./ook/rf69ook-polling.fs	/^: r.stream ( b -- )$/;"	d
r.stream	jz3/ook/rf69ook-polling.fs	/^: r.stream ( b -- )$/;"	d
r.ts	embello/jz3/ook/rf69ook-polling.fs	/^0 variable r.ts \\ receiver loop timestamp$/;"	d
r.ts	jz3/./ook/rf69ook-polling.fs	/^0 variable r.ts \\ receiver loop timestamp$/;"	d
r.ts	jz3/ook/rf69ook-polling.fs	/^0 variable r.ts \\ receiver loop timestamp$/;"	d
r1	embello/ezr/pokemon.fs	/^: r1 ( u -- )  $16 >zdi  [char] : emit  $11 zdi> h.2  $10 zdi> h.2  space ;$/;"	d
r1<	embello/flib/any/aes128.fs	/^: r1<$/;"	d
r1<	flib/./any/aes128.fs	/^: r1<$/;"	d
r1<	flib/any/aes128.fs	/^: r1<$/;"	d
r1>	embello/flib/any/aes128inv.fs	/^: r1>$/;"	d
r1>	flib/./any/aes128inv.fs	/^: r1>$/;"	d
r1>	flib/any/aes128inv.fs	/^: r1>$/;"	d
r2<	embello/flib/any/aes128.fs	/^: r2<$/;"	d
r2<	flib/./any/aes128.fs	/^: r2<$/;"	d
r2<	flib/any/aes128.fs	/^: r2<$/;"	d
r2>	embello/flib/any/aes128inv.fs	/^: r2>$/;"	d
r2>	flib/./any/aes128inv.fs	/^: r2>$/;"	d
r2>	flib/any/aes128inv.fs	/^: r2>$/;"	d
r3<	embello/flib/any/aes128.fs	/^: r3<$/;"	d
r3<	flib/./any/aes128.fs	/^: r3<$/;"	d
r3<	flib/any/aes128.fs	/^: r3<$/;"	d
r3>	embello/flib/any/aes128inv.fs	/^: r3>$/;"	d
r3>	flib/./any/aes128inv.fs	/^: r3>$/;"	d
r3>	flib/any/aes128inv.fs	/^: r3>$/;"	d
radio-init	embello/i2c/main.fs	/^: radio-init ( -- )$/;"	d
radio-loop	tracker/tracker.fs	/^: radio-loop ( -- )$/;"	d
range	embello/flib/any/pid.fs	/^: range ( s_val s_min s_max -- s_val )  \\ Make sure a number is in range$/;"	d
range	flib/./any/pid.fs	/^: range ( s_val s_min s_max -- s_val )  \\ Make sure a number is in range$/;"	d
range	flib/any/pid.fs	/^: range ( s_val s_min s_max -- s_val )  \\ Make sure a number is in range$/;"	d
rate	embello/jz1/ex/node.fs	/^10 constant rate  \\ seconds between readings$/;"	d
rate	embello/jz1/main.fs	/^10 constant rate  \\ seconds between readings$/;"	d
rate	jz1/./ex/node.fs	/^10 constant rate  \\ seconds between readings$/;"	d
rate	jz1/./main.fs	/^10 constant rate  \\ seconds between readings$/;"	d
rate	jz1/ex/node.fs	/^10 constant rate  \\ seconds between readings$/;"	d
rate	jz1/main.fs	/^10 constant rate  \\ seconds between readings$/;"	d
rate	oledtemp/rftemp.fs	/^1 constant rate   \\ seconds between readings$/;"	d
rate	temp/rftemp.fs	/^300 constant rate     \\ seconds between readings$/;"	d
rate	temp/rftemp.fs	/^\\ 20 constant rate     \\ seconds between readings$/;"	d
rate	tlib/rfloop.fs	/^300 variable rate     \\ seconds between readings$/;"	d
rate!fast	temp/rftemp.fs	/^: rate!fast rate 3 rshift 1+ rate-now ! ; \\ set fast rate (8x)$/;"	d
rate!fast	tlib/rfloop.fs	/^: rate!fast rate @ 3 rshift 1+ rate-now ! ; \\ set fast rate (8x)$/;"	d
rate!normal	temp/rftemp.fs	/^: rate!normal rate rate-now ! ;           \\ set normal rate$/;"	d
rate!normal	tlib/rfloop.fs	/^: rate!normal rate @ rate-now ! ;           \\ set normal rate$/;"	d
rate!slow	temp/rftemp.fs	/^: rate!slow rate 2 lshift rate-now ! ;    \\ set slow rate (0.25x)$/;"	d
rate!slow	tlib/rfloop.fs	/^: rate!slow rate @ 2 lshift rate-now ! ;    \\ set slow rate (0.25x)$/;"	d
rate-now	temp/rftemp.fs	/^  1 variable rate-now \\ current rate depending on ACK success$/;"	d
rate-now	tlib/rfloop.fs	/^  1 variable rate-now \\ current rate depending on ACK success$/;"	d
rbuf	embello/ezr/cpm2/wr1280k.c	/^char rbuf [BUFSIZE];$/;"	v
rcc-gpio-clk-off	embello/kb7/clock.fs	/^: rcc-gpio-clk-off ( n -- ) 1 swap lshift RCC_AHB1ENR bic! ;$/;"	d
rcc-gpio-clk-on	embello/kb7/clock.fs	/^: rcc-gpio-clk-on ( n -- ) 1 swap lshift RCC_AHB1ENR bis! ;$/;"	d
rcc-ltdc-clk-off	embello/kb7/clock.fs	/^: rcc-ltdc-clk-off ( -- ) 26 bit RCC_APB2ENR bic! ;$/;"	d
rcc-ltdc-clk-on	embello/kb7/clock.fs	/^: rcc-ltdc-clk-on ( -- ) 26 bit RCC_APB2ENR bis! ;$/;"	d
rcon	embello/flib/any/aes128.fs	/^: rcon ( round -- rcon )$/;"	d
rcon	flib/./any/aes128.fs	/^: rcon ( round -- rcon )$/;"	d
rcon	flib/any/aes128.fs	/^: rcon ( round -- rcon )$/;"	d
rd	embello/bct/ex/adc.fs	/^2 constant rd  \\ red$/;"	d
rd-unp	embello/qld/dev.fs	/^: rd-unp ( -- )$/;"	d
read-enc	embello/jz4/ex/exti.fs	/^: read-enc$/;"	d
read-enc	embello/jz4/ex/rot1.fs	/^: read-enc$/;"	d
read-enc	embello/jz4/ex/rot2.fs	/^: read-enc$/;"	d
read-enc	embello/jz4/ex/rot3.fs	/^: read-enc$/;"	d
read-enc	embello/jz4/ex/rot4.fs	/^: read-enc$/;"	d
read-enc	embello/jz4/ex/rot5.fs	/^: read-enc$/;"	d
read-enc	embello/jz4/ex/rot6.fs	/^: read-enc$/;"	d
read-enc	embello/jz4/ex/rot7.fs	/^: read-enc$/;"	d
read-enc	embello/jz4/ex/rot8.fs	/^: read-enc$/;"	d
read-line	embello/flib/uart/gps.fs	/^: read-line ( -- n ) \\ reads line, checks sum, strips trailer, returns length, 0 if not OK$/;"	d
read-line	flib/./uart/gps.fs	/^: read-line ( -- n ) \\ reads line, checks sum, strips trailer, returns length, 0 if not OK$/;"	d
read-line	flib/uart/gps.fs	/^: read-line ( -- n ) \\ reads line, checks sum, strips trailer, returns length, 0 if not OK$/;"	d
read-line	follower/hc05.fs	/^: read-line ( -- n ) \\ read 'til LF, strip CR$/;"	d
read5x	embello/cag/ex/io.fs	/^: read5x  PIN io@ drop PIN io@ drop PIN io@ drop PIN io@ drop PIN io@ drop ;$/;"	d
read5x	embello/g6s/ex/io.fs	/^: read5x  PIN io@ drop PIN io@ drop PIN io@ drop PIN io@ drop PIN io@ drop ;$/;"	d
readings>oled	central/main.fs	/^: readings>oled ( buf-addr buf-len -- ) \\ show readings on oled$/;"	d
readings>uart	central/main.fs	/^: readings>uart ( buf-addr buf-len -- ) \\ print readings on console$/;"	d
reads	embello/cag/ex/io.fs	/^: reads  NUM\/5 0 do read5x    loop ;$/;"	d
reads	embello/g6s/ex/io.fs	/^: reads  NUM\/5 0 do read5x    loop ;$/;"	d
receiver	embello/jz3/ook/rf69ook-polling.fs	/^: receiver$/;"	d
receiver	jz3/./ook/rf69ook-polling.fs	/^: receiver$/;"	d
receiver	jz3/ook/rf69ook-polling.fs	/^: receiver$/;"	d
reduce	embello/jz1/ex/clock.fs	/^: reduce rf-init rf-sleep led-off 2.1MHz ;$/;"	d
reduce	jz1/./ex/clock.fs	/^: reduce rf-init rf-sleep led-off 2.1MHz ;$/;"	d
reduce	jz1/ex/clock.fs	/^: reduce rf-init rf-sleep led-off 2.1MHz ;$/;"	d
reg	embello/flib/i2c/bno055.fs	/^: reg ( n -- ) addr >i2c ;        \\ select register n$/;"	d
reg	flib/./i2c/bno055.fs	/^: reg ( n -- ) addr >i2c ;        \\ select register n$/;"	d
reg	flib/i2c/bno055.fs	/^: reg ( n -- ) addr >i2c ;        \\ select register n$/;"	d
reg!	embello/flib/i2c/bno055.fs	/^: reg! ( v n -- ) reg >i2c 0 i2c-xfer drop ; \\ write v into reg n$/;"	d
reg!	flib/./i2c/bno055.fs	/^: reg! ( v n -- ) reg >i2c 0 i2c-xfer drop ; \\ write v into reg n$/;"	d
reg!	flib/i2c/bno055.fs	/^: reg! ( v n -- ) reg >i2c 0 i2c-xfer drop ; \\ write v into reg n$/;"	d
reg.	embello/flib/mecrisp/disassembler-m0.fs	/^: reg.    ( Opcode Position -- Opcode ) over swap rshift  $7 and register. ;$/;"	d
reg.	embello/flib/mecrisp/disassembler-m3.fs	/^: reg.    ( Opcode Position -- Opcode ) over swap rshift  $7 and register. ;$/;"	d
reg.	flib/./mecrisp/disassembler-m0.fs	/^: reg.    ( Opcode Position -- Opcode ) over swap rshift  $7 and register. ;$/;"	d
reg.	flib/./mecrisp/disassembler-m3.fs	/^: reg.    ( Opcode Position -- Opcode ) over swap rshift  $7 and register. ;$/;"	d
reg.	flib/mecrisp/disassembler-m0.fs	/^: reg.    ( Opcode Position -- Opcode ) over swap rshift  $7 and register. ;$/;"	d
reg.	flib/mecrisp/disassembler-m3.fs	/^: reg.    ( Opcode Position -- Opcode ) over swap rshift  $7 and register. ;$/;"	d
reg16.	embello/flib/mecrisp/disassembler-m0.fs	/^: reg16.  ( Opcode Position -- Opcode ) over swap rshift  $F and register. ;$/;"	d
reg16.	embello/flib/mecrisp/disassembler-m3.fs	/^: reg16.  ( Opcode Position -- Opcode ) over swap rshift  $F and register. ;$/;"	d
reg16.	flib/./mecrisp/disassembler-m0.fs	/^: reg16.  ( Opcode Position -- Opcode ) over swap rshift  $F and register. ;$/;"	d
reg16.	flib/./mecrisp/disassembler-m3.fs	/^: reg16.  ( Opcode Position -- Opcode ) over swap rshift  $F and register. ;$/;"	d
reg16.	flib/mecrisp/disassembler-m0.fs	/^: reg16.  ( Opcode Position -- Opcode ) over swap rshift  $F and register. ;$/;"	d
reg16.	flib/mecrisp/disassembler-m3.fs	/^: reg16.  ( Opcode Position -- Opcode ) over swap rshift  $F and register. ;$/;"	d
reg16split.	embello/flib/mecrisp/disassembler-m0.fs	/^: reg16split. ( Opcode -- Opcode ) dup $0007 and over 4 rshift $0008 and or register. ;$/;"	d
reg16split.	embello/flib/mecrisp/disassembler-m3.fs	/^: reg16split. ( Opcode -- Opcode ) dup $0007 and over 4 rshift $0008 and or register. ;$/;"	d
reg16split.	flib/./mecrisp/disassembler-m0.fs	/^: reg16split. ( Opcode -- Opcode ) dup $0007 and over 4 rshift $0008 and or register. ;$/;"	d
reg16split.	flib/./mecrisp/disassembler-m3.fs	/^: reg16split. ( Opcode -- Opcode ) dup $0007 and over 4 rshift $0008 and or register. ;$/;"	d
reg16split.	flib/mecrisp/disassembler-m0.fs	/^: reg16split. ( Opcode -- Opcode ) dup $0007 and over 4 rshift $0008 and or register. ;$/;"	d
reg16split.	flib/mecrisp/disassembler-m3.fs	/^: reg16split. ( Opcode -- Opcode ) dup $0007 and over 4 rshift $0008 and or register. ;$/;"	d
reg@	embello/flib/i2c/bno055.fs	/^: reg@ ( n -- v ) reg 1 i2c-xfer drop i2c> ; \\ read byte from reg n$/;"	d
reg@	flib/./i2c/bno055.fs	/^: reg@ ( n -- v ) reg 1 i2c-xfer drop i2c> ; \\ read byte from reg n$/;"	d
reg@	flib/i2c/bno055.fs	/^: reg@ ( n -- v ) reg 1 i2c-xfer drop i2c> ; \\ read byte from reg n$/;"	d
register.	embello/flib/mecrisp/disassembler-m0.fs	/^: register. ( u -- )$/;"	d
register.	embello/flib/mecrisp/disassembler-m3.fs	/^: register. ( u -- )$/;"	d
register.	flib/./mecrisp/disassembler-m0.fs	/^: register. ( u -- )$/;"	d
register.	flib/./mecrisp/disassembler-m3.fs	/^: register. ( u -- )$/;"	d
register.	flib/mecrisp/disassembler-m0.fs	/^: register. ( u -- )$/;"	d
register.	flib/mecrisp/disassembler-m3.fs	/^: register. ( u -- )$/;"	d
registerlist.	embello/flib/mecrisp/disassembler-m0.fs	/^: registerlist. ( Opcode -- Opcode ) 8 0 do dup 1 i lshift and if i register. space then loop ;$/;"	d
registerlist.	embello/flib/mecrisp/disassembler-m3.fs	/^: registerlist. ( Opcode -- Opcode ) 8 0 do dup 1 i lshift and if i register. space then loop ;$/;"	d
registerlist.	flib/./mecrisp/disassembler-m0.fs	/^: registerlist. ( Opcode -- Opcode ) 8 0 do dup 1 i lshift and if i register. space then loop ;$/;"	d
registerlist.	flib/./mecrisp/disassembler-m3.fs	/^: registerlist. ( Opcode -- Opcode ) 8 0 do dup 1 i lshift and if i register. space then loop ;$/;"	d
registerlist.	flib/mecrisp/disassembler-m0.fs	/^: registerlist. ( Opcode -- Opcode ) 8 0 do dup 1 i lshift and if i register. space then loop ;$/;"	d
registerlist.	flib/mecrisp/disassembler-m3.fs	/^: registerlist. ( Opcode -- Opcode ) 8 0 do dup 1 i lshift and if i register. space then loop ;$/;"	d
remove	embello/flib/mecrisp/multi.fs	/^: remove ( task -- ) \\ Remove a task from the round-robin list$/;"	d
remove	flib/./mecrisp/multi.fs	/^: remove ( task -- ) \\ Remove a task from the round-robin list$/;"	d
remove	flib/mecrisp/multi.fs	/^: remove ( task -- ) \\ Remove a task from the round-robin list$/;"	d
reset-spi2	embello/ezr/vdisk.fs	/^: reset-spi2  \\ disable and re-enable to clear SPI2$/;"	d
resistor	embello/bct/ex/adc.fs	/^: resistor ( hi lo -- val )$/;"	d
resp-len	follower/hc05.fs	/^0 variable resp-len$/;"	d
restart-dma	embello/ezr/vdisk.fs	/^: restart-dma$/;"	d
restore-buf	embello/suf/ex/old.fs	/^: restore-buf$/;"	d
reverse1	embello/wpp/dev.fs	/^: reverse1 M1D step M1C step M1B step M1A step ;$/;"	d
reverse2	embello/wpp/dev.fs	/^: reverse2 M2D step M2C step M2B step M2A step ;$/;"	d
rf!	embello/flib/spi/lora1276.fs	/^: rf! ( b reg -- ) $80 or >spi2 ; \\ inline ;     \\ write register$/;"	d
rf!	embello/flib/spi/rf69.fs	/^: rf! ( b reg -- ) $80 or rf!@ drop ;$/;"	d
rf!	flib/./spi/lora1276.fs	/^: rf! ( b reg -- ) $80 or >spi2 ; \\ inline ;     \\ write register$/;"	d
rf!	flib/./spi/rf69.fs	/^: rf! ( b reg -- ) $80 or rf!@ drop ;$/;"	d
rf!	flib/spi/lora1276.fs	/^: rf! ( b reg -- ) $80 or >spi2 ; \\ inline ;     \\ write register$/;"	d
rf!	flib/spi/rf69.fs	/^: rf! ( b reg -- ) $80 or rf!@ drop ;$/;"	d
rf!	tracker/speed.fs	/^: rf! ( b reg -- ) $80 or rf!@ drop ;        \\ write register$/;"	d
rf!@	embello/flib/spi/rf69.fs	/^: rf!@ ( b reg -- b ) +spi >spi >spi> -spi ;$/;"	d
rf!@	flib/./spi/rf69.fs	/^: rf!@ ( b reg -- b ) +spi >spi >spi> -spi ;$/;"	d
rf!@	flib/spi/rf69.fs	/^: rf!@ ( b reg -- b ) +spi >spi >spi> -spi ;$/;"	d
rf!@	tracker/speed.fs	/^: rf!@ ( b reg -- b ) +spi >spi >spi> -spi ; \\ perform a 2-byte SPI cycle$/;"	d
rf!clrirq	embello/flib/spi/lora1276.fs	/^: rf!clrirq ( -- ) \\ clear IRQ$/;"	d
rf!clrirq	flib/./spi/lora1276.fs	/^: rf!clrirq ( -- ) \\ clear IRQ$/;"	d
rf!clrirq	flib/spi/lora1276.fs	/^: rf!clrirq ( -- ) \\ clear IRQ$/;"	d
rf!freq	embello/flib/spi/lora1276.fs	/^: rf!freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf!freq	flib/./spi/lora1276.fs	/^: rf!freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf!freq	flib/spi/lora1276.fs	/^: rf!freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf!lora125.10	embello/flib/spi/lora1276.fs	/^: rf!lora125.10  $72 $a4 $04 rf!rate 125000 rf.bw ! ; \\   980bps,  370ms, -134dBm$/;"	d
rf!lora125.10	flib/./spi/lora1276.fs	/^: rf!lora125.10  $72 $a4 $04 rf!rate 125000 rf.bw ! ; \\   980bps,  370ms, -134dBm$/;"	d
rf!lora125.10	flib/spi/lora1276.fs	/^: rf!lora125.10  $72 $a4 $04 rf!rate 125000 rf.bw ! ; \\   980bps,  370ms, -134dBm$/;"	d
rf!lora125.11	embello/flib/spi/lora1276.fs	/^: rf!lora125.11  $72 $b4 $0C rf!rate 125000 rf.bw ! ; \\   440bps,  660ms, -136dBm$/;"	d
rf!lora125.11	flib/./spi/lora1276.fs	/^: rf!lora125.11  $72 $b4 $0C rf!rate 125000 rf.bw ! ; \\   440bps,  660ms, -136dBm$/;"	d
rf!lora125.11	flib/spi/lora1276.fs	/^: rf!lora125.11  $72 $b4 $0C rf!rate 125000 rf.bw ! ; \\   440bps,  660ms, -136dBm$/;"	d
rf!lora125.12	embello/flib/spi/lora1276.fs	/^: rf!lora125.12  $72 $c4 $0C rf!rate 125000 rf.bw ! ; \\   250bps, 1318ms, -137dBm$/;"	d
rf!lora125.12	flib/./spi/lora1276.fs	/^: rf!lora125.12  $72 $c4 $0C rf!rate 125000 rf.bw ! ; \\   250bps, 1318ms, -137dBm$/;"	d
rf!lora125.12	flib/spi/lora1276.fs	/^: rf!lora125.12  $72 $c4 $0C rf!rate 125000 rf.bw ! ; \\   250bps, 1318ms, -137dBm$/;"	d
rf!lora125.7	embello/flib/spi/lora1276.fs	/^: rf!lora125.7   $72 $74 $04 rf!rate 125000 rf.bw ! ; \\  5470bps,   57ms, -125dBm$/;"	d
rf!lora125.7	flib/./spi/lora1276.fs	/^: rf!lora125.7   $72 $74 $04 rf!rate 125000 rf.bw ! ; \\  5470bps,   57ms, -125dBm$/;"	d
rf!lora125.7	flib/spi/lora1276.fs	/^: rf!lora125.7   $72 $74 $04 rf!rate 125000 rf.bw ! ; \\  5470bps,   57ms, -125dBm$/;"	d
rf!lora125.8	embello/flib/spi/lora1276.fs	/^: rf!lora125.8   $72 $84 $04 rf!rate 125000 rf.bw ! ; \\  3125bps,  103ms, -128dBm$/;"	d
rf!lora125.8	flib/./spi/lora1276.fs	/^: rf!lora125.8   $72 $84 $04 rf!rate 125000 rf.bw ! ; \\  3125bps,  103ms, -128dBm$/;"	d
rf!lora125.8	flib/spi/lora1276.fs	/^: rf!lora125.8   $72 $84 $04 rf!rate 125000 rf.bw ! ; \\  3125bps,  103ms, -128dBm$/;"	d
rf!lora125.9	embello/flib/spi/lora1276.fs	/^: rf!lora125.9   $72 $94 $04 rf!rate 125000 rf.bw ! ; \\  1760bps,  185ms, -131dBm$/;"	d
rf!lora125.9	flib/./spi/lora1276.fs	/^: rf!lora125.9   $72 $94 $04 rf!rate 125000 rf.bw ! ; \\  1760bps,  185ms, -131dBm$/;"	d
rf!lora125.9	flib/spi/lora1276.fs	/^: rf!lora125.9   $72 $94 $04 rf!rate 125000 rf.bw ! ; \\  1760bps,  185ms, -131dBm$/;"	d
rf!lora250.7	embello/flib/spi/lora1276.fs	/^: rf!lora250.7   $82 $74 $04 rf!rate 250000 rf.bw ! ; \\ 11000bps,   28ms, -122dBm$/;"	d
rf!lora250.7	flib/./spi/lora1276.fs	/^: rf!lora250.7   $82 $74 $04 rf!rate 250000 rf.bw ! ; \\ 11000bps,   28ms, -122dBm$/;"	d
rf!lora250.7	flib/spi/lora1276.fs	/^: rf!lora250.7   $82 $74 $04 rf!rate 250000 rf.bw ! ; \\ 11000bps,   28ms, -122dBm$/;"	d
rf!mode	embello/flib/spi/lora1276.fs	/^: rf!mode ( b -- )  \\ set the radio mode, and store a copy in a variable$/;"	d
rf!mode	embello/flib/spi/rf69.fs	/^: rf!mode ( b -- )  \\ set the radio mode, and store a copy in a variable$/;"	d
rf!mode	flib/./spi/lora1276.fs	/^: rf!mode ( b -- )  \\ set the radio mode, and store a copy in a variable$/;"	d
rf!mode	flib/./spi/rf69.fs	/^: rf!mode ( b -- )  \\ set the radio mode, and store a copy in a variable$/;"	d
rf!mode	flib/spi/lora1276.fs	/^: rf!mode ( b -- )  \\ set the radio mode, and store a copy in a variable$/;"	d
rf!mode	flib/spi/rf69.fs	/^: rf!mode ( b -- )  \\ set the radio mode, and store a copy in a variable$/;"	d
rf!rate	embello/flib/spi/lora1276.fs	/^: rf!rate ( mc1 mc2 mc3 -- ) \\ sets modem config registers 1, 2 and 3$/;"	d
rf!rate	flib/./spi/lora1276.fs	/^: rf!rate ( mc1 mc2 mc3 -- ) \\ sets modem config registers 1, 2 and 3$/;"	d
rf!rate	flib/spi/lora1276.fs	/^: rf!rate ( mc1 mc2 mc3 -- ) \\ sets modem config registers 1, 2 and 3$/;"	d
rf!sync	embello/flib/spi/lora1276.fs	/^: rf!sync ( u -- ) RF:SYNC rf! ;  \\ set the sync byte$/;"	d
rf!sync	flib/./spi/lora1276.fs	/^: rf!sync ( u -- ) RF:SYNC rf! ;  \\ set the sync byte$/;"	d
rf!sync	flib/spi/lora1276.fs	/^: rf!sync ( u -- ) RF:SYNC rf! ;  \\ set the sync byte$/;"	d
rf+info	embello/flib/spi/lora1276.fs	/^: rf+info ( c-addr -- ) \\ add 2 info bytes at c-addr, which should be at end of packet$/;"	d
rf+info	flib/./spi/lora1276.fs	/^: rf+info ( c-addr -- ) \\ add 2 info bytes at c-addr, which should be at end of packet$/;"	d
rf+info	flib/spi/lora1276.fs	/^: rf+info ( c-addr -- ) \\ add 2 info bytes at c-addr, which should be at end of packet$/;"	d
rf-ack	embello/flib/spi/lora1276.fs	/^: rf-ack ( -- ) \\ send ACK$/;"	d
rf-ack	flib/./spi/lora1276.fs	/^: rf-ack ( -- ) \\ send ACK$/;"	d
rf-ack	flib/spi/lora1276.fs	/^: rf-ack ( -- ) \\ send ACK$/;"	d
rf-ack?	embello/flib/spi/lora1276.fs	/^: rf-ack? ( -- f )  \\ turn on receiver and wait for ack, return length of ack pkt$/;"	d
rf-ack?	embello/flib/spi/rf69.fs	/^: rf-ack? ( ms -- b ) \\ waits ms milliseconds for an ACK and returns #bytes recv'd$/;"	d
rf-ack?	flib/./spi/lora1276.fs	/^: rf-ack? ( -- f )  \\ turn on receiver and wait for ack, return length of ack pkt$/;"	d
rf-ack?	flib/./spi/rf69.fs	/^: rf-ack? ( ms -- b ) \\ waits ms milliseconds for an ACK and returns #bytes recv'd$/;"	d
rf-ack?	flib/spi/lora1276.fs	/^: rf-ack? ( -- f )  \\ turn on receiver and wait for ack, return length of ack pkt$/;"	d
rf-ack?	flib/spi/rf69.fs	/^: rf-ack? ( ms -- b ) \\ waits ms milliseconds for an ACK and returns #bytes recv'd$/;"	d
rf-adj-power	temp/rftemp.fs	/^: rf-adj-power ( snr )$/;"	d
rf-adj-power	tlib/rfloop.fs	/^: rf-adj-power ( snr )$/;"	d
rf-check	embello/flib/spi/lora1276.fs	/^: rf-check ( b -- )  \\ check that the chip can be accessed over SPI using the FRF-lsb reg$/;"	d
rf-check	embello/flib/spi/rf69.fs	/^: rf-check ( b -- )  \\ check that the register can be accessed over SPI$/;"	d
rf-check	flib/./spi/lora1276.fs	/^: rf-check ( b -- )  \\ check that the chip can be accessed over SPI using the FRF-lsb reg$/;"	d
rf-check	flib/./spi/rf69.fs	/^: rf-check ( b -- )  \\ check that the register can be accessed over SPI$/;"	d
rf-check	flib/spi/lora1276.fs	/^: rf-check ( b -- )  \\ check that the chip can be accessed over SPI using the FRF-lsb reg$/;"	d
rf-check	flib/spi/rf69.fs	/^: rf-check ( b -- )  \\ check that the register can be accessed over SPI$/;"	d
rf-config!	embello/flib/spi/lora1276.fs	/^: rf-config! ( addr -- ) \\ write config sequence$/;"	d
rf-config!	embello/flib/spi/rf69.fs	/^: rf-config! ( addr -- ) \\ load many registers from <reg,value> array, zero-terminated$/;"	d
rf-config!	flib/./spi/lora1276.fs	/^: rf-config! ( addr -- ) \\ write config sequence$/;"	d
rf-config!	flib/./spi/rf69.fs	/^: rf-config! ( addr -- ) \\ load many registers from <reg,value> array, zero-terminated$/;"	d
rf-config!	flib/spi/lora1276.fs	/^: rf-config! ( addr -- ) \\ write config sequence$/;"	d
rf-config!	flib/spi/rf69.fs	/^: rf-config! ( addr -- ) \\ load many registers from <reg,value> array, zero-terminated$/;"	d
rf-correct	embello/flib/spi/lora1276.fs	/^: rf-correct ( -- ) \\ corrrect for fei: change center freq and adjust bit rate$/;"	d
rf-correct	embello/flib/spi/rf69.fs	/^: rf-correct ( -- ) \\ correct the freq based on the AFC measurement of the last packet$/;"	d
rf-correct	flib/./spi/lora1276.fs	/^: rf-correct ( -- ) \\ corrrect for fei: change center freq and adjust bit rate$/;"	d
rf-correct	flib/./spi/rf69.fs	/^: rf-correct ( -- ) \\ correct the freq based on the AFC measurement of the last packet$/;"	d
rf-correct	flib/spi/lora1276.fs	/^: rf-correct ( -- ) \\ corrrect for fei: change center freq and adjust bit rate$/;"	d
rf-correct	flib/spi/rf69.fs	/^: rf-correct ( -- ) \\ correct the freq based on the AFC measurement of the last packet$/;"	d
rf-freq	embello/flib/spi/rf69.fs	/^: rf-freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf-freq	embello/flib/spi/rf69ook.fs	/^: rf-freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf-freq	flib/./spi/rf69.fs	/^: rf-freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf-freq	flib/./spi/rf69ook.fs	/^: rf-freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf-freq	flib/spi/rf69.fs	/^: rf-freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf-freq	flib/spi/rf69ook.fs	/^: rf-freq ( u -- )  \\ set the frequency, supports any input precision$/;"	d
rf-group	embello/flib/spi/rf69.fs	/^: rf-group ( u -- ) RF:SYN3 rf! ;  \\ set the net group (1..250)$/;"	d
rf-group	flib/./spi/rf69.fs	/^: rf-group ( u -- ) RF:SYN3 rf! ;  \\ set the net group (1..250)$/;"	d
rf-group	flib/spi/rf69.fs	/^: rf-group ( u -- ) RF:SYN3 rf! ;  \\ set the net group (1..250)$/;"	d
rf-h!	embello/flib/spi/lora1276.fs	/^: rf-h! ( h -- ) \\ used to write config: top byte is reg-addr, bottom is value to write$/;"	d
rf-h!	embello/flib/spi/rf69.fs	/^: rf-h! ( h -- ) dup $FF and swap 8 rshift rf! ;$/;"	d
rf-h!	flib/./spi/lora1276.fs	/^: rf-h! ( h -- ) \\ used to write config: top byte is reg-addr, bottom is value to write$/;"	d
rf-h!	flib/./spi/rf69.fs	/^: rf-h! ( h -- ) dup $FF and swap 8 rshift rf! ;$/;"	d
rf-h!	flib/spi/lora1276.fs	/^: rf-h! ( h -- ) \\ used to write config: top byte is reg-addr, bottom is value to write$/;"	d
rf-h!	flib/spi/rf69.fs	/^: rf-h! ( h -- ) dup $FF and swap 8 rshift rf! ;$/;"	d
rf-info	embello/flib/spi/lora1276.fs	/^: rf-info ( -- )  \\ display reception parameters as hex string$/;"	d
rf-info	embello/flib/spi/rf69.fs	/^: rf-info ( -- )  \\ display reception parameters as hex string$/;"	d
rf-info	flib/./spi/lora1276.fs	/^: rf-info ( -- )  \\ display reception parameters as hex string$/;"	d
rf-info	flib/./spi/rf69.fs	/^: rf-info ( -- )  \\ display reception parameters as hex string$/;"	d
rf-info	flib/spi/lora1276.fs	/^: rf-info ( -- )  \\ display reception parameters as hex string$/;"	d
rf-info	flib/spi/rf69.fs	/^: rf-info ( -- )  \\ display reception parameters as hex string$/;"	d
rf-ini	embello/flib/spi/rf69.fs	/^: rf-ini ( group freq -- )  \\ internal init of the RFM69 radio module$/;"	d
rf-ini	flib/./spi/rf69.fs	/^: rf-ini ( group freq -- )  \\ internal init of the RFM69 radio module$/;"	d
rf-ini	flib/spi/rf69.fs	/^: rf-ini ( group freq -- )  \\ internal init of the RFM69 radio module$/;"	d
rf-init	embello/flib/spi/lora1276.fs	/^: rf-init ( freq sync -- )  \\ init the LoRA radio module$/;"	d
rf-init	embello/flib/spi/rf69.fs	/^: rf-init ( -- )  \\ init RFM69 with current rf.group and rf.freq values$/;"	d
rf-init	flib/./spi/lora1276.fs	/^: rf-init ( freq sync -- )  \\ init the LoRA radio module$/;"	d
rf-init	flib/./spi/rf69.fs	/^: rf-init ( -- )  \\ init RFM69 with current rf.group and rf.freq values$/;"	d
rf-init	flib/spi/lora1276.fs	/^: rf-init ( freq sync -- )  \\ init the LoRA radio module$/;"	d
rf-init	flib/spi/rf69.fs	/^: rf-init ( -- )  \\ init RFM69 with current rf.group and rf.freq values$/;"	d
rf-listen	embello/flib/spi/lora1276.fs	/^: rf-listen ( -- )  \\ init radio and report incoming packets until key press$/;"	d
rf-listen	embello/flib/spi/rf69.fs	/^: rf-listen ( -- )  \\ init RFM69 and report incoming packets until key press$/;"	d
rf-listen	flib/./spi/lora1276.fs	/^: rf-listen ( -- )  \\ init radio and report incoming packets until key press$/;"	d
rf-listen	flib/./spi/rf69.fs	/^: rf-listen ( -- )  \\ init RFM69 and report incoming packets until key press$/;"	d
rf-listen	flib/spi/lora1276.fs	/^: rf-listen ( -- )  \\ init radio and report incoming packets until key press$/;"	d
rf-listen	flib/spi/rf69.fs	/^: rf-listen ( -- )  \\ init RFM69 and report incoming packets until key press$/;"	d
rf-listenv	embello/tex/ex/rf.fs	/^: rf-listenv ( -- )  \\ init RFM69 and report incoming packets until key press$/;"	d
rf-n!spi	embello/flib/spi/lora1276.fs	/^: rf-n!spi ( addr len -- ) $80 >spiN ; \\ inline ;  \\ write N bytes to the FIFO$/;"	d
rf-n!spi	embello/flib/spi/rf69.fs	/^: rf-n!spi ( addr len -- )  \\ write N bytes to the FIFO$/;"	d
rf-n!spi	flib/./spi/lora1276.fs	/^: rf-n!spi ( addr len -- ) $80 >spiN ; \\ inline ;  \\ write N bytes to the FIFO$/;"	d
rf-n!spi	flib/./spi/rf69.fs	/^: rf-n!spi ( addr len -- )  \\ write N bytes to the FIFO$/;"	d
rf-n!spi	flib/spi/lora1276.fs	/^: rf-n!spi ( addr len -- ) $80 >spiN ; \\ inline ;  \\ write N bytes to the FIFO$/;"	d
rf-n!spi	flib/spi/rf69.fs	/^: rf-n!spi ( addr len -- )  \\ write N bytes to the FIFO$/;"	d
rf-n!spi	tracker/speed.fs	/^: rf-n!spi ( addr len -- )                   \\ write N bytes to the FIFO$/;"	d
rf-n@spi	embello/flib/spi/lora1276.fs	/^: rf-n@spi ( addr len -- ) $00 spiN> ; \\ inline ;  \\ read N bytes from the FIFO$/;"	d
rf-n@spi	embello/flib/spi/rf69.fs	/^: rf-n@spi ( addr len -- )  \\ read N bytes from the FIFO$/;"	d
rf-n@spi	flib/./spi/lora1276.fs	/^: rf-n@spi ( addr len -- ) $00 spiN> ; \\ inline ;  \\ read N bytes from the FIFO$/;"	d
rf-n@spi	flib/./spi/rf69.fs	/^: rf-n@spi ( addr len -- )  \\ read N bytes from the FIFO$/;"	d
rf-n@spi	flib/spi/lora1276.fs	/^: rf-n@spi ( addr len -- ) $00 spiN> ; \\ inline ;  \\ read N bytes from the FIFO$/;"	d
rf-n@spi	flib/spi/rf69.fs	/^: rf-n@spi ( addr len -- )  \\ read N bytes from the FIFO$/;"	d
rf-n@spi	tracker/speed.fs	/^: rf-n@spi ( addr len -- )                   \\ read N bytes from the FIFO$/;"	d
rf-parity	embello/flib/spi/rf69.fs	/^: rf-parity ( -- u )  \\ calculate group parity bits$/;"	d
rf-parity	flib/./spi/rf69.fs	/^: rf-parity ( -- u )  \\ calculate group parity bits$/;"	d
rf-parity	flib/spi/rf69.fs	/^: rf-parity ( -- u )  \\ calculate group parity bits$/;"	d
rf-power	embello/flib/spi/lora1276.fs	/^: rf-power ( n -- )  \\ change TX power level in dB (5..20)$/;"	d
rf-power	embello/flib/spi/rf69.fs	/^: rf-power ( n -- )  \\ change TX power level (0..31)$/;"	d
rf-power	flib/./spi/lora1276.fs	/^: rf-power ( n -- )  \\ change TX power level in dB (5..20)$/;"	d
rf-power	flib/./spi/rf69.fs	/^: rf-power ( n -- )  \\ change TX power level (0..31)$/;"	d
rf-power	flib/spi/lora1276.fs	/^: rf-power ( n -- )  \\ change TX power level in dB (5..20)$/;"	d
rf-power	flib/spi/rf69.fs	/^: rf-power ( n -- )  \\ change TX power level (0..31)$/;"	d
rf-recv	embello/flib/spi/lora1276.fs	/^: rf-recv ( -- b )  \\ check whether a packet has been received, return #bytes$/;"	d
rf-recv	embello/flib/spi/rf69.fs	/^: rf-recv ( -- b )  \\ check whether a packet has been received, return #bytes$/;"	d
rf-recv	flib/./spi/lora1276.fs	/^: rf-recv ( -- b )  \\ check whether a packet has been received, return #bytes$/;"	d
rf-recv	flib/./spi/rf69.fs	/^: rf-recv ( -- b )  \\ check whether a packet has been received, return #bytes$/;"	d
rf-recv	flib/spi/lora1276.fs	/^: rf-recv ( -- b )  \\ check whether a packet has been received, return #bytes$/;"	d
rf-recv	flib/spi/rf69.fs	/^: rf-recv ( -- b )  \\ check whether a packet has been received, return #bytes$/;"	d
rf-rssi	embello/flib/spi/rf69.fs	/^: rf-rssi ( -- )$/;"	d
rf-rssi	flib/./spi/rf69.fs	/^: rf-rssi ( -- )$/;"	d
rf-rssi	flib/spi/rf69.fs	/^: rf-rssi ( -- )$/;"	d
rf-rxpkt	embello/flib/spi/lora1276.fs	/^: rf-rxpkt ( -- b ) \\ extract packet and return length$/;"	d
rf-rxpkt	flib/./spi/lora1276.fs	/^: rf-rxpkt ( -- b ) \\ extract packet and return length$/;"	d
rf-rxpkt	flib/spi/lora1276.fs	/^: rf-rxpkt ( -- b ) \\ extract packet and return length$/;"	d
rf-send	embello/flib/any/varint-test.fs	/^: rf-send ;$/;"	d
rf-send	embello/flib/spi/lora1276.fs	/^: rf-send ( addr count hdr -- )  \\ send out one packet$/;"	d
rf-send	embello/flib/spi/rf69.fs	/^: rf-send ( addr count hdr -- )  \\ send out one packet$/;"	d
rf-send	embello/flib/uart/gps-test.fs	/^: rf-send ;$/;"	d
rf-send	flib/./any/varint-test.fs	/^: rf-send ;$/;"	d
rf-send	flib/./spi/lora1276.fs	/^: rf-send ( addr count hdr -- )  \\ send out one packet$/;"	d
rf-send	flib/./spi/rf69.fs	/^: rf-send ( addr count hdr -- )  \\ send out one packet$/;"	d
rf-send	flib/./uart/gps-test.fs	/^: rf-send ;$/;"	d
rf-send	flib/any/varint-test.fs	/^: rf-send ;$/;"	d
rf-send	flib/spi/lora1276.fs	/^: rf-send ( addr count hdr -- )  \\ send out one packet$/;"	d
rf-send	flib/spi/rf69.fs	/^: rf-send ( addr count hdr -- )  \\ send out one packet$/;"	d
rf-send	flib/uart/gps-test.fs	/^: rf-send ;$/;"	d
rf-sleep	embello/flib/spi/lora1276.fs	/^: rf-sleep ( -- ) RF:M_SLEEP rf!mode ;  \\ put radio module to sleep$/;"	d
rf-sleep	embello/flib/spi/rf69.fs	/^: rf-sleep ( -- ) RF:M_SLEEP rf!mode ;  \\ put radio module to sleep$/;"	d
rf-sleep	flib/./spi/lora1276.fs	/^: rf-sleep ( -- ) RF:M_SLEEP rf!mode ;  \\ put radio module to sleep$/;"	d
rf-sleep	flib/./spi/rf69.fs	/^: rf-sleep ( -- ) RF:M_SLEEP rf!mode ;  \\ put radio module to sleep$/;"	d
rf-sleep	flib/spi/lora1276.fs	/^: rf-sleep ( -- ) RF:M_SLEEP rf!mode ;  \\ put radio module to sleep$/;"	d
rf-sleep	flib/spi/rf69.fs	/^: rf-sleep ( -- ) RF:M_SLEEP rf!mode ;  \\ put radio module to sleep$/;"	d
rf-status	embello/flib/spi/rf69.fs	/^: rf-status ( -- )  \\ update status values on sync match$/;"	d
rf-status	flib/./spi/rf69.fs	/^: rf-status ( -- )  \\ update status values on sync match$/;"	d
rf-status	flib/spi/rf69.fs	/^: rf-status ( -- )  \\ update status values on sync match$/;"	d
rf-timeout	embello/flib/spi/rf69.fs	/^: rf-timeout ( -- )$/;"	d
rf-timeout	flib/./spi/rf69.fs	/^: rf-timeout ( -- )$/;"	d
rf-timeout	flib/spi/rf69.fs	/^: rf-timeout ( -- )$/;"	d
rf-toggle-power	temp/rftemp.fs	/^: rf-toggle-power ( -- ) \\ toggle max\/med power so we don't overrun RX by sticking to max$/;"	d
rf-toggle-power	tlib/rfloop.fs	/^: rf-toggle-power ( -- ) \\ toggle max\/med power so we don't overrun RX by sticking to max$/;"	d
rf-txdone	embello/flib/spi/lora1276.fs	/^: rf-txdone ( -- )$/;"	d
rf-txdone	flib/./spi/lora1276.fs	/^: rf-txdone ( -- )$/;"	d
rf-txdone	flib/spi/lora1276.fs	/^: rf-txdone ( -- )$/;"	d
rf-txtest	embello/flib/spi/lora1276.fs	/^: rf-txtest ( n -- )  \\ send out a test packet with the number as ASCII chars$/;"	d
rf-txtest	embello/flib/spi/rf69.fs	/^: rf-txtest ( n -- )  \\ send out a test packet with the number as ASCII chars$/;"	d
rf-txtest	flib/./spi/lora1276.fs	/^: rf-txtest ( n -- )  \\ send out a test packet with the number as ASCII chars$/;"	d
rf-txtest	flib/./spi/rf69.fs	/^: rf-txtest ( n -- )  \\ send out a test packet with the number as ASCII chars$/;"	d
rf-txtest	flib/spi/lora1276.fs	/^: rf-txtest ( n -- )  \\ send out a test packet with the number as ASCII chars$/;"	d
rf-txtest	flib/spi/rf69.fs	/^: rf-txtest ( n -- )  \\ send out a test packet with the number as ASCII chars$/;"	d
rf-up-power	temp/rftemp.fs	/^: rf-up-power ( -- ) \\ increase power one step due to missed ACK$/;"	d
rf-up-power	tlib/rfloop.fs	/^: rf-up-power ( -- ) \\ increase power one step due to missed ACK$/;"	d
rf.	embello/flib/spi/lora1276.fs	/^: rf. ( -- )  \\ print out all the radio registers$/;"	d
rf.	embello/flib/spi/rf69.fs	/^: rf. ( -- )  \\ print out all the RF69 registers$/;"	d
rf.	flib/./spi/lora1276.fs	/^: rf. ( -- )  \\ print out all the radio registers$/;"	d
rf.	flib/./spi/rf69.fs	/^: rf. ( -- )  \\ print out all the RF69 registers$/;"	d
rf.	flib/spi/lora1276.fs	/^: rf. ( -- )  \\ print out all the radio registers$/;"	d
rf.	flib/spi/rf69.fs	/^: rf. ( -- )  \\ print out all the RF69 registers$/;"	d
rf.actfreq	embello/flib/spi/lora1276.fs	/^433500000 variable rf.actfreq \\ actual frequency in Hz$/;"	d
rf.actfreq	flib/./spi/lora1276.fs	/^433500000 variable rf.actfreq \\ actual frequency in Hz$/;"	d
rf.actfreq	flib/spi/lora1276.fs	/^433500000 variable rf.actfreq \\ actual frequency in Hz$/;"	d
rf.afc	embello/flib/spi/rf69.fs	/^   0 variable rf.afc   \\ Auto Frequency Control offset$/;"	d
rf.afc	flib/./spi/rf69.fs	/^   0 variable rf.afc   \\ Auto Frequency Control offset$/;"	d
rf.afc	flib/spi/rf69.fs	/^   0 variable rf.afc   \\ Auto Frequency Control offset$/;"	d
rf.bw	embello/flib/spi/lora1276.fs	/^   0 variable rf.bw      \\ bandwidth in Hz$/;"	d
rf.bw	flib/./spi/lora1276.fs	/^   0 variable rf.bw      \\ bandwidth in Hz$/;"	d
rf.bw	flib/spi/lora1276.fs	/^   0 variable rf.bw      \\ bandwidth in Hz$/;"	d
rf.fei	embello/flib/spi/lora1276.fs	/^   0 variable rf.fei     \\ last pkt rcv FEI in Hz$/;"	d
rf.fei	flib/./spi/lora1276.fs	/^   0 variable rf.fei     \\ last pkt rcv FEI in Hz$/;"	d
rf.fei	flib/spi/lora1276.fs	/^   0 variable rf.fei     \\ last pkt rcv FEI in Hz$/;"	d
rf.freq	embello/flib/spi/rf69.fs	/^8683 variable rf.freq    \\ frequency (auto-scaled to 100..999 MHz)$/;"	d
rf.freq	flib/./spi/rf69.fs	/^8683 variable rf.freq    \\ frequency (auto-scaled to 100..999 MHz)$/;"	d
rf.freq	flib/spi/rf69.fs	/^8683 variable rf.freq    \\ frequency (auto-scaled to 100..999 MHz)$/;"	d
rf.group	embello/flib/spi/rf69.fs	/^  42 variable rf.group   \\ network group (1..250)$/;"	d
rf.group	flib/./spi/rf69.fs	/^  42 variable rf.group   \\ network group (1..250)$/;"	d
rf.group	flib/spi/rf69.fs	/^  42 variable rf.group   \\ network group (1..250)$/;"	d
rf.last	embello/flib/spi/rf69.fs	/^   0 variable rf.last  \\ flag used to fetch RSSI only once per packet$/;"	d
rf.last	flib/./spi/rf69.fs	/^   0 variable rf.last  \\ flag used to fetch RSSI only once per packet$/;"	d
rf.last	flib/spi/rf69.fs	/^   0 variable rf.last  \\ flag used to fetch RSSI only once per packet$/;"	d
rf.lna	embello/flib/spi/rf69.fs	/^   0 variable rf.lna   \\ Low Noise Amplifier setting (set by AGC)$/;"	d
rf.lna	flib/./spi/rf69.fs	/^   0 variable rf.lna   \\ Low Noise Amplifier setting (set by AGC)$/;"	d
rf.lna	flib/spi/rf69.fs	/^   0 variable rf.lna   \\ Low Noise Amplifier setting (set by AGC)$/;"	d
rf.lna>db	embello/flib/spi/lora1276.fs	/^: rf.lna>db ( u -- u ) \\ convert lna register value 1..6 to dB$/;"	d
rf.lna>db	flib/./spi/lora1276.fs	/^: rf.lna>db ( u -- u ) \\ convert lna register value 1..6 to dB$/;"	d
rf.lna>db	flib/spi/lora1276.fs	/^: rf.lna>db ( u -- u ) \\ convert lna register value 1..6 to dB$/;"	d
rf.mode	embello/flib/spi/lora1276.fs	/^   0 variable rf.mode    \\ current op mode (3 bits)$/;"	d
rf.mode	embello/flib/spi/rf69.fs	/^   0 variable rf.mode  \\ last set chip mode$/;"	d
rf.mode	flib/./spi/lora1276.fs	/^   0 variable rf.mode    \\ current op mode (3 bits)$/;"	d
rf.mode	flib/./spi/rf69.fs	/^   0 variable rf.mode  \\ last set chip mode$/;"	d
rf.mode	flib/spi/lora1276.fs	/^   0 variable rf.mode    \\ current op mode (3 bits)$/;"	d
rf.mode	flib/spi/rf69.fs	/^   0 variable rf.mode  \\ last set chip mode$/;"	d
rf.nodeid	embello/flib/spi/rf69.fs	/^  61 variable rf.nodeid  \\ node ID of this node (1..63)$/;"	d
rf.nodeid	flib/./spi/rf69.fs	/^  61 variable rf.nodeid  \\ node ID of this node (1..63)$/;"	d
rf.nodeid	flib/spi/rf69.fs	/^  61 variable rf.nodeid  \\ node ID of this node (1..63)$/;"	d
rf.nomfreq	embello/flib/spi/lora1276.fs	/^433500000 variable rf.nomfreq \\ nominal frequency in Hz$/;"	d
rf.nomfreq	flib/./spi/lora1276.fs	/^433500000 variable rf.nomfreq \\ nominal frequency in Hz$/;"	d
rf.nomfreq	flib/spi/lora1276.fs	/^433500000 variable rf.nomfreq \\ nominal frequency in Hz$/;"	d
rf.rssi	embello/flib/spi/lora1276.fs	/^   0 variable rf.rssi    \\ last pkt rcv RSSI in dBm$/;"	d
rf.rssi	embello/flib/spi/rf69.fs	/^   0 variable rf.rssi  \\ RSSI signal strength of last reception$/;"	d
rf.rssi	flib/./spi/lora1276.fs	/^   0 variable rf.rssi    \\ last pkt rcv RSSI in dBm$/;"	d
rf.rssi	flib/./spi/rf69.fs	/^   0 variable rf.rssi  \\ RSSI signal strength of last reception$/;"	d
rf.rssi	flib/spi/lora1276.fs	/^   0 variable rf.rssi    \\ last pkt rcv RSSI in dBm$/;"	d
rf.rssi	flib/spi/rf69.fs	/^   0 variable rf.rssi  \\ RSSI signal strength of last reception$/;"	d
rf.snr	embello/flib/spi/lora1276.fs	/^   0 variable rf.snr     \\ last pkt rcv SNR in dB$/;"	d
rf.snr	flib/./spi/lora1276.fs	/^   0 variable rf.snr     \\ last pkt rcv SNR in dB$/;"	d
rf.snr	flib/spi/lora1276.fs	/^   0 variable rf.snr     \\ last pkt rcv SNR in dB$/;"	d
rf.state	embello/flib/spi/lora1276.fs	/^: rf.state ( -- ) \\ print rx\/tx state$/;"	d
rf.state	flib/./spi/lora1276.fs	/^: rf.state ( -- ) \\ print rx\/tx state$/;"	d
rf.state	flib/spi/lora1276.fs	/^: rf.state ( -- ) \\ print rx\/tx state$/;"	d
rf12-fifo>	embello/flib/spi/rf12.fs	/^: rf12-fifo> ( -- u) $B000 >rf12> $FF and ;$/;"	d
rf12-fifo>	flib/./spi/rf12.fs	/^: rf12-fifo> ( -- u) $B000 >rf12> $FF and ;$/;"	d
rf12-fifo>	flib/spi/rf12.fs	/^: rf12-fifo> ( -- u) $B000 >rf12> $FF and ;$/;"	d
rf12-freq	embello/flib/spi/rf12.fs	/^: rf12-freq ( offset -- )  \\ change frequency offset$/;"	d
rf12-freq	flib/./spi/rf12.fs	/^: rf12-freq ( offset -- )  \\ change frequency offset$/;"	d
rf12-freq	flib/spi/rf12.fs	/^: rf12-freq ( offset -- )  \\ change frequency offset$/;"	d
rf12-go	embello/flib/spi/rf12.fs	/^: rf12-go ( -- )  \\ start or resume normal reception mode$/;"	d
rf12-go	flib/./spi/rf12.fs	/^: rf12-go ( -- )  \\ start or resume normal reception mode$/;"	d
rf12-go	flib/spi/rf12.fs	/^: rf12-go ( -- )  \\ start or resume normal reception mode$/;"	d
rf12-init	embello/flib/spi/rf12.fs	/^: rf12-init ( grp freq -- )  \\ initialise the RFM12B radio module$/;"	d
rf12-init	flib/./spi/rf12.fs	/^: rf12-init ( grp freq -- )  \\ initialise the RFM12B radio module$/;"	d
rf12-init	flib/spi/rf12.fs	/^: rf12-init ( grp freq -- )  \\ initialise the RFM12B radio module$/;"	d
rf12-poll	embello/flib/spi/rf12.fs	/^: rf12-poll ( -- )  \\ polled access to RFM12$/;"	d
rf12-poll	flib/./spi/rf12.fs	/^: rf12-poll ( -- )  \\ polled access to RFM12$/;"	d
rf12-poll	flib/spi/rf12.fs	/^: rf12-poll ( -- )  \\ polled access to RFM12$/;"	d
rf12-sleep	embello/flib/spi/rf12.fs	/^: rf12-sleep ( -- ) $8205 >rf12 ;$/;"	d
rf12-sleep	flib/./spi/rf12.fs	/^: rf12-sleep ( -- ) $8205 >rf12 ;$/;"	d
rf12-sleep	flib/spi/rf12.fs	/^: rf12-sleep ( -- ) $8205 >rf12 ;$/;"	d
rf12-start	embello/flib/spi/rf12.fs	/^: rf12-start ( -- )  \\ start receiving data$/;"	d
rf12-start	flib/./spi/rf12.fs	/^: rf12-start ( -- )  \\ start receiving data$/;"	d
rf12-start	flib/spi/rf12.fs	/^: rf12-start ( -- )  \\ start receiving data$/;"	d
rf12.crc	embello/flib/spi/rf12.fs	/^    0 variable rf12.crc$/;"	d
rf12.crc	flib/./spi/rf12.fs	/^    0 variable rf12.crc$/;"	d
rf12.crc	flib/spi/rf12.fs	/^    0 variable rf12.crc$/;"	d
rf12.grp	embello/flib/spi/rf12.fs	/^    5 variable rf12.grp$/;"	d
rf12.grp	flib/./spi/rf12.fs	/^    5 variable rf12.grp$/;"	d
rf12.grp	flib/spi/rf12.fs	/^    5 variable rf12.grp$/;"	d
rf12.len	embello/flib/spi/rf12.fs	/^    0 variable rf12.len$/;"	d
rf12.len	flib/./spi/rf12.fs	/^    0 variable rf12.len$/;"	d
rf12.len	flib/spi/rf12.fs	/^    0 variable rf12.len$/;"	d
rf12.pos	embello/flib/spi/rf12.fs	/^    0 variable rf12.pos$/;"	d
rf12.pos	flib/./spi/rf12.fs	/^    0 variable rf12.pos$/;"	d
rf12.pos	flib/spi/rf12.fs	/^    0 variable rf12.pos$/;"	d
rf12.reset	embello/flib/spi/rf12.fs	/^' nop variable rf12.reset$/;"	d
rf12.reset	flib/./spi/rf12.fs	/^' nop variable rf12.reset$/;"	d
rf12.reset	flib/spi/rf12.fs	/^' nop variable rf12.reset$/;"	d
rf12.state	embello/flib/spi/rf12.fs	/^' nop variable rf12.state$/;"	d
rf12.state	flib/./spi/rf12.fs	/^' nop variable rf12.state$/;"	d
rf12.state	flib/spi/rf12.fs	/^' nop variable rf12.state$/;"	d
rf12/hdr	embello/flib/spi/rf12.fs	/^: rf12\/hdr ( -- )$/;"	d
rf12/hdr	flib/./spi/rf12.fs	/^: rf12\/hdr ( -- )$/;"	d
rf12/hdr	flib/spi/rf12.fs	/^: rf12\/hdr ( -- )$/;"	d
rf12/len	embello/flib/spi/rf12.fs	/^: rf12\/len ( -- )$/;"	d
rf12/len	flib/./spi/rf12.fs	/^: rf12\/len ( -- )$/;"	d
rf12/len	flib/spi/rf12.fs	/^: rf12\/len ( -- )$/;"	d
rf12/recv	embello/flib/spi/rf12.fs	/^: rf12\/recv ( -- ) rf12-fifo> rf12>rx ;$/;"	d
rf12/recv	flib/./spi/rf12.fs	/^: rf12\/recv ( -- ) rf12-fifo> rf12>rx ;$/;"	d
rf12/recv	flib/spi/rf12.fs	/^: rf12\/recv ( -- ) rf12-fifo> rf12>rx ;$/;"	d
rf12>rx	embello/flib/spi/rf12.fs	/^: rf12>rx ( b -- )$/;"	d
rf12>rx	flib/./spi/rf12.fs	/^: rf12>rx ( b -- )$/;"	d
rf12>rx	flib/spi/rf12.fs	/^: rf12>rx ( b -- )$/;"	d
rf69-listen	central/main.fs	/^: rf69-listen ( -- )  \\ init RFM69 and report incoming packets until key press$/;"	d
rf69.fdev-hz	central/main.fs	/^: rf69.fdev-hz ( u -- u ) \\ convert freq deviation (ln a or afc) to Hz$/;"	d
rf69.lna-db	central/main.fs	/^: rf69.lna-db ( u -- u ) \\ convert lna register value to dB$/;"	d
rf69.rssi-db	central/main.fs	/^: rf69.rssi-db ( u -- f ) \\ convert rssi register value to dB$/;"	d
rf69>oled	central/main.fs	/^: rf69>oled ( len -- len )  \\ display reception parameters on oled$/;"	d
rf69>uart	central/main.fs	/^: rf69>uart ( len -- len )  \\ print reception parameters$/;"	d
rf>freq	embello/flib/spi/lora1276.fs	/^: rf>freq ( u -- ) \\ set the frequency, internal operation$/;"	d
rf>freq	flib/./spi/lora1276.fs	/^: rf>freq ( u -- ) \\ set the frequency, internal operation$/;"	d
rf>freq	flib/spi/lora1276.fs	/^: rf>freq ( u -- ) \\ set the frequency, internal operation$/;"	d
rf>oled	follower/follower.fs	/^: rf>oled ( len -- len ) \\ show reception params on oled$/;"	d
rf>uart	embello/flib/spi/lora1276.fs	/^: rf>uart ( len -- len )  \\ print reception parameters$/;"	d
rf>uart	flib/./spi/lora1276.fs	/^: rf>uart ( len -- len )  \\ print reception parameters$/;"	d
rf>uart	flib/spi/lora1276.fs	/^: rf>uart ( len -- len )  \\ print reception parameters$/;"	d
rf>uart	temp/rftemp.fs	/^: rf>uart ( len -- len )  \\ print reception parameters$/;"	d
rf>uart	tlib/rfloop.fs	/^: rf>uart ( len -- len )  \\ print reception parameters$/;"	d
rf@	embello/flib/spi/lora1276.fs	/^: rf@ ( reg -- b ) spi2> ; \\ inline ;            \\ read register$/;"	d
rf@	embello/flib/spi/rf69.fs	/^: rf@ ( reg -- b ) 0 swap rf!@ ;$/;"	d
rf@	flib/./spi/lora1276.fs	/^: rf@ ( reg -- b ) spi2> ; \\ inline ;            \\ read register$/;"	d
rf@	flib/./spi/rf69.fs	/^: rf@ ( reg -- b ) 0 swap rf!@ ;$/;"	d
rf@	flib/spi/lora1276.fs	/^: rf@ ( reg -- b ) spi2> ; \\ inline ;            \\ read register$/;"	d
rf@	flib/spi/rf69.fs	/^: rf@ ( reg -- b ) 0 swap rf!@ ;$/;"	d
rf@	tracker/speed.fs	/^: rf@ ( reg -- b ) 0 swap rf!@ ;             \\ read register$/;"	d
rf@power	temp/rftemp.fs	/^: rf@power ( -- n ) RF:PA rf@ $1F and ;$/;"	d
rf@power	tlib/rfloop.fs	/^: rf@power ( -- n ) RF:PA rf@ $1F and ;$/;"	d
rf@status	embello/flib/spi/lora1276.fs	/^: rf@status ( -- ) \\ fetch snr, rssi, lna, and fei for packet and save$/;"	d
rf@status	flib/./spi/lora1276.fs	/^: rf@status ( -- ) \\ fetch snr, rssi, lna, and fei for packet and save$/;"	d
rf@status	flib/spi/lora1276.fs	/^: rf@status ( -- ) \\ fetch snr, rssi, lna, and fei for packet and save$/;"	d
rfmods	embello/jz4/dev.fs	/^: rfmods$/;"	d
rfmods	embello/ten/dev.fs	/^: rfmods$/;"	d
ring#	embello/flib/any/ring.fs	/^: ring# ( ring -- u )  \\ return current number of bytes in the ring buffer$/;"	d
ring#	flib/./any/ring.fs	/^: ring# ( ring -- u )  \\ return current number of bytes in the ring buffer$/;"	d
ring#	flib/any/ring.fs	/^: ring# ( ring -- u )  \\ return current number of bytes in the ring buffer$/;"	d
ring-step	embello/flib/any/ring.fs	/^: ring-step ( ring 1\/2 -- addr )  \\ common code for saving and fetching$/;"	d
ring-step	flib/./any/ring.fs	/^: ring-step ( ring 1\/2 -- addr )  \\ common code for saving and fetching$/;"	d
ring-step	flib/any/ring.fs	/^: ring-step ( ring 1\/2 -- addr )  \\ common code for saving and fetching$/;"	d
ring>	embello/flib/any/ring.fs	/^: ring> ( ring -- b )  \\ fetch byte from start of ring buffer$/;"	d
ring>	flib/./any/ring.fs	/^: ring> ( ring -- b )  \\ fetch byte from start of ring buffer$/;"	d
ring>	flib/any/ring.fs	/^: ring> ( ring -- b )  \\ fetch byte from start of ring buffer$/;"	d
ring?	embello/flib/any/ring.fs	/^: ring? ( ring -- f )  \\ true if the ring can accept more data$/;"	d
ring?	flib/./any/ring.fs	/^: ring? ( ring -- f )  \\ true if the ring can accept more data$/;"	d
ring?	flib/any/ring.fs	/^: ring? ( ring -- f )  \\ true if the ring can accept more data$/;"	d
rk+calc	embello/flib/any/aes128.fs	/^: rk+calc$/;"	d
rk+calc	flib/./any/aes128.fs	/^: rk+calc$/;"	d
rk+calc	flib/any/aes128.fs	/^: rk+calc$/;"	d
rk-calc	embello/flib/any/aes128.fs	/^: rk-calc$/;"	d
rk-calc	flib/./any/aes128.fs	/^: rk-calc$/;"	d
rk-calc	flib/any/aes128.fs	/^: rk-calc$/;"	d
rk-init	embello/flib/any/aes128.fs	/^: rk-init$/;"	d
rk-init	flib/./any/aes128.fs	/^: rk-init$/;"	d
rk-init	flib/any/aes128.fs	/^: rk-init$/;"	d
rk-rotsub	embello/flib/any/aes128.fs	/^: rk-rotsub$/;"	d
rk-rotsub	flib/./any/aes128.fs	/^: rk-rotsub$/;"	d
rk-rotsub	flib/any/aes128.fs	/^: rk-rotsub$/;"	d
rk-update	embello/flib/any/aes128.fs	/^: rk-update$/;"	d
rk-update	flib/./any/aes128.fs	/^: rk-update$/;"	d
rk-update	flib/any/aes128.fs	/^: rk-update$/;"	d
rn	tracker/speed.fs	/^: rn ." spiN>: " micros data 256 0 spiN> micros swap - 66 - 10 * 256 \/ . ;$/;"	d
roll	oledtemp/e-oled.fs	/^: roll$/;"	d
roll	oledtemp/rftemp.fs	/^: roll \\ little test snippet that rolls through numbers on the OLED at full speed$/;"	d
room.mV	embello/prc2/dev.fs	/^270 variable room.mV    530 variable max.mV$/;"	d
room.temp	embello/prc2/dev.fs	/^ 21 variable room.temp  260 variable max.temp$/;"	d
rotate	embello/wpp/dev.fs	/^: rotate$/;"	d
rotateleft	embello/flib/mecrisp/disassembler-m3.fs	/^: rotateleft  ( x u -- x ) 0 ?do rol loop ;$/;"	d
rotateleft	flib/./mecrisp/disassembler-m3.fs	/^: rotateleft  ( x u -- x ) 0 ?do rol loop ;$/;"	d
rotateleft	flib/mecrisp/disassembler-m3.fs	/^: rotateleft  ( x u -- x ) 0 ?do rol loop ;$/;"	d
rotateright	embello/flib/mecrisp/disassembler-m3.fs	/^: rotateright ( x u -- x ) 0 ?do ror loop ;$/;"	d
rotateright	flib/./mecrisp/disassembler-m3.fs	/^: rotateright ( x u -- x ) 0 ?do ror loop ;$/;"	d
rotateright	flib/mecrisp/disassembler-m3.fs	/^: rotateright ( x u -- x ) 0 ?do ror loop ;$/;"	d
round-key	embello/flib/any/aes128.fs	/^: round-key ( round -- )$/;"	d
round-key	flib/./any/aes128.fs	/^: round-key ( round -- )$/;"	d
round-key	flib/any/aes128.fs	/^: round-key ( round -- )$/;"	d
round-key+	embello/flib/any/aes128.fs	/^: round-key+$/;"	d
round-key+	flib/./any/aes128.fs	/^: round-key+$/;"	d
round-key+	flib/any/aes128.fs	/^: round-key+$/;"	d
round-key-lut	embello/flib/any/aes128inv.fs	/^: round-key-lut ( round -- )$/;"	d
round-key-lut	flib/./any/aes128inv.fs	/^: round-key-lut ( round -- )$/;"	d
round-key-lut	flib/any/aes128inv.fs	/^: round-key-lut ( round -- )$/;"	d
rssi	embello/jz3/ook/rssi.fs	/^: rssi ( -- )$/;"	d
rssi	jz3/./ook/rssi.fs	/^: rssi ( -- )$/;"	d
rssi	jz3/ook/rssi.fs	/^: rssi ( -- )$/;"	d
rssi.avg	embello/jz3/ook/rssi.fs	/^0 variable rssi.avg$/;"	d
rssi.avg	jz3/./ook/rssi.fs	/^0 variable rssi.avg$/;"	d
rssi.avg	jz3/ook/rssi.fs	/^0 variable rssi.avg$/;"	d
rssi.max	embello/jz3/ook/rssi.fs	/^0 variable rssi.max$/;"	d
rssi.max	jz3/./ook/rssi.fs	/^0 variable rssi.max$/;"	d
rssi.max	jz3/ook/rssi.fs	/^0 variable rssi.max$/;"	d
rssi.n	embello/jz3/ook/rssi.fs	/^0 variable rssi.n$/;"	d
rssi.n	jz3/./ook/rssi.fs	/^0 variable rssi.n$/;"	d
rssi.n	jz3/ook/rssi.fs	/^0 variable rssi.n$/;"	d
rssi.stddev	embello/jz3/ook/rssi.fs	/^0 variable rssi.stddev$/;"	d
rssi.stddev	jz3/./ook/rssi.fs	/^0 variable rssi.stddev$/;"	d
rssi.stddev	jz3/ook/rssi.fs	/^0 variable rssi.stddev$/;"	d
rssi.sum	embello/jz3/ook/rssi.fs	/^0 variable rssi.sum$/;"	d
rssi.sum	jz3/./ook/rssi.fs	/^0 variable rssi.sum$/;"	d
rssi.sum	jz3/ook/rssi.fs	/^0 variable rssi.sum$/;"	d
rssi.sumsqr	embello/jz3/ook/rssi.fs	/^0 variable rssi.sumsqr$/;"	d
rssi.sumsqr	jz3/./ook/rssi.fs	/^0 variable rssi.sumsqr$/;"	d
rssi.sumsqr	jz3/ook/rssi.fs	/^0 variable rssi.sumsqr$/;"	d
rssi.ts	embello/jz3/ook/rf69ook-polling.fs	/^0 variable rssi.ts$/;"	d
rssi.ts	jz3/./ook/rf69ook-polling.fs	/^0 variable rssi.ts$/;"	d
rssi.ts	jz3/ook/rf69ook-polling.fs	/^0 variable rssi.ts$/;"	d
rssi.tss	embello/jz3/ook/rf69ook-polling.fs	/^0 variable rssi.tss$/;"	d
rssi.tss	jz3/./ook/rf69ook-polling.fs	/^0 variable rssi.tss$/;"	d
rssi.tss	jz3/ook/rf69ook-polling.fs	/^0 variable rssi.tss$/;"	d
rssi.var	embello/jz3/ook/rssi.fs	/^0 variable rssi.var$/;"	d
rssi.var	jz3/./ook/rssi.fs	/^0 variable rssi.var$/;"	d
rssi.var	jz3/ook/rssi.fs	/^0 variable rssi.var$/;"	d
rssiavg	embello/jz3/ook/rssi.fs	/^: rssiavg ( -- )$/;"	d
rssiavg	jz3/./ook/rssi.fs	/^: rssiavg ( -- )$/;"	d
rssiavg	jz3/ook/rssi.fs	/^: rssiavg ( -- )$/;"	d
rssicalc	embello/jz3/ook/rssi.fs	/^: rssicalc ( -- )$/;"	d
rssicalc	jz3/./ook/rssi.fs	/^: rssicalc ( -- )$/;"	d
rssicalc	jz3/ook/rssi.fs	/^: rssicalc ( -- )$/;"	d
rssiclear	embello/jz3/ook/rssi.fs	/^: rssiclear ( -- )$/;"	d
rssiclear	jz3/./ook/rssi.fs	/^: rssiclear ( -- )$/;"	d
rssiclear	jz3/ook/rssi.fs	/^: rssiclear ( -- )$/;"	d
rssiprint	embello/jz3/ook/rssi.fs	/^: rssiprint$/;"	d
rssiprint	jz3/./ook/rssi.fs	/^: rssiprint$/;"	d
rssiprint	jz3/ook/rssi.fs	/^: rssiprint$/;"	d
rssireport	embello/jz3/ook/rssi.fs	/^: rssireport ( -- )$/;"	d
rssireport	jz3/./ook/rssi.fs	/^: rssireport ( -- )$/;"	d
rssireport	jz3/ook/rssi.fs	/^: rssireport ( -- )$/;"	d
rssistddev	embello/jz3/ook/rssi.fs	/^: rssistddev ( -- )$/;"	d
rssistddev	jz3/./ook/rssi.fs	/^: rssistddev ( -- )$/;"	d
rssistddev	jz3/ook/rssi.fs	/^: rssistddev ( -- )$/;"	d
rssithd	embello/jz3/ook/rssi.fs	/^: rssithd$/;"	d
rssithd	jz3/./ook/rssi.fs	/^: rssithd$/;"	d
rssithd	jz3/ook/rssi.fs	/^: rssithd$/;"	d
rssivar	embello/jz3/ook/rssi.fs	/^: rssivar ( -- )$/;"	d
rssivar	jz3/./ook/rssi.fs	/^: rssivar ( -- )$/;"	d
rssivar	jz3/ook/rssi.fs	/^: rssivar ( -- )$/;"	d
rtc-init	embello/flib/stm32f1/rtc.fs	/^: rtc-init ( -- )  \\ restart internal RTC using attached 32,768 Hz crystal$/;"	d
rtc-init	flib/./stm32f1/rtc.fs	/^: rtc-init ( -- )  \\ restart internal RTC using attached 32,768 Hz crystal$/;"	d
rtc-init	flib/stm32f1/rtc.fs	/^: rtc-init ( -- )  \\ restart internal RTC using attached 32,768 Hz crystal$/;"	d
rtc-wait	embello/flib/stm32f1/rtc.fs	/^: rtc-wait ( -- ) begin 1 bit RCC-BDCR bit@ until ;$/;"	d
rtc-wait	flib/./stm32f1/rtc.fs	/^: rtc-wait ( -- ) begin 1 bit RCC-BDCR bit@ until ;$/;"	d
rtc-wait	flib/stm32f1/rtc.fs	/^: rtc-wait ( -- ) begin 1 bit RCC-BDCR bit@ until ;$/;"	d
run	embello/ezr/ex/bridge.fs	/^: run$/;"	d
rx-connected?	embello/i2c/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	embello/jz1/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	embello/jz3/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	embello/jz4/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	embello/lnr/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	embello/rvm/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	embello/ten/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	jz1/./board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	jz1/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	jz3/./board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	jz3/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rx-connected?	oledtemp/board.fs	/^: rx-connected? ( -- f )  \\ true if RX is connected (and idle)$/;"	d
rxclear	embello/suf/usb.fs	/^: rxclear ( ep -- ) ep-addr dup h@ $7FFF and $8F8F and swap h! ;$/;"	d
rxend	embello/flib/spi/lora1276.fs	/^: rxend begin RF:IRQFLAGS rf@ $c0 and 0= while 1 ms repeat ;$/;"	d
rxend	flib/./spi/lora1276.fs	/^: rxend begin RF:IRQFLAGS rf@ $c0 and 0= while 1 ms repeat ;$/;"	d
rxend	flib/spi/lora1276.fs	/^: rxend begin RF:IRQFLAGS rf@ $c0 and 0= while 1 ms repeat ;$/;"	d
rxstat!	embello/suf/usb.fs	/^: rxstat! ( ep u -- )  \\ set stat_rx without toggling\/setting any other fields$/;"	d
rxtest	embello/g6s/ex/rxtest.fs	/^: rxtest ( -- )$/;"	d
rxtestv	embello/g6s/ex/rxtestv.fs	/^: rxtestv ( -- )$/;"	d
rxtestv	embello/jz4/ex/rot4.fs	/^: rxtestv ( -- )$/;"	d
rxtestv	embello/jz4/ex/rot5.fs	/^: rxtestv ( -- )$/;"	d
s	embello/ezr/cpm2/Makefile	/^s   = ..\/simh2$/;"	m
s	embello/ezr/pokemon.fs	/^: s  3 zdi>$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" " ; line s cpy char S f4d 0 =always drop$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" " ; s s>int 0 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" $PMTK001,604,3" ; s set-input read-line  0 =always \\ no chksum$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" $PMTK001,604,3*32" ; s set-input read-line 14 =always \\ correct chksum$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" $PMTK001,604,3*33" ; s set-input read-line  0 =always \\ bad chksum$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" -1" ; s s>int -1 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" -13" ; s s>int -13 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" -567.125" ; line s buffer-cpy s>fix $e0000000 -568 =always-fix$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" -6835" ; s s>int -6835 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" -6835x" ; s s>int -6835 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 0" ; line s buffer-cpy s>fix 0 0 =always-fix$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 0" ; s s>int 0 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 1" ; line s buffer-cpy s>fix 0 1 =always-fix$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 1" ; s s>int 1 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 12" ; s s>int 12 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 1234.5674" ; line s cpy char S f4d 12345674 =always drop$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 1234.5674,N," ; line s cpy char S f4d 12345674 =always drop$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 1234.5674,S" ; line s cpy char S f4d -12345674 =always drop$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 1234.5678,N," ; line s cpy char S f4d 12345678 =always drop$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 128.5" ; line s buffer-cpy s>fix $80000000 128 =always-fix$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" 65b" ; s s>int 65 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" X$PMTK..$PMTK001,604,3*32" ; s set-input $/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" abcd" ; line s buffer-cpy null-terminate  line next$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" abcd," ; s drop find-comma 4 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" abcd,ef" ; line s buffer-cpy drop 4 + 0 swap c!  line next$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" abcd,ef" ; s drop find-comma 4 =always$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" abcd,ef" ; s drop next$/;"	d
s	embello/flib/uart/gps-test.fs	/^: s s" abcdX" ; s 1- null-terminate  s drop find-comma 4 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" " ; line s cpy char S f4d 0 =always drop$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" " ; s s>int 0 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" $PMTK001,604,3" ; s set-input read-line  0 =always \\ no chksum$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" $PMTK001,604,3*32" ; s set-input read-line 14 =always \\ correct chksum$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" $PMTK001,604,3*33" ; s set-input read-line  0 =always \\ bad chksum$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" -1" ; s s>int -1 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" -13" ; s s>int -13 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" -567.125" ; line s buffer-cpy s>fix $e0000000 -568 =always-fix$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" -6835" ; s s>int -6835 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" -6835x" ; s s>int -6835 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 0" ; line s buffer-cpy s>fix 0 0 =always-fix$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 0" ; s s>int 0 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 1" ; line s buffer-cpy s>fix 0 1 =always-fix$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 1" ; s s>int 1 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 12" ; s s>int 12 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 1234.5674" ; line s cpy char S f4d 12345674 =always drop$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 1234.5674,N," ; line s cpy char S f4d 12345674 =always drop$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 1234.5674,S" ; line s cpy char S f4d -12345674 =always drop$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 1234.5678,N," ; line s cpy char S f4d 12345678 =always drop$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 128.5" ; line s buffer-cpy s>fix $80000000 128 =always-fix$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" 65b" ; s s>int 65 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" X$PMTK..$PMTK001,604,3*32" ; s set-input $/;"	d
s	flib/./uart/gps-test.fs	/^: s s" abcd" ; line s buffer-cpy null-terminate  line next$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" abcd," ; s drop find-comma 4 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" abcd,ef" ; line s buffer-cpy drop 4 + 0 swap c!  line next$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" abcd,ef" ; s drop find-comma 4 =always$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" abcd,ef" ; s drop next$/;"	d
s	flib/./uart/gps-test.fs	/^: s s" abcdX" ; s 1- null-terminate  s drop find-comma 4 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" " ; line s cpy char S f4d 0 =always drop$/;"	d
s	flib/uart/gps-test.fs	/^: s s" " ; s s>int 0 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" $PMTK001,604,3" ; s set-input read-line  0 =always \\ no chksum$/;"	d
s	flib/uart/gps-test.fs	/^: s s" $PMTK001,604,3*32" ; s set-input read-line 14 =always \\ correct chksum$/;"	d
s	flib/uart/gps-test.fs	/^: s s" $PMTK001,604,3*33" ; s set-input read-line  0 =always \\ bad chksum$/;"	d
s	flib/uart/gps-test.fs	/^: s s" -1" ; s s>int -1 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" -13" ; s s>int -13 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" -567.125" ; line s buffer-cpy s>fix $e0000000 -568 =always-fix$/;"	d
s	flib/uart/gps-test.fs	/^: s s" -6835" ; s s>int -6835 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" -6835x" ; s s>int -6835 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 0" ; line s buffer-cpy s>fix 0 0 =always-fix$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 0" ; s s>int 0 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 1" ; line s buffer-cpy s>fix 0 1 =always-fix$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 1" ; s s>int 1 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 12" ; s s>int 12 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 1234.5674" ; line s cpy char S f4d 12345674 =always drop$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 1234.5674,N," ; line s cpy char S f4d 12345674 =always drop$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 1234.5674,S" ; line s cpy char S f4d -12345674 =always drop$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 1234.5678,N," ; line s cpy char S f4d 12345678 =always drop$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 128.5" ; line s buffer-cpy s>fix $80000000 128 =always-fix$/;"	d
s	flib/uart/gps-test.fs	/^: s s" 65b" ; s s>int 65 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" X$PMTK..$PMTK001,604,3*32" ; s set-input $/;"	d
s	flib/uart/gps-test.fs	/^: s s" abcd" ; line s buffer-cpy null-terminate  line next$/;"	d
s	flib/uart/gps-test.fs	/^: s s" abcd," ; s drop find-comma 4 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" abcd,ef" ; line s buffer-cpy drop 4 + 0 swap c!  line next$/;"	d
s	flib/uart/gps-test.fs	/^: s s" abcd,ef" ; s drop find-comma 4 =always$/;"	d
s	flib/uart/gps-test.fs	/^: s s" abcd,ef" ; s drop next$/;"	d
s	flib/uart/gps-test.fs	/^: s s" abcdX" ; s 1- null-terminate  s drop find-comma 4 =always$/;"	d
s	follower/hc05-test.fs	/^: s s" hello world" ; s s string-eq -1 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" " ; line s cpy char S f4d 0 =always drop$/;"	d
s	tracker/tracker-test.fs	/^: s s" " ; s s>int 0 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" $PMTK001,604,3" ; s set-input read-line  0 =always \\ no chksum$/;"	d
s	tracker/tracker-test.fs	/^: s s" $PMTK001,604,3*32" ; s set-input read-line 14 =always \\ correct chksum$/;"	d
s	tracker/tracker-test.fs	/^: s s" $PMTK001,604,3*33" ; s set-input read-line  0 =always \\ bad chksum$/;"	d
s	tracker/tracker-test.fs	/^: s s" -1" ; s s>int -1 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" -13" ; s s>int -13 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" -567.125" ; line s buffer-cpy s>fix $e0000000 -568 =always-fix$/;"	d
s	tracker/tracker-test.fs	/^: s s" -6835" ; s s>int -6835 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" -6835x" ; s s>int -6835 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" 0" ; line s buffer-cpy s>fix 0 0 =always-fix$/;"	d
s	tracker/tracker-test.fs	/^: s s" 0" ; s s>int 0 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" 1" ; line s buffer-cpy s>fix 0 1 =always-fix$/;"	d
s	tracker/tracker-test.fs	/^: s s" 1" ; s s>int 1 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" 12" ; s s>int 12 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" 1234.5674" ; line s cpy char S f4d 12345674 =always drop$/;"	d
s	tracker/tracker-test.fs	/^: s s" 1234.5674,N," ; line s cpy char S f4d 12345674 =always drop$/;"	d
s	tracker/tracker-test.fs	/^: s s" 1234.5674,S" ; line s cpy char S f4d -12345674 =always drop$/;"	d
s	tracker/tracker-test.fs	/^: s s" 1234.5678,N," ; line s cpy char S f4d 12345678 =always drop$/;"	d
s	tracker/tracker-test.fs	/^: s s" 128.5" ; line s buffer-cpy s>fix $80000000 128 =always-fix$/;"	d
s	tracker/tracker-test.fs	/^: s s" 65b" ; s s>int 65 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" X$PMTK..$PMTK001,604,3*32" ; s set-input $/;"	d
s	tracker/tracker-test.fs	/^: s s" abcd" ; line s buffer-cpy null-terminate  line next$/;"	d
s	tracker/tracker-test.fs	/^: s s" abcd," ; s drop find-comma 4 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" abcd,ef" ; line s buffer-cpy drop 4 + 0 swap c!  line next$/;"	d
s	tracker/tracker-test.fs	/^: s s" abcd,ef" ; s drop find-comma 4 =always$/;"	d
s	tracker/tracker-test.fs	/^: s s" abcd,ef" ; s drop next$/;"	d
s	tracker/tracker-test.fs	/^: s s" abcdX" ; s 1- null-terminate  s drop find-comma 4 =always$/;"	d
s.b-all@	embello/flib/any/aes128.fs	/^: s.b-all@ scratch 16 0 do dup i + dup c@ s.b@ swap c! loop drop ;$/;"	d
s.b-all@	flib/./any/aes128.fs	/^: s.b-all@ scratch 16 0 do dup i + dup c@ s.b@ swap c! loop drop ;$/;"	d
s.b-all@	flib/any/aes128.fs	/^: s.b-all@ scratch 16 0 do dup i + dup c@ s.b@ swap c! loop drop ;$/;"	d
s.b@	embello/flib/any/aes128.fs	/^: s.b@ ( b -- b ) dup $0F and swap 4 rshift $0F and 16 * + s.box + c@ ;$/;"	d
s.b@	flib/./any/aes128.fs	/^: s.b@ ( b -- b ) dup $0F and swap 4 rshift $0F and 16 * + s.box + c@ ;$/;"	d
s.b@	flib/any/aes128.fs	/^: s.b@ ( b -- b ) dup $0F and swap 4 rshift $0F and 16 * + s.box + c@ ;$/;"	d
s2f	embello/flib/any/pid.fs	/^: s2f ( s -- f )  \\ Signed number to fixed point$/;"	d
s2f	flib/./any/pid.fs	/^: s2f ( s -- f )  \\ Signed number to fixed point$/;"	d
s2f	flib/any/pid.fs	/^: s2f ( s -- f )  \\ Signed number to fixed point$/;"	d
s>fix	embello/flib/uart/gps.fs	/^: s>fix ( c-addr len -- df ) \\ parse fixed-point from string$/;"	d
s>fix	flib/./uart/gps.fs	/^: s>fix ( c-addr len -- df ) \\ parse fixed-point from string$/;"	d
s>fix	flib/uart/gps.fs	/^: s>fix ( c-addr len -- df ) \\ parse fixed-point from string$/;"	d
s>int	embello/flib/uart/gps.fs	/^: s>int ( c-addr len -- n ) \\ parse int from string$/;"	d
s>int	flib/./uart/gps.fs	/^: s>int ( c-addr len -- n ) \\ parse int from string$/;"	d
s>int	flib/uart/gps.fs	/^: s>int ( c-addr len -- n ) \\ parse int from string$/;"	d
s>n	tlib/numprint.fs	/^: s>n ( s n -- c-addr len ) \\ convert signed number to n-character string$/;"	d
save-char	embello/flib/uart/gps.fs	/^: save-char ( i c -- c i++ ) swap 2dup line + c! 1+ ;$/;"	d
save-char	flib/./uart/gps.fs	/^: save-char ( i c -- c i++ ) swap 2dup line + c! 1+ ;$/;"	d
save-char	flib/uart/gps.fs	/^: save-char ( i c -- c i++ ) swap 2dup line + c! 1+ ;$/;"	d
save-char	follower/hc05.fs	/^: save-char ( i c -- i ) over line + c! 1+ ;$/;"	d
save-task	embello/flib/mecrisp/multi.fs	/^: save-task  ( -- save )    up @ 2 cells + inline ;$/;"	d
save-task	flib/./mecrisp/multi.fs	/^: save-task  ( -- save )    up @ 2 cells + inline ;$/;"	d
save-task	flib/mecrisp/multi.fs	/^: save-task  ( -- save )    up @ 2 cells + inline ;$/;"	d
save-to-buf	embello/suf/ex/old.fs	/^: save-to-buf$/;"	d
sd-cmd	embello/flib/spi/sdcard.fs	/^: sd-cmd ( cmd arg -- u )$/;"	d
sd-cmd	flib/./spi/sdcard.fs	/^: sd-cmd ( cmd arg -- u )$/;"	d
sd-cmd	flib/spi/sdcard.fs	/^: sd-cmd ( cmd arg -- u )$/;"	d
sd-copy	embello/flib/spi/sdcard.fs	/^: sd-copy ( f n -- )$/;"	d
sd-copy	flib/./spi/sdcard.fs	/^: sd-copy ( f n -- )$/;"	d
sd-copy	flib/spi/sdcard.fs	/^: sd-copy ( f n -- )$/;"	d
sd-init	embello/flib/spi/sdcard.fs	/^: sd-init ( -- )$/;"	d
sd-init	flib/./spi/sdcard.fs	/^: sd-init ( -- )$/;"	d
sd-init	flib/spi/sdcard.fs	/^: sd-init ( -- )$/;"	d
sd-mount	embello/flib/spi/sdcard.fs	/^: sd-mount ( -- )  \\ mount a FAT16 volume, extract the key disk info$/;"	d
sd-mount	flib/./spi/sdcard.fs	/^: sd-mount ( -- )  \\ mount a FAT16 volume, extract the key disk info$/;"	d
sd-mount	flib/spi/sdcard.fs	/^: sd-mount ( -- )  \\ mount a FAT16 volume, extract the key disk info$/;"	d
sd-mount.	embello/flib/spi/sdcard.fs	/^: sd-mount. ( -- )  \\ mount and show some basic card info$/;"	d
sd-mount.	flib/./spi/sdcard.fs	/^: sd-mount. ( -- )  \\ mount and show some basic card info$/;"	d
sd-mount.	flib/spi/sdcard.fs	/^: sd-mount. ( -- )  \\ mount and show some basic card info$/;"	d
sd-read	embello/flib/spi/sdcard.fs	/^: sd-read ( page -- )  \\ read one 512-byte page from sdcard$/;"	d
sd-read	flib/./spi/sdcard.fs	/^: sd-read ( page -- )  \\ read one 512-byte page from sdcard$/;"	d
sd-read	flib/spi/sdcard.fs	/^: sd-read ( page -- )  \\ read one 512-byte page from sdcard$/;"	d
sd-size	embello/flib/spi/sdcard.fs	/^: sd-size ( -- n )  \\ return card size in 512-byte blocks$/;"	d
sd-size	flib/./spi/sdcard.fs	/^: sd-size ( -- n )  \\ return card size in 512-byte blocks$/;"	d
sd-size	flib/spi/sdcard.fs	/^: sd-size ( -- n )  \\ return card size in 512-byte blocks$/;"	d
sd-slow	embello/flib/spi/sdcard.fs	/^: sd-slow ( -- )  SPI1-CR1 @  %111000 or  SPI1-CR1 ! ;  \\ clk\/256$/;"	d
sd-slow	flib/./spi/sdcard.fs	/^: sd-slow ( -- )  SPI1-CR1 @  %111000 or  SPI1-CR1 ! ;  \\ clk\/256$/;"	d
sd-slow	flib/spi/sdcard.fs	/^: sd-slow ( -- )  SPI1-CR1 @  %111000 or  SPI1-CR1 ! ;  \\ clk\/256$/;"	d
sd-wait	embello/flib/spi/sdcard.fs	/^: sd-wait ( -- )  begin $FF >spi> ( dup . ) $FF = until ;$/;"	d
sd-wait	flib/./spi/sdcard.fs	/^: sd-wait ( -- )  begin $FF >spi> ( dup . ) $FF = until ;$/;"	d
sd-wait	flib/spi/sdcard.fs	/^: sd-wait ( -- )  begin $FF >spi> ( dup . ) $FF = until ;$/;"	d
sd-write	embello/flib/spi/sdcard.fs	/^: sd-write ( page -- )  \\ write one 512-byte page to sdcard$/;"	d
sd-write	flib/./spi/sdcard.fs	/^: sd-write ( page -- )  \\ write one 512-byte page to sdcard$/;"	d
sd-write	flib/spi/sdcard.fs	/^: sd-write ( page -- )  \\ write one 512-byte page to sdcard$/;"	d
sd.#ent	embello/flib/spi/sdcard.fs	/^0 variable sd.#ent  \\ number of root entries$/;"	d
sd.#ent	flib/./spi/sdcard.fs	/^0 variable sd.#ent  \\ number of root entries$/;"	d
sd.#ent	flib/spi/sdcard.fs	/^0 variable sd.#ent  \\ number of root entries$/;"	d
sd.data	embello/flib/spi/sdcard.fs	/^0 variable sd.data  \\ block offset of cluster #2$/;"	d
sd.data	flib/./spi/sdcard.fs	/^0 variable sd.data  \\ block offset of cluster #2$/;"	d
sd.data	flib/spi/sdcard.fs	/^0 variable sd.data  \\ block offset of cluster #2$/;"	d
sd.fat	embello/flib/spi/sdcard.fs	/^0 variable sd.fat   \\ block # of first FAT copy$/;"	d
sd.fat	flib/./spi/sdcard.fs	/^0 variable sd.fat   \\ block # of first FAT copy$/;"	d
sd.fat	flib/spi/sdcard.fs	/^0 variable sd.fat   \\ block # of first FAT copy$/;"	d
sd.root	embello/flib/spi/sdcard.fs	/^0 variable sd.root  \\ block # of first root sector$/;"	d
sd.root	flib/./spi/sdcard.fs	/^0 variable sd.root  \\ block # of first root sector$/;"	d
sd.root	flib/spi/sdcard.fs	/^0 variable sd.root  \\ block # of first root sector$/;"	d
sd.spc	embello/flib/spi/sdcard.fs	/^0 variable sd.spc   \\ sectors per cluster (64)$/;"	d
sd.spc	flib/./spi/sdcard.fs	/^0 variable sd.spc   \\ sectors per cluster (64)$/;"	d
sd.spc	flib/spi/sdcard.fs	/^0 variable sd.spc   \\ sectors per cluster (64)$/;"	d
seconds	embello/flib/mecrisp/multi.fs	/^\\ 0 variable seconds$/;"	d
seconds	flib/./mecrisp/multi.fs	/^\\ 0 variable seconds$/;"	d
seconds	flib/mecrisp/multi.fs	/^\\ 0 variable seconds$/;"	d
see	embello/flib/mecrisp/disassembler-m0.fs	/^: see ( -- ) \\ Takes name of definition and shows its contents from beginning to first ret$/;"	d
see	embello/flib/mecrisp/disassembler-m3.fs	/^: see ( -- ) \\ Takes name of definition and shows its contents from beginning to first ret$/;"	d
see	flib/./mecrisp/disassembler-m0.fs	/^: see ( -- ) \\ Takes name of definition and shows its contents from beginning to first ret$/;"	d
see	flib/./mecrisp/disassembler-m3.fs	/^: see ( -- ) \\ Takes name of definition and shows its contents from beginning to first ret$/;"	d
see	flib/mecrisp/disassembler-m0.fs	/^: see ( -- ) \\ Takes name of definition and shows its contents from beginning to first ret$/;"	d
see	flib/mecrisp/disassembler-m3.fs	/^: see ( -- ) \\ Takes name of definition and shows its contents from beginning to first ret$/;"	d
seec	embello/flib/mecrisp/disassembler-m0.fs	/^: seec ( -- ) \\ Continues to see$/;"	d
seec	embello/flib/mecrisp/disassembler-m3.fs	/^: seec ( -- ) \\ Continues to see$/;"	d
seec	flib/./mecrisp/disassembler-m0.fs	/^: seec ( -- ) \\ Continues to see$/;"	d
seec	flib/./mecrisp/disassembler-m3.fs	/^: seec ( -- ) \\ Continues to see$/;"	d
seec	flib/mecrisp/disassembler-m0.fs	/^: seec ( -- ) \\ Continues to see$/;"	d
seec	flib/mecrisp/disassembler-m3.fs	/^: seec ( -- ) \\ Continues to see$/;"	d
send	embello/qld/dev.fs	/^: send ( b -- )  dup >spi2  xsum @ xor xsum ! ;$/;"	d
send-data	embello/suf/usb.fs	/^: send-data ( addr n -- ) usb-pend 2! ;$/;"	d
send-desc	embello/suf/usb.fs	/^: send-desc ( -- )$/;"	d
send-line	follower/hc05.fs	/^: send-line ( c-addr len -- )$/;"	d
send-next	embello/suf/usb.fs	/^: send-next ( -- )$/;"	d
send-packet	embello/jz1/ex/node.fs	/^: send-packet ( vprev vcc tint lux humi pres temp -- )$/;"	d
send-packet	embello/jz1/main.fs	/^: send-packet ( vprev vcc tint humi pres temp -- )$/;"	d
send-packet	embello/jz3/main.fs	/^: send-packet ( vprev vcc tint lux humi pres temp -- )$/;"	d
send-packet	embello/rvm/main.fs	/^: send-packet ( vy vb vg vr -- )$/;"	d
send-packet	fanctrl/fanctrl.fs	/^: send-packet ( vprev vcc tint txpow temp -- )$/;"	d
send-packet	jz1/./ex/node.fs	/^: send-packet ( vprev vcc tint lux humi pres temp -- )$/;"	d
send-packet	jz1/./main.fs	/^: send-packet ( vprev vcc tint humi pres temp -- )$/;"	d
send-packet	jz1/ex/node.fs	/^: send-packet ( vprev vcc tint lux humi pres temp -- )$/;"	d
send-packet	jz1/main.fs	/^: send-packet ( vprev vcc tint humi pres temp -- )$/;"	d
send-packet	jz3/./main.fs	/^: send-packet ( vprev vcc tint lux humi pres temp -- )$/;"	d
send-packet	jz3/main.fs	/^: send-packet ( vprev vcc tint lux humi pres temp -- )$/;"	d
send-packet	oledtemp/rftemp.fs	/^: send-packet ( vprev vcc tint lux humi pres temp -- )$/;"	d
send-packet	temp/rftemp.fs	/^: send-packet ( vprev vcc tint txpow lux humi pres temp -- )$/;"	d
send-status	fanctrl/fanctrl.fs	/^: send-status$/;"	d
send-string	follower/hc05.fs	/^: send-string ( c-addr len -- )$/;"	d
send2	embello/qld/dev.fs	/^: send2 ( n -- )  dup 8 rshift send  send ;$/;"	d
send4	embello/qld/dev.fs	/^: send4 ( u -- )  dup 16 rshift send2  send2 ;$/;"	d
serplus	embello/tex/x-serplus.fs	/^: serplus$/;"	d
set	embello/flib/any/pid.fs	/^: set ( s -- )  \\ Change setpoint on a running pid$/;"	d
set	flib/./any/pid.fs	/^: set ( s -- )  \\ Change setpoint on a running pid$/;"	d
set	flib/any/pid.fs	/^: set ( s -- )  \\ Change setpoint on a running pid$/;"	d
set-baud	follower/hc05.fs	/^: set-baud ( c-addr len -- )$/;"	d
set-input	embello/flib/uart/gps-test.fs	/^: set-input ( c-addr len -- )$/;"	d
set-input	flib/./uart/gps-test.fs	/^: set-input ( c-addr len -- )$/;"	d
set-input	flib/uart/gps-test.fs	/^: set-input ( c-addr len -- )$/;"	d
set-input	follower/hc05-test.fs	/^: set-input ( c-addr len -- )$/;"	d
set-input	tracker/tracker-test.fs	/^: set-input ( c-addr len -- )$/;"	d
set-name	follower/hc05.fs	/^: set-name ( c-addr len -- )$/;"	d
set-out	embello/jz1/ex/leds.fs	/^: set-out ( pin -- )  OMODE-PP over io-mode!  ioc! ;$/;"	d
set-out	jz1/./ex/leds.fs	/^: set-out ( pin -- )  OMODE-PP over io-mode!  ioc! ;$/;"	d
set-out	jz1/ex/leds.fs	/^: set-out ( pin -- )  OMODE-PP over io-mode!  ioc! ;$/;"	d
set-serial	embello/suf/usb.fs	/^: set-serial ( -- addr )  \\ fill serial number in as UTF-16 descriptor$/;"	d
set-val	embello/flib/any/pid.fs	/^0    variable set-val      \\ current setpoint$/;"	d
set-val	flib/./any/pid.fs	/^0    variable set-val      \\ current setpoint$/;"	d
set-val	flib/any/pid.fs	/^0    variable set-val      \\ current setpoint$/;"	d
set5x	embello/cag/ex/io.fs	/^: set5x   PIN ios! PIN ios! PIN ios! PIN ios! PIN ios! ;$/;"	d
set5x	embello/g6s/ex/io.fs	/^: set5x   PIN ios! PIN ios! PIN ios! PIN ios! PIN ios! ;$/;"	d
sets	embello/cag/ex/io.fs	/^: sets   NUM\/5 0 do set5x     loop ;$/;"	d
sets	embello/g6s/ex/io.fs	/^: sets   NUM\/5 0 do set5x     loop ;$/;"	d
setup	embello/g6s/ex/tasks.fs	/^: setup$/;"	d
setup	embello/g6s/ex/timers.fs	/^: setup$/;"	d
setup	embello/jz3/ex/leds.fs	/^: setup  PA0 out  PA1 out  PA2 out  PA3 out  PA4 out  PA5 out ;$/;"	d
setup	embello/jz3/ex/sensor.fs	/^: setup  bme-power bme-init . bme-calib ;$/;"	d
setup	embello/jz3/ook/rf69ook-polling.fs	/^: setup$/;"	d
setup	jz3/./ex/leds.fs	/^: setup  PA0 out  PA1 out  PA2 out  PA3 out  PA4 out  PA5 out ;$/;"	d
setup	jz3/./ex/sensor.fs	/^: setup  bme-power bme-init . bme-calib ;$/;"	d
setup	jz3/./ook/rf69ook-polling.fs	/^: setup$/;"	d
setup	jz3/ex/leds.fs	/^: setup  PA0 out  PA1 out  PA2 out  PA3 out  PA4 out  PA5 out ;$/;"	d
setup	jz3/ex/sensor.fs	/^: setup  bme-power bme-init . bme-calib ;$/;"	d
setup	jz3/ook/rf69ook-polling.fs	/^: setup$/;"	d
sh-bytes	embello/flib/any/aes128.fs	/^: sh-bytes r1< r2< r3< ;$/;"	d
sh-bytes	flib/./any/aes128.fs	/^: sh-bytes r1< r2< r3< ;$/;"	d
sh-bytes	flib/any/aes128.fs	/^: sh-bytes r1< r2< r3< ;$/;"	d
show-logo	embello/flib/i2c/ssd1306.fs	/^: show-logo ( -- )  \\ show the JeeLabs logo$/;"	d
show-logo	flib/./i2c/ssd1306.fs	/^: show-logo ( -- )  \\ show the JeeLabs logo$/;"	d
show-logo	flib/i2c/ssd1306.fs	/^: show-logo ( -- )  \\ show the JeeLabs logo$/;"	d
show-oled	oledtemp/rftemp.fs	/^: show-oled ( temp -- temp ) \\ show the temperature on the OLED and return it again$/;"	d
show-readings	embello/jz1/main.fs	/^: show-readings ( vprev vcc tint humi pres temp -- )$/;"	d
show-readings	embello/jz3/main.fs	/^: show-readings ( vprev vcc tint lux humi pres temp -- )$/;"	d
show-readings	embello/rvm/main.fs	/^: show-readings ( vy vb vg vr -- )$/;"	d
show-readings	fanctrl/fanctrl.fs	/^: show-readings ( vprev vcc tint txpow temp -- ) \\ print readings on console$/;"	d
show-readings	jz1/./main.fs	/^: show-readings ( vprev vcc tint humi pres temp -- )$/;"	d
show-readings	jz1/main.fs	/^: show-readings ( vprev vcc tint humi pres temp -- )$/;"	d
show-readings	jz3/./main.fs	/^: show-readings ( vprev vcc tint lux humi pres temp -- )$/;"	d
show-readings	jz3/main.fs	/^: show-readings ( vprev vcc tint lux humi pres temp -- )$/;"	d
show-readings	oledtemp/rftemp.fs	/^: show-readings ( vprev vcc tint lux humi pres temp -- ) \\ print readings on console$/;"	d
show-readings	temp/rftemp.fs	/^: show-readings ( vprev vcc tint txpow lux humi pres temp -- ) \\ print readings on console$/;"	d
show-reply	embello/jz4/dev.fs	/^: show-reply rf.buf 2+ swap 2- var. ;$/;"	d
show1timer	embello/flib/any/timed.fs	/^: show1timer ( n -- )$/;"	d
show1timer	flib/./any/timed.fs	/^: show1timer ( n -- )$/;"	d
show1timer	flib/any/timed.fs	/^: show1timer ( n -- )$/;"	d
showdigit	embello/flib/any/digits.fs	/^: showdigit ( n x -- )$/;"	d
showdigit	flib/./any/digits.fs	/^: showdigit ( n x -- )$/;"	d
showdigit	flib/any/digits.fs	/^: showdigit ( n x -- )$/;"	d
showdigit	oledtemp/e-oled.fs	/^: showdigit ( n x -- )$/;"	d
showdigit	tlib/oled.fs	/^: showdigit ( n x -- )$/;"	d
showdot	oledtemp/e-oled.fs	/^: showdot ( x -- )$/;"	d
showdot	tlib/oled.fs	/^: showdot ( x -- )$/;"	d
shownum	embello/flib/any/digits.fs	/^: shownum ( u -- )$/;"	d
shownum	flib/./any/digits.fs	/^: shownum ( u -- )$/;"	d
shownum	flib/any/digits.fs	/^: shownum ( u -- )$/;"	d
shownum	oledtemp/e-oled.fs	/^: shownum ( u -- )$/;"	d
shownum1.3	tlib/oled.fs	/^: shownum1.3 ( u -- )$/;"	d
shownum2.2	tlib/oled.fs	/^: shownum2.2 ( u -- )$/;"	d
shownum3.1	tlib/oled.fs	/^: shownum3.1 ( u -- )$/;"	d
showrx	embello/flib/spi/rf12.fs	/^: showrx ( -- )$/;"	d
showrx	flib/./spi/rf12.fs	/^: showrx ( -- )$/;"	d
showrx	flib/spi/rf12.fs	/^: showrx ( -- )$/;"	d
si!	embello/flib/i2c/si570.fs	/^: si! ( b u -- ) 7 - si.buf + c! ;$/;"	d
si!	flib/./i2c/si570.fs	/^: si! ( b u -- ) 7 - si.buf + c! ;$/;"	d
si!	flib/i2c/si570.fs	/^: si! ( b u -- ) 7 - si.buf + c! ;$/;"	d
si-rd	embello/flib/i2c/si570.fs	/^: si-rd ( addr n reg -- addr+n )$/;"	d
si-rd	flib/./i2c/si570.fs	/^: si-rd ( addr n reg -- addr+n )$/;"	d
si-rd	flib/i2c/si570.fs	/^: si-rd ( addr n reg -- addr+n )$/;"	d
si-set	embello/flib/i2c/si570.fs	/^: si-set$/;"	d
si-set	flib/./i2c/si570.fs	/^: si-set$/;"	d
si-set	flib/i2c/si570.fs	/^: si-set$/;"	d
si-wr	embello/flib/i2c/si570.fs	/^: si-wr ( addr n reg -- addr+n )$/;"	d
si-wr	flib/./i2c/si570.fs	/^: si-wr ( addr n reg -- addr+n )$/;"	d
si-wr	flib/i2c/si570.fs	/^: si-wr ( addr n reg -- addr+n )$/;"	d
si.max	embello/flib/i2c/si570.fs	/^        0 variable si.max$/;"	d
si.max	flib/./i2c/si570.fs	/^        0 variable si.max$/;"	d
si.max	flib/i2c/si570.fs	/^        0 variable si.max$/;"	d
si.mul	embello/flib/i2c/si570.fs	/^114285000 variable si.mul$/;"	d
si.mul	flib/./i2c/si570.fs	/^114285000 variable si.mul$/;"	d
si.mul	flib/i2c/si570.fs	/^114285000 variable si.mul$/;"	d
si570-freq	embello/flib/i2c/si570.fs	/^: si570-freq ( freq -- )$/;"	d
si570-freq	flib/./i2c/si570.fs	/^: si570-freq ( freq -- )$/;"	d
si570-freq	flib/i2c/si570.fs	/^: si570-freq ( freq -- )$/;"	d
si570-init	embello/flib/i2c/si570.fs	/^: si570-init ( -- nak )$/;"	d
si570-init	flib/./i2c/si570.fs	/^: si570-init ( -- nak )$/;"	d
si570-init	flib/i2c/si570.fs	/^: si570-init ( -- nak )$/;"	d
si@	embello/flib/i2c/si570.fs	/^: si@ ( u -- b ) 7 - si.buf + c@ ;$/;"	d
si@	flib/./i2c/si570.fs	/^: si@ ( u -- b ) 7 - si.buf + c@ ;$/;"	d
si@	flib/i2c/si570.fs	/^: si@ ( u -- b ) 7 - si.buf + c@ ;$/;"	d
sign?	embello/flib/uart/gps.fs	/^: sign? ( n x digit -- n x f ) -3 = 2 pick 0= and ; \\ '-' - '0'$/;"	d
sign?	flib/./uart/gps.fs	/^: sign? ( n x digit -- n x f ) -3 = 2 pick 0= and ; \\ '-' - '0'$/;"	d
sign?	flib/uart/gps.fs	/^: sign? ( n x digit -- n x f ) -3 = 2 pick 0= and ; \\ '-' - '0'$/;"	d
sine	embello/flib/mecrisp/sine.fs	/^: sine   ( f-angle -- f-sine )   cordic 2drop 2nip   2-foldable ;$/;"	d
sine	flib/./mecrisp/sine.fs	/^: sine   ( f-angle -- f-sine )   cordic 2drop 2nip   2-foldable ;$/;"	d
sine	flib/mecrisp/sine.fs	/^: sine   ( f-angle -- f-sine )   cordic 2drop 2nip   2-foldable ;$/;"	d
singletask	embello/flib/mecrisp/multi.fs	/^: singletask ( -- ) [']  nop    hook-pause ! ;$/;"	d
singletask	flib/./mecrisp/multi.fs	/^: singletask ( -- ) [']  nop    hook-pause ! ;$/;"	d
singletask	flib/mecrisp/multi.fs	/^: singletask ( -- ) [']  nop    hook-pause ! ;$/;"	d
skip-line	embello/flib/uart/gps.fs	/^: skip-line ( -- ) begin get-key LF = until ;$/;"	d
skip-line	flib/./uart/gps.fs	/^: skip-line ( -- ) begin get-key LF = until ;$/;"	d
skip-line	flib/uart/gps.fs	/^: skip-line ( -- ) begin get-key LF = until ;$/;"	d
sleep	embello/flib/mecrisp/multi.fs	/^: sleep ( -- ) [ $BF30 h, ] inline ; \\ WFI Opcode, enters sleep mode$/;"	d
sleep	flib/./mecrisp/multi.fs	/^: sleep ( -- ) [ $BF30 h, ] inline ; \\ WFI Opcode, enters sleep mode$/;"	d
sleep	flib/mecrisp/multi.fs	/^: sleep ( -- ) [ $BF30 h, ] inline ; \\ WFI Opcode, enters sleep mode$/;"	d
sleep-if-alone	embello/flib/any/timed.fs	/^: sleep-if-alone ( -- )$/;"	d
sleep-if-alone	flib/./any/timed.fs	/^: sleep-if-alone ( -- )$/;"	d
sleep-if-alone	flib/any/timed.fs	/^: sleep-if-alone ( -- )$/;"	d
slow	embello/jz1/ex/clock.fs	/^: slow reduce 65KHz 10 systick-hz ;$/;"	d
slow	embello/jz3/ex/clock.fs	/^: slow 65KHz  10   systick-hz ;  \\ 280 µA$/;"	d
slow	jz1/./ex/clock.fs	/^: slow reduce 65KHz 10 systick-hz ;$/;"	d
slow	jz1/ex/clock.fs	/^: slow reduce 65KHz 10 systick-hz ;$/;"	d
slow	jz3/./ex/clock.fs	/^: slow 65KHz  10   systick-hz ;  \\ 280 µA$/;"	d
slow	jz3/ex/clock.fs	/^: slow 65KHz  10   systick-hz ;  \\ 280 µA$/;"	d
slow-usart1a	embello/jz1/ex/clock.fs	/^: slow-usart1a$/;"	d
slow-usart1a	embello/jz3/ex/clock.fs	/^: slow-usart1a$/;"	d
slow-usart1a	jz1/./ex/clock.fs	/^: slow-usart1a$/;"	d
slow-usart1a	jz1/ex/clock.fs	/^: slow-usart1a$/;"	d
slow-usart1a	jz3/./ex/clock.fs	/^: slow-usart1a$/;"	d
slow-usart1a	jz3/ex/clock.fs	/^: slow-usart1a$/;"	d
slow-usart1b	embello/jz1/ex/clock.fs	/^: slow-usart1b$/;"	d
slow-usart1b	embello/jz3/ex/clock.fs	/^: slow-usart1b$/;"	d
slow-usart1b	jz1/./ex/clock.fs	/^: slow-usart1b$/;"	d
slow-usart1b	jz1/ex/clock.fs	/^: slow-usart1b$/;"	d
slow-usart1b	jz3/./ex/clock.fs	/^: slow-usart1b$/;"	d
slow-usart1b	jz3/ex/clock.fs	/^: slow-usart1b$/;"	d
smem-cmd	embello/flib/spi/smem.fs	/^: smem-cmd ( cmd -- )  +spi >spi ;$/;"	d
smem-cmd	flib/./spi/smem.fs	/^: smem-cmd ( cmd -- )  +spi >spi ;$/;"	d
smem-cmd	flib/spi/smem.fs	/^: smem-cmd ( cmd -- )  +spi >spi ;$/;"	d
smem-erase	embello/flib/spi/smem.fs	/^: smem-erase ( page -- )  \\ erase one 4K sector in flash memory$/;"	d
smem-erase	flib/./spi/smem.fs	/^: smem-erase ( page -- )  \\ erase one 4K sector in flash memory$/;"	d
smem-erase	flib/spi/smem.fs	/^: smem-erase ( page -- )  \\ erase one 4K sector in flash memory$/;"	d
smem-id	embello/flib/spi/smem.fs	/^: smem-id ( -- u)  \\ return the SPI memory's manufacturer and device ID$/;"	d
smem-id	flib/./spi/smem.fs	/^: smem-id ( -- u)  \\ return the SPI memory's manufacturer and device ID$/;"	d
smem-id	flib/spi/smem.fs	/^: smem-id ( -- u)  \\ return the SPI memory's manufacturer and device ID$/;"	d
smem-page	embello/flib/spi/smem.fs	/^: smem-page ( u -- )  dup 8 rshift >spi >spi 0 >spi ;$/;"	d
smem-page	flib/./spi/smem.fs	/^: smem-page ( u -- )  dup 8 rshift >spi >spi 0 >spi ;$/;"	d
smem-page	flib/spi/smem.fs	/^: smem-page ( u -- )  dup 8 rshift >spi >spi 0 >spi ;$/;"	d
smem-size	embello/flib/spi/smem.fs	/^: smem-size ( -- u )  \\ return size of spi memory chip in KB$/;"	d
smem-size	flib/./spi/smem.fs	/^: smem-size ( -- u )  \\ return size of spi memory chip in KB$/;"	d
smem-size	flib/spi/smem.fs	/^: smem-size ( -- u )  \\ return size of spi memory chip in KB$/;"	d
smem-uid	embello/flib/spi/smem.fs	/^: smem-uid ( -- u1 u2 )  \\ return the chip's 64-bit unique ID$/;"	d
smem-uid	flib/./spi/smem.fs	/^: smem-uid ( -- u1 u2 )  \\ return the chip's 64-bit unique ID$/;"	d
smem-uid	flib/spi/smem.fs	/^: smem-uid ( -- u1 u2 )  \\ return the chip's 64-bit unique ID$/;"	d
smem-wait	embello/flib/spi/smem.fs	/^: smem-wait ( -- )  \\ wait in a busy loop as long as spi memory is busy$/;"	d
smem-wait	flib/./spi/smem.fs	/^: smem-wait ( -- )  \\ wait in a busy loop as long as spi memory is busy$/;"	d
smem-wait	flib/spi/smem.fs	/^: smem-wait ( -- )  \\ wait in a busy loop as long as spi memory is busy$/;"	d
smem-wcmd	embello/flib/spi/smem.fs	/^: smem-wcmd ( cmd -- )  smem-wait  $06 smem-cmd -spi smem-cmd ;$/;"	d
smem-wcmd	flib/./spi/smem.fs	/^: smem-wcmd ( cmd -- )  smem-wait  $06 smem-cmd -spi smem-cmd ;$/;"	d
smem-wcmd	flib/spi/smem.fs	/^: smem-wcmd ( cmd -- )  smem-wait  $06 smem-cmd -spi smem-cmd ;$/;"	d
smem-wipe	embello/flib/spi/smem.fs	/^: smem-wipe ( -- )  \\ wipe entire flash memory$/;"	d
smem-wipe	flib/./spi/smem.fs	/^: smem-wipe ( -- )  \\ wipe entire flash memory$/;"	d
smem-wipe	flib/spi/smem.fs	/^: smem-wipe ( -- )  \\ wipe entire flash memory$/;"	d
smem32b	embello/flib/spi/smem.fs	/^: smem32b ( -- u )  \\ get 4 SPI bytes and return them as one 32b word$/;"	d
smem32b	flib/./spi/smem.fs	/^: smem32b ( -- u )  \\ get 4 SPI bytes and return them as one 32b word$/;"	d
smem32b	flib/spi/smem.fs	/^: smem32b ( -- u )  \\ get 4 SPI bytes and return them as one 32b word$/;"	d
smem>	embello/flib/spi/smem.fs	/^: smem> ( addr page )  \\ read 256 bytes from specified page$/;"	d
smem>	flib/./spi/smem.fs	/^: smem> ( addr page )  \\ read 256 bytes from specified page$/;"	d
smem>	flib/spi/smem.fs	/^: smem> ( addr page )  \\ read 256 bytes from specified page$/;"	d
snooze	embello/jz1/ex/clock.fs	/^: snooze slow 6 1 do i . 10 ( *100 ) ms loop  fast ;  \\ 450 µA$/;"	d
snooze	jz1/./ex/clock.fs	/^: snooze slow 6 1 do i . 10 ( *100 ) ms loop  fast ;  \\ 450 µA$/;"	d
snooze	jz1/ex/clock.fs	/^: snooze slow 6 1 do i . 10 ( *100 ) ms loop  fast ;  \\ 450 µA$/;"	d
sof	embello/qld/dev.fs	/^: sof ( -- )  $5A >spi2  $FF xsum ! ;$/;"	d
spi!ssel	embello/flib/stm32l0/spi.fs	/^: spi!ssel ( ssel -- ) \\ set chip-select pin, e.g. "PA4 spi!ssel"$/;"	d
spi!ssel	flib/./stm32l0/spi.fs	/^: spi!ssel ( ssel -- ) \\ set chip-select pin, e.g. "PA4 spi!ssel"$/;"	d
spi!ssel	flib/stm32l0/spi.fs	/^: spi!ssel ( ssel -- ) \\ set chip-select pin, e.g. "PA4 spi!ssel"$/;"	d
spi-init	embello/flib/any/spi-bb.fs	/^: spi-init ( -- )  \\ set up bit-banged SPI$/;"	d
spi-init	embello/flib/stm32f1/spi.fs	/^: spi-init ( -- )  \\ set up hardware SPI$/;"	d
spi-init	embello/flib/stm32l0/spi.fs	/^: spi-init ( -- )  \\ set up hardware SPI$/;"	d
spi-init	flib/./any/spi-bb.fs	/^: spi-init ( -- )  \\ set up bit-banged SPI$/;"	d
spi-init	flib/./stm32f1/spi.fs	/^: spi-init ( -- )  \\ set up hardware SPI$/;"	d
spi-init	flib/./stm32l0/spi.fs	/^: spi-init ( -- )  \\ set up hardware SPI$/;"	d
spi-init	flib/any/spi-bb.fs	/^: spi-init ( -- )  \\ set up bit-banged SPI$/;"	d
spi-init	flib/stm32f1/spi.fs	/^: spi-init ( -- )  \\ set up hardware SPI$/;"	d
spi-init	flib/stm32l0/spi.fs	/^: spi-init ( -- )  \\ set up hardware SPI$/;"	d
spi-push	embello/flib/stm32l0/spi.fs	/^: spi-push ( c spi1-sr -- spi1-sr ) swap over spi1>dr ! inline ;$/;"	d
spi-push	flib/./stm32l0/spi.fs	/^: spi-push ( c spi1-sr -- spi1-sr ) swap over spi1>dr ! inline ;$/;"	d
spi-push	flib/stm32l0/spi.fs	/^: spi-push ( c spi1-sr -- spi1-sr ) swap over spi1>dr ! inline ;$/;"	d
spi-push	tracker/speed.fs	/^: spi-push ( c spi1-sr -- spi1-sr ) swap over spi1-dr ! inline ;$/;"	d
spi-push0	embello/flib/stm32l0/spi.fs	/^: spi-push0 ( spi1-sr -- spi1-sr ) 0 over spi1>dr ! inline ;$/;"	d
spi-push0	flib/./stm32l0/spi.fs	/^: spi-push0 ( spi1-sr -- spi1-sr ) 0 over spi1>dr ! inline ;$/;"	d
spi-push0	flib/stm32l0/spi.fs	/^: spi-push0 ( spi1-sr -- spi1-sr ) 0 over spi1>dr ! inline ;$/;"	d
spi-push0	tracker/speed.fs	/^: spi-push0 ( spi1-sr -- spi1-sr ) 0 over spi1-dr ! inline ;$/;"	d
spi-rxdrop	embello/flib/stm32l0/spi.fs	/^: spi-rxdrop ( spi1-sr -- spi1-sr ) begin dup @ 1 and until dup spi1>dr @ drop inline ;$/;"	d
spi-rxdrop	flib/./stm32l0/spi.fs	/^: spi-rxdrop ( spi1-sr -- spi1-sr ) begin dup @ 1 and until dup spi1>dr @ drop inline ;$/;"	d
spi-rxdrop	flib/stm32l0/spi.fs	/^: spi-rxdrop ( spi1-sr -- spi1-sr ) begin dup @ 1 and until dup spi1>dr @ drop inline ;$/;"	d
spi-rxdrop	tracker/speed.fs	/^: spi-rxdrop ( spi1-sr -- spi1-sr ) begin dup @ 1 and until dup spi1-dr @ drop inline ;$/;"	d
spi-rxrdy	embello/flib/stm32l0/spi.fs	/^: spi-rxrdy ( spi1-sr -- spi1-sr ) begin dup @ 1 and until inline ;$/;"	d
spi-rxrdy	flib/./stm32l0/spi.fs	/^: spi-rxrdy ( spi1-sr -- spi1-sr ) begin dup @ 1 and until inline ;$/;"	d
spi-rxrdy	flib/stm32l0/spi.fs	/^: spi-rxrdy ( spi1-sr -- spi1-sr ) begin dup @ 1 and until inline ;$/;"	d
spi-rxrdy	tracker/speed.fs	/^: spi-rxrdy ( spi1-sr -- spi1-sr ) begin dup @ 1 and until inline ;$/;"	d
spi-txrdy	embello/flib/stm32l0/spi.fs	/^: spi-txrdy ( spi1-sr -- spi1-sr ) begin dup @ 2 and until inline ;$/;"	d
spi-txrdy	flib/./stm32l0/spi.fs	/^: spi-txrdy ( spi1-sr -- spi1-sr ) begin dup @ 2 and until inline ;$/;"	d
spi-txrdy	flib/stm32l0/spi.fs	/^: spi-txrdy ( spi1-sr -- spi1-sr ) begin dup @ 2 and until inline ;$/;"	d
spi-txrdy	tracker/speed.fs	/^: spi-txrdy ( spi1-sr -- spi1-sr ) begin dup @ 2 and until inline ;$/;"	d
spi.	embello/flib/stm32f1/spi.fs	/^: spi. ( -- )  \\ display SPI hardware registers$/;"	d
spi.	flib/./stm32f1/spi.fs	/^: spi. ( -- )  \\ display SPI hardware registers$/;"	d
spi.	flib/stm32f1/spi.fs	/^: spi. ( -- )  \\ display SPI hardware registers$/;"	d
spi.addr	tracker/speed.fs	/^ssel @ io-base GPIO.BSRR + variable spi.addr$/;"	d
spi.bit	tracker/speed.fs	/^ssel @ io# variable spi.bit$/;"	d
spi1-dr	tracker/speed.fs	/^: spi1-dr ( spi1-sr -- spi1-dr ) 4 + inline ;$/;"	d
spi1>dr	embello/flib/stm32l0/spi.fs	/^: spi1>dr ( spi1-sr -- spi1-dr ) 4 + inline ;$/;"	d
spi1>dr	flib/./stm32l0/spi.fs	/^: spi1>dr ( spi1-sr -- spi1-dr ) 4 + inline ;$/;"	d
spi1>dr	flib/stm32l0/spi.fs	/^: spi1>dr ( spi1-sr -- spi1-dr ) 4 + inline ;$/;"	d
spi2-init	embello/flib/stm32f1/spi2.fs	/^: spi2-init ( -- )  \\ set up hardware SPI$/;"	d
spi2-init	flib/./stm32f1/spi2.fs	/^: spi2-init ( -- )  \\ set up hardware SPI$/;"	d
spi2-init	flib/stm32f1/spi2.fs	/^: spi2-init ( -- )  \\ set up hardware SPI$/;"	d
spi2-setup	embello/ezr/vdisk.fs	/^: spi2-setup  \\ set up I\/O pins and SPI2 for slave mode with DMA in and out$/;"	d
spi2.	embello/flib/stm32f1/spi2.fs	/^: spi2. ( -- )  \\ display SPI hardware registers$/;"	d
spi2.	flib/./stm32f1/spi2.fs	/^: spi2. ( -- )  \\ display SPI hardware registers$/;"	d
spi2.	flib/stm32f1/spi2.fs	/^: spi2. ( -- )  \\ display SPI hardware registers$/;"	d
spi2>	embello/flib/stm32f1/spi2.fs	/^: spi2> ( -- c ) 0 >spi2> ;  \\ read byte from SPI$/;"	d
spi2>	embello/flib/stm32l0/spi.fs	/^: spi2> ( reg -- c ) \\ read register$/;"	d
spi2>	embello/qld/dev.fs	/^: spi2>   0 >spi2> ;$/;"	d
spi2>	flib/./stm32f1/spi2.fs	/^: spi2> ( -- c ) 0 >spi2> ;  \\ read byte from SPI$/;"	d
spi2>	flib/./stm32l0/spi.fs	/^: spi2> ( reg -- c ) \\ read register$/;"	d
spi2>	flib/stm32f1/spi2.fs	/^: spi2> ( -- c ) 0 >spi2> ;  \\ read byte from SPI$/;"	d
spi2>	flib/stm32l0/spi.fs	/^: spi2> ( reg -- c ) \\ read register$/;"	d
spi2>	tracker/speed.fs	/^: spi2> ( reg -- c ) \\ read register$/;"	d
spi>	embello/flib/any/spi-bb.fs	/^: spi> ( -- c ) 0 >spi> ;  \\ read byte from SPI$/;"	d
spi>	embello/flib/stm32f1/spi.fs	/^: spi> ( -- c ) 0 >spi> ;  \\ read byte from SPI$/;"	d
spi>	embello/flib/stm32l0/spi.fs	/^: spi> ( -- c ) 0 >spi> ;     \\ read byte from SPI$/;"	d
spi>	flib/./any/spi-bb.fs	/^: spi> ( -- c ) 0 >spi> ;  \\ read byte from SPI$/;"	d
spi>	flib/./stm32f1/spi.fs	/^: spi> ( -- c ) 0 >spi> ;  \\ read byte from SPI$/;"	d
spi>	flib/./stm32l0/spi.fs	/^: spi> ( -- c ) 0 >spi> ;     \\ read byte from SPI$/;"	d
spi>	flib/any/spi-bb.fs	/^: spi> ( -- c ) 0 >spi> ;  \\ read byte from SPI$/;"	d
spi>	flib/stm32f1/spi.fs	/^: spi> ( -- c ) 0 >spi> ;  \\ read byte from SPI$/;"	d
spi>	flib/stm32l0/spi.fs	/^: spi> ( -- c ) 0 >spi> ;     \\ read byte from SPI$/;"	d
spi?	embello/flib/stm32l0/spi.fs	/^: spi? ( -- )$/;"	d
spi?	flib/./stm32l0/spi.fs	/^: spi? ( -- )$/;"	d
spi?	flib/stm32l0/spi.fs	/^: spi? ( -- )$/;"	d
spiN>	embello/flib/stm32l0/spi.fs	/^: spiN> ( addr len reg -- ) \\ read len bytes from reg$/;"	d
spiN>	flib/./stm32l0/spi.fs	/^: spiN> ( addr len reg -- ) \\ read len bytes from reg$/;"	d
spiN>	flib/stm32l0/spi.fs	/^: spiN> ( addr len reg -- ) \\ read len bytes from reg$/;"	d
spiN>	tracker/speed.fs	/^: spiN> ( addr len reg -- ) \\ read len bytes from reg$/;"	d
ssel	embello/flib/any/spi-bb.fs	/^PA4 variable ssel  \\ pin used as slave select$/;"	d
ssel	embello/flib/stm32f1/spi.fs	/^[ifndef] ssel  PA4 variable ssel  [then]  \\ can be changed at run time$/;"	d
ssel	embello/flib/stm32l0/spi.fs	/^[ifndef] ssel  PA4 variable ssel  [then]  \\ can be changed at run time$/;"	d
ssel	embello/jz3/board.fs	/^PA15 variable ssel  \\ can be changed at run time$/;"	d
ssel	embello/jz4/board.fs	/^PA15 variable ssel  \\ can be changed at run time$/;"	d
ssel	flib/./any/spi-bb.fs	/^PA4 variable ssel  \\ pin used as slave select$/;"	d
ssel	flib/./stm32f1/spi.fs	/^[ifndef] ssel  PA4 variable ssel  [then]  \\ can be changed at run time$/;"	d
ssel	flib/./stm32l0/spi.fs	/^[ifndef] ssel  PA4 variable ssel  [then]  \\ can be changed at run time$/;"	d
ssel	flib/any/spi-bb.fs	/^PA4 variable ssel  \\ pin used as slave select$/;"	d
ssel	flib/stm32f1/spi.fs	/^[ifndef] ssel  PA4 variable ssel  [then]  \\ can be changed at run time$/;"	d
ssel	flib/stm32l0/spi.fs	/^[ifndef] ssel  PA4 variable ssel  [then]  \\ can be changed at run time$/;"	d
ssel	jz3/./board.fs	/^PA15 variable ssel  \\ can be changed at run time$/;"	d
ssel	jz3/board.fs	/^PA15 variable ssel  \\ can be changed at run time$/;"	d
ssel.addr	embello/flib/stm32l0/spi.fs	/^0 variable ssel.addr \\ address where to toggle chip select$/;"	d
ssel.addr	flib/./stm32l0/spi.fs	/^0 variable ssel.addr \\ address where to toggle chip select$/;"	d
ssel.addr	flib/stm32l0/spi.fs	/^0 variable ssel.addr \\ address where to toggle chip select$/;"	d
ssel.bit	embello/flib/stm32l0/spi.fs	/^0 variable ssel.bit  \\ bitmask to toggle for chip select$/;"	d
ssel.bit	flib/./stm32l0/spi.fs	/^0 variable ssel.bit  \\ bitmask to toggle for chip select$/;"	d
ssel.bit	flib/stm32l0/spi.fs	/^0 variable ssel.bit  \\ bitmask to toggle for chip select$/;"	d
ssel2	embello/flib/stm32f1/spi2.fs	/^[ifndef] ssel2  PB12 variable ssel2  [then]  \\ can be changed at run time$/;"	d
ssel2	flib/./stm32f1/spi2.fs	/^[ifndef] ssel2  PB12 variable ssel2  [then]  \\ can be changed at run time$/;"	d
ssel2	flib/stm32f1/spi2.fs	/^[ifndef] ssel2  PB12 variable ssel2  [then]  \\ can be changed at run time$/;"	d
stack>buffer	embello/flib/any/buffers.fs	/^: stack>buffer ( b1 b2 ... bi i c-addr -- c-addr len )$/;"	d
stack>buffer	flib/./any/buffers.fs	/^: stack>buffer ( b1 b2 ... bi i c-addr -- c-addr len )$/;"	d
stack>buffer	flib/any/buffers.fs	/^: stack>buffer ( b1 b2 ... bi i c-addr -- c-addr len )$/;"	d
stackspace	embello/flib/mecrisp/multi.fs	/^64 cells constant stackspace \\ 64 stack elements for every task (both stacks)$/;"	d
stackspace	flib/./mecrisp/multi.fs	/^64 cells constant stackspace \\ 64 stack elements for every task (both stacks)$/;"	d
stackspace	flib/mecrisp/multi.fs	/^64 cells constant stackspace \\ 64 stack elements for every task (both stacks)$/;"	d
standby	embello/jz1/ex/standby.fs	/^: standby ( -- )$/;"	d
standby	embello/jz3/ex/standby.fs	/^: standby ( -- )$/;"	d
standby	jz1/./ex/standby.fs	/^: standby ( -- )$/;"	d
standby	jz1/ex/standby.fs	/^: standby ( -- )$/;"	d
standby	jz3/./ex/standby.fs	/^: standby ( -- )$/;"	d
standby	jz3/ex/standby.fs	/^: standby ( -- )$/;"	d
step	embello/jz4/ex/rot2.fs	/^: step ( n -- )  counter +!  cr counter @ . ;$/;"	d
step	embello/jz4/ex/rot3.fs	/^: step ( n -- )  counter +!  counter @ shownum ;$/;"	d
step	embello/jz4/ex/rot4.fs	/^: step ( n -- )  counter +!  7 <pkt counter @ +pkt pkt>rf ;$/;"	d
step	embello/jz4/ex/rot5.fs	/^: step ( n -- )  counter +!  7 <pkt counter @ +pkt pkt>rf ;$/;"	d
step	embello/jz4/ex/rot6.fs	/^: step ( n -- )  counter +!  7 <pkt counter @ +pkt pkt>rf ;$/;"	d
step	embello/jz4/ex/rot8.fs	/^: step ( n -- )  counter +!  0 idle ! ;$/;"	d
step	embello/wpp/dev.fs	/^: step ( pin -- ) dup ios! 1000 us ioc! 1000 us ;$/;"	d
stop	embello/flib/mecrisp/multi.fs	/^: stop ( -- ) false task-state ! pause ; \\ Stop current task$/;"	d
stop	flib/./mecrisp/multi.fs	/^: stop ( -- ) false task-state ! pause ; \\ Stop current task$/;"	d
stop	flib/mecrisp/multi.fs	/^: stop ( -- ) false task-state ! pause ; \\ Stop current task$/;"	d
stop-dma	embello/ezr/vdisk.fs	/^: stop-dma$/;"	d
stop-freq	embello/flib/stm32l0/sleep.fs	/^: stop-freq ( u -- )  \\ enter stop mode, will resume when LPTIMER fires$/;"	d
stop-freq	flib/./stm32l0/sleep.fs	/^: stop-freq ( u -- )  \\ enter stop mode, will resume when LPTIMER fires$/;"	d
stop-freq	flib/stm32l0/sleep.fs	/^: stop-freq ( u -- )  \\ enter stop mode, will resume when LPTIMER fires$/;"	d
stop-heating	embello/sic/main.fs	/^: stop-heating ( -- )$/;"	d
stop100ms	embello/flib/stm32l0/sleep.fs	/^: stop100ms ( -- )  \\ sleep in low-power for 100 ms$/;"	d
stop100ms	flib/./stm32l0/sleep.fs	/^: stop100ms ( -- )  \\ sleep in low-power for 100 ms$/;"	d
stop100ms	flib/stm32l0/sleep.fs	/^: stop100ms ( -- )  \\ sleep in low-power for 100 ms$/;"	d
stop10s	embello/flib/stm32l0/sleep.fs	/^: stop10s   ( -- )  \\ sleep in low-power for 10 sec$/;"	d
stop10s	flib/./stm32l0/sleep.fs	/^: stop10s   ( -- )  \\ sleep in low-power for 10 sec$/;"	d
stop10s	flib/stm32l0/sleep.fs	/^: stop10s   ( -- )  \\ sleep in low-power for 10 sec$/;"	d
stop1s	embello/flib/stm32l0/sleep.fs	/^: stop1s    ( -- )  \\ sleep in low-power for 1 sec$/;"	d
stop1s	flib/./stm32l0/sleep.fs	/^: stop1s    ( -- )  \\ sleep in low-power for 1 sec$/;"	d
stop1s	flib/stm32l0/sleep.fs	/^: stop1s    ( -- )  \\ sleep in low-power for 1 sec$/;"	d
str,u2	follower/follower.fs	/^: str,u2 send-string [char] , uart2-emit ;$/;"	d
str.u2	follower/follower.fs	/^: str.u2 send-string ;$/;"	d
string-eq	follower/hc05-test.fs	/^: string-eq ( c-addr1 len1 c-addr2 len2 -- f )$/;"	d
string-eq	follower/hc05.fs	/^: string-eq ( c-addr1 len1 c-addr2 len2 -- f )$/;"	d
strip-cr	follower/hc05.fs	/^: strip-cr ( n -- n )$/;"	d
subst	embello/ezr/asm/Makefile	/^subst = -e 's\/0x\/$$\/g' -e 's\/,\/ w\/g' -e 's\/[^w]$$\/& w\/' -e '1d' -e '$$d'$/;"	m
swd-deinit	embello/flib/stm32f1/hal.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
swd-deinit	embello/g6u/board.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
swd-deinit	embello/prc2/board.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
swd-deinit	embello/qld/board.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
swd-deinit	embello/ten/board.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
swd-deinit	embello/tex/board.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
swd-deinit	embello/trf/board.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
swd-deinit	flib/./stm32f1/hal.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
swd-deinit	flib/stm32f1/hal.fs	/^: swd-deinit ( -- )  \\ disable JTAG as well as PA13 and PA14$/;"	d
systick	embello/flib/stm32f4/hal.fs	/^: systick ( ticks -- )  \\ enable systick interrupt$/;"	d
systick	embello/flib/stm32f7/hal.fs	/^: systick ( ticks -- )  \\ enable systick interrupt$/;"	d
systick	flib/./stm32f4/hal.fs	/^: systick ( ticks -- )  \\ enable systick interrupt$/;"	d
systick	flib/./stm32f7/hal.fs	/^: systick ( ticks -- )  \\ enable systick interrupt$/;"	d
systick	flib/stm32f4/hal.fs	/^: systick ( ticks -- )  \\ enable systick interrupt$/;"	d
systick	flib/stm32f7/hal.fs	/^: systick ( ticks -- )  \\ enable systick interrupt$/;"	d
systick-hz	central/x-clock.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	embello/flib/stm32f1/clock.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	embello/flib/stm32f1/hal.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	embello/flib/stm32f4/hal.fs	/^: systick-hz ( u -- )  \\ enable systick counter at given frequency$/;"	d
systick-hz	embello/flib/stm32f7/hal.fs	/^: systick-hz ( u -- )  \\ enable systick counter at given frequency$/;"	d
systick-hz	embello/flib/stm32l0/hal.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	flib/./stm32f1/clock.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	flib/./stm32f1/hal.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	flib/./stm32f4/hal.fs	/^: systick-hz ( u -- )  \\ enable systick counter at given frequency$/;"	d
systick-hz	flib/./stm32f7/hal.fs	/^: systick-hz ( u -- )  \\ enable systick counter at given frequency$/;"	d
systick-hz	flib/./stm32l0/hal.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	flib/stm32f1/clock.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	flib/stm32f1/hal.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz	flib/stm32f4/hal.fs	/^: systick-hz ( u -- )  \\ enable systick counter at given frequency$/;"	d
systick-hz	flib/stm32f7/hal.fs	/^: systick-hz ( u -- )  \\ enable systick counter at given frequency$/;"	d
systick-hz	flib/stm32l0/hal.fs	/^: systick-hz ( u -- )  \\ enable systick interrupt at given frequency$/;"	d
systick-hz?	embello/flib/stm32f1/clock.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	embello/flib/stm32f1/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	embello/flib/stm32f4/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	embello/flib/stm32f7/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	embello/flib/stm32l0/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/./stm32f1/clock.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/./stm32f1/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/./stm32f4/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/./stm32f7/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/./stm32l0/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/stm32f1/clock.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/stm32f1/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/stm32f4/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/stm32f7/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-hz?	flib/stm32l0/hal.fs	/^: systick-hz? ( -- u ) \\ derive current systick frequency from clock$/;"	d
systick-off	embello/tex/x-serplus.fs	/^: systick-off ( -- ) 0 $E000E010 ! ;$/;"	d
t	embello/ezr/pokemon.fs	/^: t  \\ start USART2 pass-through task$/;"	d
t	embello/flib/any/crc-test.fs	/^: t ( n -- crc )$/;"	d
t	flib/./any/crc-test.fs	/^: t ( n -- crc )$/;"	d
t	flib/any/crc-test.fs	/^: t ( n -- crc )$/;"	d
t	tracker/speed.fs	/^: t ." rf! : " micros 100 0 do i RF:SYNC rf! loop dt ; t t t$/;"	d
t	tracker/speed.fs	/^: t ." rf!@: " micros 100 0 do i $B9 rf!@ drop loop dt ; t t t$/;"	d
t	tracker/speed.fs	/^: t 2 0 do  i RF:SYNC rf!  i $39 >spi2  i $39 >spi2  loop ;$/;"	d
t0	embello/jz1/ex/iorate.fs	/^: t0 micros 1000 0 do          loop micros swap - . ; t0$/;"	d
t0	jz1/./ex/iorate.fs	/^: t0 micros 1000 0 do          loop micros swap - . ; t0$/;"	d
t0	jz1/ex/iorate.fs	/^: t0 micros 1000 0 do          loop micros swap - . ; t0$/;"	d
t1	embello/ezr/dev.fs	/^: t1  \\ show output from USART2$/;"	d
t1	embello/jz1/ex/iorate.fs	/^: t1 micros 1000 0 do pa0 ios! loop micros swap - . ; t1$/;"	d
t1	embello/jz3/ook/rf69ook-polling.fs	/^: t1 micros 20 us micros swap - . ;$/;"	d
t1	jz1/./ex/iorate.fs	/^: t1 micros 1000 0 do pa0 ios! loop micros swap - . ; t1$/;"	d
t1	jz1/ex/iorate.fs	/^: t1 micros 1000 0 do pa0 ios! loop micros swap - . ; t1$/;"	d
t1	jz3/./ook/rf69ook-polling.fs	/^: t1 micros 20 us micros swap - . ;$/;"	d
t1	jz3/ook/rf69ook-polling.fs	/^: t1 micros 20 us micros swap - . ;$/;"	d
t2	embello/jz1/ex/iorate.fs	/^: t2 micros 1000 0 do pa0 ioc! loop micros swap - . ; t2$/;"	d
t2	jz1/./ex/iorate.fs	/^: t2 micros 1000 0 do pa0 ioc! loop micros swap - . ; t2$/;"	d
t2	jz1/ex/iorate.fs	/^: t2 micros 1000 0 do pa0 ioc! loop micros swap - . ; t2$/;"	d
t3	embello/jz1/ex/iorate.fs	/^: t3 micros 1000 0 do pa0 iox! loop micros swap - . ; t3$/;"	d
t3	jz1/./ex/iorate.fs	/^: t3 micros 1000 0 do pa0 iox! loop micros swap - . ; t3$/;"	d
t3	jz1/ex/iorate.fs	/^: t3 micros 1000 0 do pa0 iox! loop micros swap - . ; t3$/;"	d
task-in-list?	embello/flib/mecrisp/multi.fs	/^: task-in-list? ( task -- ? )$/;"	d
task-in-list?	flib/./mecrisp/multi.fs	/^: task-in-list? ( task -- ? )$/;"	d
task-in-list?	flib/mecrisp/multi.fs	/^: task-in-list? ( task -- ? )$/;"	d
task-state	embello/flib/mecrisp/multi.fs	/^: task-state ( -- state )   up @ 1 cells + inline ;$/;"	d
task-state	flib/./mecrisp/multi.fs	/^: task-state ( -- state )   up @ 1 cells + inline ;$/;"	d
task-state	flib/mecrisp/multi.fs	/^: task-state ( -- state )   up @ 1 cells + inline ;$/;"	d
task:	embello/flib/mecrisp/multi.fs	/^: task: ( "name" -- )  stackspace cell+ 2*  4 cells +  buffer: ;$/;"	d
task:	flib/./mecrisp/multi.fs	/^: task: ( "name" -- )  stackspace cell+ 2*  4 cells +  buffer: ;$/;"	d
task:	flib/mecrisp/multi.fs	/^: task: ( "name" -- )  stackspace cell+ 2*  4 cells +  buffer: ;$/;"	d
tasks	embello/flib/mecrisp/multi.fs	/^: tasks ( -- ) \\ Show tasks currently in round-robin list$/;"	d
tasks	flib/./mecrisp/multi.fs	/^: tasks ( -- ) \\ Show tasks currently in round-robin list$/;"	d
tasks	flib/mecrisp/multi.fs	/^: tasks ( -- ) \\ Show tasks currently in round-robin list$/;"	d
tcalc	embello/bme/dev.fs	/^: tcalc ( rawt -- t100 )$/;"	d
tcalc	embello/flib/i2c/bme280.fs	/^: tcalc ( rawt -- t100 )$/;"	d
tcalc	flib/./i2c/bme280.fs	/^: tcalc ( rawt -- t100 )$/;"	d
tcalc	flib/i2c/bme280.fs	/^: tcalc ( rawt -- t100 )$/;"	d
telnet-emit	embello/tex/x-telnet.fs	/^: telnet-emit ( c -- )  \\ char output with telnet escapes$/;"	d
telnet-io	embello/tex/x-telnet.fs	/^: telnet-io ( -- )  \\ change hooks to use the telnet protocol$/;"	d
telnet-key	embello/tex/x-telnet.fs	/^: telnet-key ( -- c )  \\ key input with telnet processing$/;"	d
telnet-next	embello/tex/x-telnet.fs	/^: telnet-next ( c -- c | 0 )$/;"	d
temp+vcc	embello/jz1/ex/adc.fs	/^: temp+vcc$/;"	d
temp+vcc	jz1/./ex/adc.fs	/^: temp+vcc$/;"	d
temp+vcc	jz1/ex/adc.fs	/^: temp+vcc$/;"	d
temp2int	embello/sic/main.fs	/^: temp2int ( s -- s )$/;"	d
test-buf	embello/suf/ex/old.fs	/^: test-buf save-to-buf ." abc" [char] : serial-emit restore-buf ;$/;"	d
test-presence	follower/hc05.fs	/^: test-presence ( -- f ) \\ test that AT returns OK$/;"	d
test-summary	embello/flib/any/testing.fs	/^: test-summary ( -- ) \\ print a summary of tests$/;"	d
test-summary	flib/./any/testing.fs	/^: test-summary ( -- ) \\ print a summary of tests$/;"	d
test-summary	flib/any/testing.fs	/^: test-summary ( -- ) \\ print a summary of tests$/;"	d
test:>var	embello/flib/any/varint-test.fs	/^: test:>var ( n b1 b2 ... bi i -- )$/;"	d
test:>var	flib/./any/varint-test.fs	/^: test:>var ( n b1 b2 ... bi i -- )$/;"	d
test:>var	flib/any/varint-test.fs	/^: test:>var ( n b1 b2 ... bi i -- )$/;"	d
test:var>	embello/flib/any/varint-test.fs	/^: test:var> ( n b1 b2 ... bi i -- )$/;"	d
test:var>	flib/./any/varint-test.fs	/^: test:var> ( n b1 b2 ... bi i -- )$/;"	d
test:var>	flib/any/varint-test.fs	/^: test:var> ( n b1 b2 ... bi i -- )$/;"	d
tfine	embello/bme/dev.fs	/^0 variable tfine   \\ used for p & h compensation$/;"	d
tfine	embello/flib/i2c/bme280.fs	/^0 variable tfine   \\ used for p & h compensation$/;"	d
tfine	flib/./i2c/bme280.fs	/^0 variable tfine   \\ used for p & h compensation$/;"	d
tfine	flib/i2c/bme280.fs	/^0 variable tfine   \\ used for p & h compensation$/;"	d
tft!	embello/flib/fsmc/tft-r61505u.fs	/^: tft! ( val reg -- )  LCD-REG h! LCD-RAM h! ;$/;"	d
tft!	embello/flib/spi/tft-ili9325.fs	/^: tft! ( val reg -- )$/;"	d
tft!	flib/./fsmc/tft-r61505u.fs	/^: tft! ( val reg -- )  LCD-REG h! LCD-RAM h! ;$/;"	d
tft!	flib/./spi/tft-ili9325.fs	/^: tft! ( val reg -- )$/;"	d
tft!	flib/fsmc/tft-r61505u.fs	/^: tft! ( val reg -- )  LCD-REG h! LCD-RAM h! ;$/;"	d
tft!	flib/spi/tft-ili9325.fs	/^: tft! ( val reg -- )$/;"	d
tft-bg	embello/flib/fsmc/tft-r61505u.fs	/^$0000 variable tft-bg$/;"	d
tft-bg	embello/flib/spi/tft-ili9163.fs	/^$0000 variable tft-bg$/;"	d
tft-bg	embello/flib/spi/tft-ili9325.fs	/^$0000 variable tft-bg$/;"	d
tft-bg	flib/./fsmc/tft-r61505u.fs	/^$0000 variable tft-bg$/;"	d
tft-bg	flib/./spi/tft-ili9163.fs	/^$0000 variable tft-bg$/;"	d
tft-bg	flib/./spi/tft-ili9325.fs	/^$0000 variable tft-bg$/;"	d
tft-bg	flib/fsmc/tft-r61505u.fs	/^$0000 variable tft-bg$/;"	d
tft-bg	flib/spi/tft-ili9163.fs	/^$0000 variable tft-bg$/;"	d
tft-bg	flib/spi/tft-ili9325.fs	/^$0000 variable tft-bg$/;"	d
tft-config	embello/flib/spi/tft-ili9325.fs	/^: tft-config ( -- )$/;"	d
tft-config	flib/./spi/tft-ili9325.fs	/^: tft-config ( -- )$/;"	d
tft-config	flib/spi/tft-ili9325.fs	/^: tft-config ( -- )$/;"	d
tft-fg	embello/flib/fsmc/tft-r61505u.fs	/^$FFFF variable tft-fg$/;"	d
tft-fg	embello/flib/spi/tft-ili9163.fs	/^$FC00 variable tft-fg$/;"	d
tft-fg	embello/flib/spi/tft-ili9325.fs	/^$FC00 variable tft-fg$/;"	d
tft-fg	flib/./fsmc/tft-r61505u.fs	/^$FFFF variable tft-fg$/;"	d
tft-fg	flib/./spi/tft-ili9163.fs	/^$FC00 variable tft-fg$/;"	d
tft-fg	flib/./spi/tft-ili9325.fs	/^$FC00 variable tft-fg$/;"	d
tft-fg	flib/fsmc/tft-r61505u.fs	/^$FFFF variable tft-fg$/;"	d
tft-fg	flib/spi/tft-ili9163.fs	/^$FC00 variable tft-fg$/;"	d
tft-fg	flib/spi/tft-ili9325.fs	/^$FC00 variable tft-fg$/;"	d
tft-fsmc	embello/flib/fsmc/tft-r61505u.fs	/^: tft-fsmc ( -- )  \\ configure the FSMC, SRAM bank 1$/;"	d
tft-fsmc	flib/./fsmc/tft-r61505u.fs	/^: tft-fsmc ( -- )  \\ configure the FSMC, SRAM bank 1$/;"	d
tft-fsmc	flib/fsmc/tft-r61505u.fs	/^: tft-fsmc ( -- )  \\ configure the FSMC, SRAM bank 1$/;"	d
tft-init	embello/flib/fsmc/tft-r61505u.fs	/^: tft-init ( -- )$/;"	d
tft-init	embello/flib/spi/tft-ili9163.fs	/^: tft-init ( -- )$/;"	d
tft-init	embello/flib/spi/tft-ili9325.fs	/^: tft-init ( -- )$/;"	d
tft-init	embello/flib/spi/tft-ili9325.fs	/^: tft-init ( u - )  \\ init tft: cmd=0\/data=2 + write=0\/read=1$/;"	d
tft-init	flib/./fsmc/tft-r61505u.fs	/^: tft-init ( -- )$/;"	d
tft-init	flib/./spi/tft-ili9163.fs	/^: tft-init ( -- )$/;"	d
tft-init	flib/./spi/tft-ili9325.fs	/^: tft-init ( -- )$/;"	d
tft-init	flib/./spi/tft-ili9325.fs	/^: tft-init ( u - )  \\ init tft: cmd=0\/data=2 + write=0\/read=1$/;"	d
tft-init	flib/fsmc/tft-r61505u.fs	/^: tft-init ( -- )$/;"	d
tft-init	flib/spi/tft-ili9163.fs	/^: tft-init ( -- )$/;"	d
tft-init	flib/spi/tft-ili9325.fs	/^: tft-init ( -- )$/;"	d
tft-init	flib/spi/tft-ili9325.fs	/^: tft-init ( u - )  \\ init tft: cmd=0\/data=2 + write=0\/read=1$/;"	d
tft-pins	embello/flib/fsmc/tft-r61505u.fs	/^: tft-pins ( -- )  \\ enable FSMC and set up pins needed to drive the TFT LCD$/;"	d
tft-pins	flib/./fsmc/tft-r61505u.fs	/^: tft-pins ( -- )  \\ enable FSMC and set up pins needed to drive the TFT LCD$/;"	d
tft-pins	flib/fsmc/tft-r61505u.fs	/^: tft-pins ( -- )  \\ enable FSMC and set up pins needed to drive the TFT LCD$/;"	d
tft@	embello/flib/fsmc/tft-r61505u.fs	/^: tft@ ( reg -- val )  LCD-REG h! LCD-RAM h@ ;$/;"	d
tft@	embello/flib/spi/tft-ili9325.fs	/^: tft@ ( reg -- val )$/;"	d
tft@	flib/./fsmc/tft-r61505u.fs	/^: tft@ ( reg -- val )  LCD-REG h! LCD-RAM h@ ;$/;"	d
tft@	flib/./spi/tft-ili9325.fs	/^: tft@ ( reg -- val )$/;"	d
tft@	flib/fsmc/tft-r61505u.fs	/^: tft@ ( reg -- val )  LCD-REG h! LCD-RAM h@ ;$/;"	d
tft@	flib/spi/tft-ili9325.fs	/^: tft@ ( reg -- val )$/;"	d
throw	embello/flib/mecrisp/multi.fs	/^: throw ( throwcode -- )  dup if$/;"	d
throw	flib/./mecrisp/multi.fs	/^: throw ( throwcode -- )  dup if$/;"	d
throw	flib/mecrisp/multi.fs	/^: throw ( throwcode -- )  dup if$/;"	d
ticks	central/x-clock.fs	/^0 variable ticks$/;"	d
ticks	embello/flib/stm32f1/clock.fs	/^0 variable ticks$/;"	d
ticks	embello/flib/stm32f1/hal.fs	/^0 variable ticks$/;"	d
ticks	embello/flib/stm32f4/hal.fs	/^0 variable ticks$/;"	d
ticks	embello/flib/stm32f7/hal.fs	/^0 variable ticks$/;"	d
ticks	embello/flib/stm32l0/hal.fs	/^0 variable ticks$/;"	d
ticks	flib/./stm32f1/clock.fs	/^0 variable ticks$/;"	d
ticks	flib/./stm32f1/hal.fs	/^0 variable ticks$/;"	d
ticks	flib/./stm32f4/hal.fs	/^0 variable ticks$/;"	d
ticks	flib/./stm32f7/hal.fs	/^0 variable ticks$/;"	d
ticks	flib/./stm32l0/hal.fs	/^0 variable ticks$/;"	d
ticks	flib/stm32f1/clock.fs	/^0 variable ticks$/;"	d
ticks	flib/stm32f1/hal.fs	/^0 variable ticks$/;"	d
ticks	flib/stm32f4/hal.fs	/^0 variable ticks$/;"	d
ticks	flib/stm32f7/hal.fs	/^0 variable ticks$/;"	d
ticks	flib/stm32l0/hal.fs	/^0 variable ticks$/;"	d
time-for-status?	fanctrl/fanctrl.fs	/^: time-for-status?$/;"	d
timed&	embello/flib/any/timed.fs	/^: timed& ( -- )$/;"	d
timed&	flib/./any/timed.fs	/^: timed& ( -- )$/;"	d
timed&	flib/any/timed.fs	/^: timed& ( -- )$/;"	d
timed-exec	embello/flib/any/timed.fs	/^: timed-exec ( slot# -- )$/;"	d
timed-exec	flib/./any/timed.fs	/^: timed-exec ( slot# -- )$/;"	d
timed-exec	flib/any/timed.fs	/^: timed-exec ( slot# -- )$/;"	d
timed-init	embello/flib/any/timed.fs	/^: timed-init ( -- )$/;"	d
timed-init	flib/./any/timed.fs	/^: timed-init ( -- )$/;"	d
timed-init	flib/any/timed.fs	/^: timed-init ( -- )$/;"	d
timed-run	embello/flib/any/timed.fs	/^: timed-run ( -- #exec )$/;"	d
timed-run	flib/./any/timed.fs	/^: timed-run ( -- #exec )$/;"	d
timed-run	flib/any/timed.fs	/^: timed-run ( -- #exec )$/;"	d
timed.	embello/flib/any/timed.fs	/^: timed. ( -- )  \\ Show all timers$/;"	d
timed.	flib/./any/timed.fs	/^: timed. ( -- )  \\ Show all timers$/;"	d
timed.	flib/any/timed.fs	/^: timed. ( -- )  \\ Show all timers$/;"	d
timer-base	embello/flib/stm32f1/timer.fs	/^: timer-base ( n -- addr )  \\ return base address for timer 1..14$/;"	d
timer-base	embello/flib/stm32l0/timer.fs	/^: timer-base ( n -- addr )  \\ return base address for timer 1..14$/;"	d
timer-base	flib/./stm32f1/timer.fs	/^: timer-base ( n -- addr )  \\ return base address for timer 1..14$/;"	d
timer-base	flib/./stm32l0/timer.fs	/^: timer-base ( n -- addr )  \\ return base address for timer 1..14$/;"	d
timer-base	flib/stm32f1/timer.fs	/^: timer-base ( n -- addr )  \\ return base address for timer 1..14$/;"	d
timer-base	flib/stm32l0/timer.fs	/^: timer-base ( n -- addr )  \\ return base address for timer 1..14$/;"	d
timer-deinit	embello/flib/stm32f1/timer.fs	/^: timer-deinit ( n -- )  \\ disable timer n$/;"	d
timer-deinit	embello/flib/stm32l0/timer.fs	/^: timer-deinit ( n -- )  \\ disable timer n$/;"	d
timer-deinit	flib/./stm32f1/timer.fs	/^: timer-deinit ( n -- )  \\ disable timer n$/;"	d
timer-deinit	flib/./stm32l0/timer.fs	/^: timer-deinit ( n -- )  \\ disable timer n$/;"	d
timer-deinit	flib/stm32f1/timer.fs	/^: timer-deinit ( n -- )  \\ disable timer n$/;"	d
timer-deinit	flib/stm32l0/timer.fs	/^: timer-deinit ( n -- )  \\ disable timer n$/;"	d
timer-enabit	embello/flib/stm32f1/timer.fs	/^: timer-enabit ( n -- bit addr )  \\ return bit and enable address for timer n$/;"	d
timer-enabit	embello/flib/stm32l0/timer.fs	/^: timer-enabit ( n -- bit addr )  \\ return bit and enable address for timer n$/;"	d
timer-enabit	flib/./stm32f1/timer.fs	/^: timer-enabit ( n -- bit addr )  \\ return bit and enable address for timer n$/;"	d
timer-enabit	flib/./stm32l0/timer.fs	/^: timer-enabit ( n -- bit addr )  \\ return bit and enable address for timer n$/;"	d
timer-enabit	flib/stm32f1/timer.fs	/^: timer-enabit ( n -- bit addr )  \\ return bit and enable address for timer n$/;"	d
timer-enabit	flib/stm32l0/timer.fs	/^: timer-enabit ( n -- bit addr )  \\ return bit and enable address for timer n$/;"	d
timer-init	embello/flib/stm32f1/timer.fs	/^: timer-init ( u n -- )  \\ enable timer n as free-running with period u$/;"	d
timer-init	embello/flib/stm32l0/timer.fs	/^: timer-init ( u n -- )  \\ enable timer n as free-running with period u$/;"	d
timer-init	flib/./stm32f1/timer.fs	/^: timer-init ( u n -- )  \\ enable timer n as free-running with period u$/;"	d
timer-init	flib/./stm32l0/timer.fs	/^: timer-init ( u n -- )  \\ enable timer n as free-running with period u$/;"	d
timer-init	flib/stm32f1/timer.fs	/^: timer-init ( u n -- )  \\ enable timer n as free-running with period u$/;"	d
timer-init	flib/stm32l0/timer.fs	/^: timer-init ( u n -- )  \\ enable timer n as free-running with period u$/;"	d
timer-lookup	embello/flib/stm32f1/timer.fs	/^: timer-lookup ( n - pos ) 1- timer-table + c@ ;$/;"	d
timer-lookup	flib/./stm32f1/timer.fs	/^: timer-lookup ( n - pos ) 1- timer-table + c@ ;$/;"	d
timer-lookup	flib/stm32f1/timer.fs	/^: timer-lookup ( n - pos ) 1- timer-table + c@ ;$/;"	d
times	embello/cag/ex/io.fs	/^: times cr$/;"	d
times	embello/g6s/ex/io.fs	/^: times cr$/;"	d
tlv-data	embello/flib/i2c/tlv493.fs	/^: tlv-data ( -- x y z )$/;"	d
tlv-data	flib/./i2c/tlv493.fs	/^: tlv-data ( -- x y z )$/;"	d
tlv-data	flib/i2c/tlv493.fs	/^: tlv-data ( -- x y z )$/;"	d
tlv-init	embello/flib/i2c/tlv493.fs	/^: tlv-init ( -- )  \\ configure the TLV493 for 10 Hz ultra-low power sampling$/;"	d
tlv-init	flib/./i2c/tlv493.fs	/^: tlv-init ( -- )  \\ configure the TLV493 for 10 Hz ultra-low power sampling$/;"	d
tlv-init	flib/i2c/tlv493.fs	/^: tlv-init ( -- )  \\ configure the TLV493 for 10 Hz ultra-low power sampling$/;"	d
tlv-rd	embello/flib/i2c/tlv493.fs	/^: tlv-rd ( n -- )  \\ read n bytes from sensor to info buffer$/;"	d
tlv-rd	flib/./i2c/tlv493.fs	/^: tlv-rd ( n -- )  \\ read n bytes from sensor to info buffer$/;"	d
tlv-rd	flib/i2c/tlv493.fs	/^: tlv-rd ( n -- )  \\ read n bytes from sensor to info buffer$/;"	d
tlv-sign	embello/flib/i2c/tlv493.fs	/^: tlv-sign ( u u -- n )$/;"	d
tlv-sign	flib/./i2c/tlv493.fs	/^: tlv-sign ( u u -- n )$/;"	d
tlv-sign	flib/i2c/tlv493.fs	/^: tlv-sign ( u u -- n )$/;"	d
tlv-wr	embello/flib/i2c/tlv493.fs	/^: tlv-wr ( u -- )  \\ write configuration bytes to sensor$/;"	d
tlv-wr	flib/./i2c/tlv493.fs	/^: tlv-wr ( u -- )  \\ write configuration bytes to sensor$/;"	d
tlv-wr	flib/i2c/tlv493.fs	/^: tlv-wr ( u -- )  \\ write configuration bytes to sensor$/;"	d
tmd-call-addr	embello/flib/any/timed.fs	/^: tmd-call-addr ( slot# - addr ) timed-data swap 4 * 2+  cells + ;$/;"	d
tmd-call-addr	flib/./any/timed.fs	/^: tmd-call-addr ( slot# - addr ) timed-data swap 4 * 2+  cells + ;$/;"	d
tmd-call-addr	flib/any/timed.fs	/^: tmd-call-addr ( slot# - addr ) timed-data swap 4 * 2+  cells + ;$/;"	d
tmd-inte-addr	embello/flib/any/timed.fs	/^: tmd-inte-addr ( slot# - addr ) timed-data swap 4 *     cells + ;$/;"	d
tmd-inte-addr	flib/./any/timed.fs	/^: tmd-inte-addr ( slot# - addr ) timed-data swap 4 *     cells + ;$/;"	d
tmd-inte-addr	flib/any/timed.fs	/^: tmd-inte-addr ( slot# - addr ) timed-data swap 4 *     cells + ;$/;"	d
tmd-last-addr	embello/flib/any/timed.fs	/^: tmd-last-addr ( slot# - addr ) timed-data swap 4 * 1+  cells + ;$/;"	d
tmd-last-addr	flib/./any/timed.fs	/^: tmd-last-addr ( slot# - addr ) timed-data swap 4 * 1+  cells + ;$/;"	d
tmd-last-addr	flib/any/timed.fs	/^: tmd-last-addr ( slot# - addr ) timed-data swap 4 * 1+  cells + ;$/;"	d
tmd-repe-addr	embello/flib/any/timed.fs	/^: tmd-repe-addr ( slot# - addr ) timed-data swap 4 * 3 + cells + ;$/;"	d
tmd-repe-addr	flib/./any/timed.fs	/^: tmd-repe-addr ( slot# - addr ) timed-data swap 4 * 3 + cells + ;$/;"	d
tmd-repe-addr	flib/any/timed.fs	/^: tmd-repe-addr ( slot# - addr ) timed-data swap 4 * 3 + cells + ;$/;"	d
tmp102	embello/flib/i2c/tmp102.fs	/^: tmp102 ( -- i )  \\ returns temp in steps of 0.1 °C$/;"	d
tmp102	flib/./i2c/tmp102.fs	/^: tmp102 ( -- i )  \\ returns temp in steps of 0.1 °C$/;"	d
tmp102	flib/i2c/tmp102.fs	/^: tmp102 ( -- i )  \\ returns temp in steps of 0.1 °C$/;"	d
tmp102-init	embello/flib/i2c/tmp102.fs	/^: tmp102-init ( -- )  \\ initialise the TMP102, assuming it's powered by IO pins$/;"	d
tmp102-init	flib/./i2c/tmp102.fs	/^: tmp102-init ( -- )  \\ initialise the TMP102, assuming it's powered by IO pins$/;"	d
tmp102-init	flib/i2c/tmp102.fs	/^: tmp102-init ( -- )  \\ initialise the TMP102, assuming it's powered by IO pins$/;"	d
tmp102-power	embello/flib/i2c/tmp102.fs	/^: tmp102-power$/;"	d
tmp102-power	flib/./i2c/tmp102.fs	/^: tmp102-power$/;"	d
tmp102-power	flib/i2c/tmp102.fs	/^: tmp102-power$/;"	d
tn	tracker/speed.fs	/^: tn ." >spiN: " micros data 256 0 >spiN micros swap - 66 - 10 * 256 \/ . ;$/;"	d
tn.state	embello/tex/x-telnet.fs	/^0 variable tn.state$/;"	d
toggle	embello/jz1/ex/leds.fs	/^: toggle ( pin -- )  dup ios!  100 ms  ioc! ;$/;"	d
toggle	embello/jz4/ex/tone.fs	/^: toggle$/;"	d
toggle	jz1/./ex/leds.fs	/^: toggle ( pin -- )  dup ios!  100 ms  ioc! ;$/;"	d
toggle	jz1/ex/leds.fs	/^: toggle ( pin -- )  dup ios!  100 ms  ioc! ;$/;"	d
toggle-heater	embello/sic/e-pinchange.fs	/^: toggle-heater ( -- ) ." PRESSED" CR ;$/;"	d
traceinside.	embello/flib/mecrisp/calltrace.fs	/^: traceinside. ( Address -- )$/;"	d
traceinside.	flib/./mecrisp/calltrace.fs	/^: traceinside. ( Address -- )$/;"	d
traceinside.	flib/mecrisp/calltrace.fs	/^: traceinside. ( Address -- )$/;"	d
try-div	embello/flib/i2c/si570.fs	/^: try-div ( n1 hs -- n1 hs f )$/;"	d
try-div	flib/./i2c/si570.fs	/^: try-div ( n1 hs -- n1 hs f )$/;"	d
try-div	flib/i2c/si570.fs	/^: try-div ( n1 hs -- n1 hs f )$/;"	d
tryfat	embello/ezr/ex/sdfat.fs	/^: tryfat$/;"	d
tsl-addr	embello/flib/i2c/tsl4531.fs	/^: tsl-addr $29 i2c-addr ;                 \\ set the device i2c address$/;"	d
tsl-addr	flib/./i2c/tsl4531.fs	/^: tsl-addr $29 i2c-addr ;                 \\ set the device i2c address$/;"	d
tsl-addr	flib/i2c/tsl4531.fs	/^: tsl-addr $29 i2c-addr ;                 \\ set the device i2c address$/;"	d
tsl-convert	embello/flib/i2c/tsl4531.fs	/^: tsl-convert ( -- ms ) \\ one-shot conversion, returns time to sleep before tsl-data$/;"	d
tsl-convert	flib/./i2c/tsl4531.fs	/^: tsl-convert ( -- ms ) \\ one-shot conversion, returns time to sleep before tsl-data$/;"	d
tsl-convert	flib/i2c/tsl4531.fs	/^: tsl-convert ( -- ms ) \\ one-shot conversion, returns time to sleep before tsl-data$/;"	d
tsl-ctrl	embello/flib/i2c/tsl4531.fs	/^: tsl-ctrl ( -- ) 0 tsl-reg ;             \\ select control register$/;"	d
tsl-ctrl	flib/./i2c/tsl4531.fs	/^: tsl-ctrl ( -- ) 0 tsl-reg ;             \\ select control register$/;"	d
tsl-ctrl	flib/i2c/tsl4531.fs	/^: tsl-ctrl ( -- ) 0 tsl-reg ;             \\ select control register$/;"	d
tsl-data	embello/flib/i2c/tsl4531.fs	/^: tsl-data ( -- v ) \\ read data$/;"	d
tsl-data	flib/./i2c/tsl4531.fs	/^: tsl-data ( -- v ) \\ read data$/;"	d
tsl-data	flib/i2c/tsl4531.fs	/^: tsl-data ( -- v ) \\ read data$/;"	d
tsl-dreg	embello/flib/i2c/tsl4531.fs	/^: tsl-dreg ( -- ) 4 tsl-reg ;             \\ select data register$/;"	d
tsl-dreg	flib/./i2c/tsl4531.fs	/^: tsl-dreg ( -- ) 4 tsl-reg ;             \\ select data register$/;"	d
tsl-dreg	flib/i2c/tsl4531.fs	/^: tsl-dreg ( -- ) 4 tsl-reg ;             \\ select data register$/;"	d
tsl-init	embello/flib/i2c/tsl4531.fs	/^: tsl-init ( -- nak ) \\ put device into normal mode, 400ms integration$/;"	d
tsl-init	flib/./i2c/tsl4531.fs	/^: tsl-init ( -- nak ) \\ put device into normal mode, 400ms integration$/;"	d
tsl-init	flib/i2c/tsl4531.fs	/^: tsl-init ( -- nak ) \\ put device into normal mode, 400ms integration$/;"	d
tsl-reg	embello/flib/i2c/tsl4531.fs	/^: tsl-reg ( n -- ) tsl-addr $80 or >i2c ; \\ select register n$/;"	d
tsl-reg	flib/./i2c/tsl4531.fs	/^: tsl-reg ( n -- ) tsl-addr $80 or >i2c ; \\ select register n$/;"	d
tsl-reg	flib/i2c/tsl4531.fs	/^: tsl-reg ( n -- ) tsl-addr $80 or >i2c ; \\ select register n$/;"	d
tsl-sleep	embello/flib/i2c/tsl4531.fs	/^: tsl-sleep ( -- ) \\ put device to sleep$/;"	d
tsl-sleep	flib/./i2c/tsl4531.fs	/^: tsl-sleep ( -- ) \\ put device to sleep$/;"	d
tsl-sleep	flib/i2c/tsl4531.fs	/^: tsl-sleep ( -- ) \\ put device to sleep$/;"	d
tuning	embello/flib/any/pid.fs	/^: tuning  ( f_kp f_ki f_kd -- )  \\ Change tuning-parameters on a running pid$/;"	d
tuning	flib/./any/pid.fs	/^: tuning  ( f_kp f_ki f_kd -- )  \\ Change tuning-parameters on a running pid$/;"	d
tuning	flib/any/pid.fs	/^: tuning  ( f_kp f_ki f_kd -- )  \\ Change tuning-parameters on a running pid$/;"	d
tx+	tracker/rf-test.fs	/^: tx+ ( b -- ) txlen mem++ txbuf + c! ;$/;"	d
tx+ack	tracker/oldtracker.fs	/^: tx+ack ( c-addr len -- )$/;"	d
tx+ack	tracker/tracker.fs	/^: tx+ack ( c-addr len -- ok ) \\ tx packet, get ack, return flag whether got ack$/;"	d
tx-cont	tracker/rf-test.fs	/^: tx-cont begin 1234 0 <# #s #> $A5 rf-send [char] # emit 100 ms key? until ;$/;"	d
tx-start	tracker/rf-test.fs	/^: tx-start ( -- ) 0 txlen ! ;$/;"	d
tx.pend	embello/suf/usb.fs	/^0 variable tx.pend$/;"	d
tx1	tracker/rf-test.fs	/^: tx1 tx-start $81 tx+$/;"	d
txa	tracker/rf-test.fs	/^: txa$/;"	d
txa-loop	tracker/rf-test.fs	/^: txa-loop led-off cr begin txa key? until ;$/;"	d
txclear	embello/suf/usb.fs	/^: txclear ( ep -- ) ep-addr dup h@ $FF7F and $8F8F and swap h! ;$/;"	d
txlen	tracker/oldtracker.fs	/^0 variable txlen$/;"	d
txlen	tracker/rf-test.fs	/^0 variable txlen$/;"	d
txstat!	embello/suf/usb.fs	/^: txstat! ( ep u -- )  \\ set stat_tx without toggling\/setting any other fields$/;"	d
u	embello/ezr/pokemon.fs	/^: u  $FFE000 a ;$/;"	d
u.2	embello/flib/mecrisp/hexdump.fs	/^: u.2 ( u -- ) 0 <# # # #> type ;$/;"	d
u.2	flib/./mecrisp/hexdump.fs	/^: u.2 ( u -- ) 0 <# # # #> type ;$/;"	d
u.2	flib/mecrisp/hexdump.fs	/^: u.2 ( u -- ) 0 <# # # #> type ;$/;"	d
u.4	embello/flib/mecrisp/disassembler-m0.fs	/^: u.4  0 <# # # # # #> type ;$/;"	d
u.4	embello/flib/mecrisp/disassembler-m3.fs	/^: u.4  0 <# # # # # #> type ;$/;"	d
u.4	embello/flib/mecrisp/hexdump.fs	/^: u.4 ( u -- ) 0 <# # # # # #> type ;$/;"	d
u.4	flib/./mecrisp/disassembler-m0.fs	/^: u.4  0 <# # # # # #> type ;$/;"	d
u.4	flib/./mecrisp/disassembler-m3.fs	/^: u.4  0 <# # # # # #> type ;$/;"	d
u.4	flib/./mecrisp/hexdump.fs	/^: u.4 ( u -- ) 0 <# # # # # #> type ;$/;"	d
u.4	flib/mecrisp/disassembler-m0.fs	/^: u.4  0 <# # # # # #> type ;$/;"	d
u.4	flib/mecrisp/disassembler-m3.fs	/^: u.4  0 <# # # # # #> type ;$/;"	d
u.4	flib/mecrisp/hexdump.fs	/^: u.4 ( u -- ) 0 <# # # # # #> type ;$/;"	d
u.8	embello/flib/mecrisp/disassembler-m0.fs	/^: u.8  0 <# # # # # # # # # #> type ;$/;"	d
u.8	embello/flib/mecrisp/disassembler-m3.fs	/^: u.8  0 <# # # # # # # # # #> type ;$/;"	d
u.8	flib/./mecrisp/disassembler-m0.fs	/^: u.8  0 <# # # # # # # # # #> type ;$/;"	d
u.8	flib/./mecrisp/disassembler-m3.fs	/^: u.8  0 <# # # # # # # # # #> type ;$/;"	d
u.8	flib/mecrisp/disassembler-m0.fs	/^: u.8  0 <# # # # # # # # # #> type ;$/;"	d
u.8	flib/mecrisp/disassembler-m3.fs	/^: u.8  0 <# # # # # # # # # #> type ;$/;"	d
u.n	tlib/numprint.fs	/^: u.n ( u n -- ) \\ print u using n characters (leading space)$/;"	d
u.ns	embello/flib/mecrisp/disassembler-m0.fs	/^: u.ns 0 <# #s #> type ;$/;"	d
u.ns	embello/flib/mecrisp/disassembler-m3.fs	/^: u.ns 0 <# #s #> type ;$/;"	d
u.ns	flib/./mecrisp/disassembler-m0.fs	/^: u.ns 0 <# #s #> type ;$/;"	d
u.ns	flib/./mecrisp/disassembler-m3.fs	/^: u.ns 0 <# #s #> type ;$/;"	d
u.ns	flib/mecrisp/disassembler-m0.fs	/^: u.ns 0 <# #s #> type ;$/;"	d
u.ns	flib/mecrisp/disassembler-m3.fs	/^: u.ns 0 <# #s #> type ;$/;"	d
u>s16	embello/ten/dev.fs	/^: u>s16 ( u -- n ) 16 lshift 16 arshift ;$/;"	d
uart-baud	embello/flib/stm32f1/uart2.fs	/^: uart-baud ( n -- )  \\ set baud rate assuming PCLK1 = sysclk\/2$/;"	d
uart-baud	flib/./stm32f1/uart2.fs	/^: uart-baud ( n -- )  \\ set baud rate assuming PCLK1 = sysclk\/2$/;"	d
uart-baud	flib/stm32f1/uart2.fs	/^: uart-baud ( n -- )  \\ set baud rate assuming PCLK1 = sysclk\/2$/;"	d
uart-emit	embello/flib/stm32f1/uart2.fs	/^: uart-emit ( c -- ) begin uart-emit? until  USART2-DR ! ;$/;"	d
uart-emit	flib/./stm32f1/uart2.fs	/^: uart-emit ( c -- ) begin uart-emit? until  USART2-DR ! ;$/;"	d
uart-emit	flib/stm32f1/uart2.fs	/^: uart-emit ( c -- ) begin uart-emit? until  USART2-DR ! ;$/;"	d
uart-emit?	embello/flib/stm32f1/uart2.fs	/^: uart-emit? ( -- f ) pause 1 7 lshift USART2-SR bit@ ;$/;"	d
uart-emit?	flib/./stm32f1/uart2.fs	/^: uart-emit? ( -- f ) pause 1 7 lshift USART2-SR bit@ ;$/;"	d
uart-emit?	flib/stm32f1/uart2.fs	/^: uart-emit? ( -- f ) pause 1 7 lshift USART2-SR bit@ ;$/;"	d
uart-init	embello/flib/stm32f1/uart2.fs	/^: uart-init ( -- )$/;"	d
uart-init	flib/./stm32f1/uart2.fs	/^: uart-init ( -- )$/;"	d
uart-init	flib/stm32f1/uart2.fs	/^: uart-init ( -- )$/;"	d
uart-irq-handler	embello/flib/stm32f1/uart2-irq.fs	/^: uart-irq-handler ( -- )  \\ handle the USART receive interrupt$/;"	d
uart-irq-handler	flib/./stm32f1/uart2-irq.fs	/^: uart-irq-handler ( -- )  \\ handle the USART receive interrupt$/;"	d
uart-irq-handler	flib/stm32f1/uart2-irq.fs	/^: uart-irq-handler ( -- )  \\ handle the USART receive interrupt$/;"	d
uart-irq-init	embello/flib/stm32f1/uart2-irq.fs	/^: uart-irq-init ( -- )  \\ initialise the USART2 using a receive ring buffer$/;"	d
uart-irq-init	flib/./stm32f1/uart2-irq.fs	/^: uart-irq-init ( -- )  \\ initialise the USART2 using a receive ring buffer$/;"	d
uart-irq-init	flib/stm32f1/uart2-irq.fs	/^: uart-irq-init ( -- )  \\ initialise the USART2 using a receive ring buffer$/;"	d
uart-irq-key	embello/flib/stm32f1/uart2-irq.fs	/^: uart-irq-key ( -- c )  \\ input read from interrupt-driven ring buffer$/;"	d
uart-irq-key	flib/./stm32f1/uart2-irq.fs	/^: uart-irq-key ( -- c )  \\ input read from interrupt-driven ring buffer$/;"	d
uart-irq-key	flib/stm32f1/uart2-irq.fs	/^: uart-irq-key ( -- c )  \\ input read from interrupt-driven ring buffer$/;"	d
uart-irq-key?	embello/flib/stm32f1/uart2-irq.fs	/^: uart-irq-key? ( -- f )  \\ input check for interrupt-driven ring buffer$/;"	d
uart-irq-key?	flib/./stm32f1/uart2-irq.fs	/^: uart-irq-key? ( -- f )  \\ input check for interrupt-driven ring buffer$/;"	d
uart-irq-key?	flib/stm32f1/uart2-irq.fs	/^: uart-irq-key? ( -- f )  \\ input check for interrupt-driven ring buffer$/;"	d
uart-key	embello/flib/stm32f1/uart2.fs	/^: uart-key ( -- c ) begin uart-key? until  USART2-DR @ ;$/;"	d
uart-key	flib/./stm32f1/uart2.fs	/^: uart-key ( -- c ) begin uart-key? until  USART2-DR @ ;$/;"	d
uart-key	flib/stm32f1/uart2.fs	/^: uart-key ( -- c ) begin uart-key? until  USART2-DR @ ;$/;"	d
uart-key?	embello/flib/stm32f1/uart2.fs	/^: uart-key? ( -- f ) pause 1 5 lshift USART2-SR bit@ ;$/;"	d
uart-key?	flib/./stm32f1/uart2.fs	/^: uart-key? ( -- f ) pause 1 5 lshift USART2-SR bit@ ;$/;"	d
uart-key?	flib/stm32f1/uart2.fs	/^: uart-key? ( -- f ) pause 1 5 lshift USART2-SR bit@ ;$/;"	d
uart-reader&	embello/ezr/ex/bridge.fs	/^: uart-reader&$/;"	d
uart-reader&	embello/ezr/pokemon.fs	/^: uart-reader&$/;"	d
uart.	embello/flib/stm32f1/uart2.fs	/^: uart. ( -- )$/;"	d
uart.	flib/./stm32f1/uart2.fs	/^: uart. ( -- )$/;"	d
uart.	flib/stm32f1/uart2.fs	/^: uart. ( -- )$/;"	d
uart0_brgl	embello/ezr/asm/hello.asm	/^uart0_brgl: equ $C0$/;"	d
uart0_brgl	embello/ezr/asm/hellow.asm	/^uart0_brgl: equ $C0$/;"	d
uart0_fctl	embello/ezr/asm/hello.asm	/^uart0_fctl: equ $C2$/;"	d
uart0_fctl	embello/ezr/asm/hellow.asm	/^uart0_fctl: equ $C2$/;"	d
uart0_lctl	embello/ezr/asm/hello.asm	/^uart0_lctl: equ $C3$/;"	d
uart0_lctl	embello/ezr/asm/hellow.asm	/^uart0_lctl: equ $C3$/;"	d
uart0_lsr	embello/ezr/asm/hello.asm	/^uart0_lsr:  equ $C5$/;"	d
uart0_lsr	embello/ezr/asm/hellow.asm	/^uart0_lsr:  equ $C5$/;"	d
uart0_rbr	embello/ezr/asm/hello.asm	/^uart0_rbr:  equ $C0$/;"	d
uart0_rbr	embello/ezr/asm/hellow.asm	/^uart0_rbr:  equ $C0$/;"	d
uart0_thr	embello/ezr/asm/hello.asm	/^uart0_thr:  equ $C0$/;"	d
uart0_thr	embello/ezr/asm/hellow.asm	/^uart0_thr:  equ $C0$/;"	d
uart1-emit	tracker/tracker.fs	/^: uart1-emit ( c -- ) begin uart1-emit? until USART1-TDR ! ;$/;"	d
uart1-emit?	tracker/tracker.fs	/^: uart1-emit? ( -- f ) 7 bit USART1-ISR bit@ ;$/;"	d
uart2-baud	embello/flib/stm32l0/uart2.fs	/^: uart2-baud ( n -- ) dup 2\/ 16000000 + swap \/ USART2-BRR ! ; \\ assumes 16Mhz clock$/;"	d
uart2-baud	flib/./stm32l0/uart2.fs	/^: uart2-baud ( n -- ) dup 2\/ 16000000 + swap \/ USART2-BRR ! ; \\ assumes 16Mhz clock$/;"	d
uart2-baud	flib/stm32l0/uart2.fs	/^: uart2-baud ( n -- ) dup 2\/ 16000000 + swap \/ USART2-BRR ! ; \\ assumes 16Mhz clock$/;"	d
uart2-emit	embello/flib/stm32l0/uart2.fs	/^: uart2-emit ( c -- ) begin uart2-emit? until USART2-TDR ! ;$/;"	d
uart2-emit	flib/./stm32l0/uart2.fs	/^: uart2-emit ( c -- ) begin uart2-emit? until USART2-TDR ! ;$/;"	d
uart2-emit	flib/stm32l0/uart2.fs	/^: uart2-emit ( c -- ) begin uart2-emit? until USART2-TDR ! ;$/;"	d
uart2-emit?	embello/flib/stm32l0/uart2.fs	/^: uart2-emit? ( -- f ) pause 7 bit USART2-ISR bit@ ;$/;"	d
uart2-emit?	flib/./stm32l0/uart2.fs	/^: uart2-emit? ( -- f ) pause 7 bit USART2-ISR bit@ ;$/;"	d
uart2-emit?	flib/stm32l0/uart2.fs	/^: uart2-emit? ( -- f ) pause 7 bit USART2-ISR bit@ ;$/;"	d
uart2-init	embello/flib/stm32l0/uart2-irq.fs	/^: uart2-init ( -- )  \\ initialise the USART2 using a receive ring buffer$/;"	d
uart2-init	embello/flib/stm32l0/uart2.fs	/^: uart2-init ( -- )  \\ set up hardware USART$/;"	d
uart2-init	flib/./stm32l0/uart2-irq.fs	/^: uart2-init ( -- )  \\ initialise the USART2 using a receive ring buffer$/;"	d
uart2-init	flib/./stm32l0/uart2.fs	/^: uart2-init ( -- )  \\ set up hardware USART$/;"	d
uart2-init	flib/stm32l0/uart2-irq.fs	/^: uart2-init ( -- )  \\ initialise the USART2 using a receive ring buffer$/;"	d
uart2-init	flib/stm32l0/uart2.fs	/^: uart2-init ( -- )  \\ set up hardware USART$/;"	d
uart2-irq-handler	embello/flib/stm32l0/uart2-irq.fs	/^: uart2-irq-handler ( -- )  \\ handle the USART receive interrupt$/;"	d
uart2-irq-handler	flib/./stm32l0/uart2-irq.fs	/^: uart2-irq-handler ( -- )  \\ handle the USART receive interrupt$/;"	d
uart2-irq-handler	flib/stm32l0/uart2-irq.fs	/^: uart2-irq-handler ( -- )  \\ handle the USART receive interrupt$/;"	d
uart2-key	embello/flib/stm32l0/uart2-irq.fs	/^: uart2-key ( -- c )  \\ input read from interrupt-driven ring buffer$/;"	d
uart2-key	embello/flib/stm32l0/uart2.fs	/^: uart2-key ( -- c ) begin uart2-key? until USART2-RDR @ ;$/;"	d
uart2-key	flib/./stm32l0/uart2-irq.fs	/^: uart2-key ( -- c )  \\ input read from interrupt-driven ring buffer$/;"	d
uart2-key	flib/./stm32l0/uart2.fs	/^: uart2-key ( -- c ) begin uart2-key? until USART2-RDR @ ;$/;"	d
uart2-key	flib/stm32l0/uart2-irq.fs	/^: uart2-key ( -- c )  \\ input read from interrupt-driven ring buffer$/;"	d
uart2-key	flib/stm32l0/uart2.fs	/^: uart2-key ( -- c ) begin uart2-key? until USART2-RDR @ ;$/;"	d
uart2-key	follower/hc05-test.fs	/^: uart2-key inptr dup @ dup c@ swap 1+ rot ! ; \\ return next char at inbuf$/;"	d
uart2-key?	embello/flib/stm32l0/uart2-irq.fs	/^: uart2-key? ( -- f )  \\ input check for interrupt-driven ring buffer$/;"	d
uart2-key?	embello/flib/stm32l0/uart2.fs	/^: uart2-key? ( -- f ) pause 5 bit USART2-ISR bit@ ;$/;"	d
uart2-key?	flib/./stm32l0/uart2-irq.fs	/^: uart2-key? ( -- f )  \\ input check for interrupt-driven ring buffer$/;"	d
uart2-key?	flib/./stm32l0/uart2.fs	/^: uart2-key? ( -- f ) pause 5 bit USART2-ISR bit@ ;$/;"	d
uart2-key?	flib/stm32l0/uart2-irq.fs	/^: uart2-key? ( -- f )  \\ input check for interrupt-driven ring buffer$/;"	d
uart2-key?	flib/stm32l0/uart2.fs	/^: uart2-key? ( -- f ) pause 5 bit USART2-ISR bit@ ;$/;"	d
uart2.	embello/flib/stm32l0/uart2.fs	/^: uart2. ( -- )$/;"	d
uart2.	flib/./stm32l0/uart2.fs	/^: uart2. ( -- )$/;"	d
uart2.	flib/stm32l0/uart2.fs	/^: uart2. ( -- )$/;"	d
unattended	embello/i2c/board.fs	/^: unattended$/;"	d
unattended	embello/jz1/board.fs	/^: unattended$/;"	d
unattended	embello/jz3/board.fs	/^: unattended$/;"	d
unattended	embello/jz4/board.fs	/^: unattended$/;"	d
unattended	embello/lnr/board.fs	/^: unattended$/;"	d
unattended	embello/rvm/board.fs	/^: unattended$/;"	d
unattended	embello/ten/board.fs	/^: unattended$/;"	d
unattended	jz1/./board.fs	/^: unattended$/;"	d
unattended	jz1/board.fs	/^: unattended$/;"	d
unattended	jz3/./board.fs	/^: unattended$/;"	d
unattended	jz3/board.fs	/^: unattended$/;"	d
unattended	oledtemp/board.fs	/^: unattended$/;"	d
up	embello/flib/mecrisp/multi.fs	/^boot-task variable up \\ User Pointer$/;"	d
up	flib/./mecrisp/multi.fs	/^boot-task variable up \\ User Pointer$/;"	d
up	flib/mecrisp/multi.fs	/^boot-task variable up \\ User Pointer$/;"	d
up-alone?	embello/flib/mecrisp/multi.fs	/^: up-alone? ( -- ? ) \\ Checks if all other tasks are currently in idle state$/;"	d
up-alone?	flib/./mecrisp/multi.fs	/^: up-alone? ( -- ? ) \\ Checks if all other tasks are currently in idle state$/;"	d
up-alone?	flib/mecrisp/multi.fs	/^: up-alone? ( -- ? ) \\ Checks if all other tasks are currently in idle state$/;"	d
uploader	embello/qld/dev.fs	/^: uploader ( -- f )$/;"	d
us	central/x-clock.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	embello/flib/stm32f1/clock.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	embello/flib/stm32f1/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	embello/flib/stm32f7/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	embello/flib/stm32l0/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	flib/./stm32f1/clock.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	flib/./stm32f1/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	flib/./stm32f7/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	flib/./stm32l0/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	flib/stm32f1/clock.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	flib/stm32f1/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	flib/stm32f7/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us	flib/stm32l0/hal.fs	/^: us ( n -- )  \\ microsecond delay using a busy loop, this won't switch tasks$/;"	d
us/cycl-factor	embello/flib/stm32l0/hal.fs	/^: us\/cycl-factor 65536 1000000 um* clock-hz @ um\/mod us\/cycle*2^16 ! drop ;$/;"	d
us/cycl-factor	flib/./stm32l0/hal.fs	/^: us\/cycl-factor 65536 1000000 um* clock-hz @ um\/mod us\/cycle*2^16 ! drop ;$/;"	d
us/cycl-factor	flib/stm32l0/hal.fs	/^: us\/cycl-factor 65536 1000000 um* clock-hz @ um\/mod us\/cycle*2^16 ! drop ;$/;"	d
us/cycle*2^16	embello/flib/stm32l0/hal.fs	/^4096      variable us\/cycle*2^16$/;"	d
us/cycle*2^16	flib/./stm32l0/hal.fs	/^4096      variable us\/cycle*2^16$/;"	d
us/cycle*2^16	flib/stm32l0/hal.fs	/^4096      variable us\/cycle*2^16$/;"	d
usart1-baud-update!	embello/kb7/clock.fs	/^: usart1-baud-update! ( baud -- ) \\ update usart baudrate$/;"	d
usart1-clk-sel!	embello/kb7/clock.fs	/^: usart1-clk-sel! ( n -- ) \\ set usart1 clk source$/;"	d
usb-ctr	embello/suf/usb.fs	/^: usb-ctr ( istr -- )$/;"	d
usb-emit	embello/suf/usb.fs	/^: usb-emit ( c -- )  begin usb-emit? until  usb-out-ring >ring$/;"	d
usb-emit?	embello/suf/usb.fs	/^: usb-emit? ( -- f )  usb-poll usb-out-ring ring? ;$/;"	d
usb-fill	embello/suf/usb.fs	/^: usb-fill ( -- )  \\ fill the USB outbound buffer from the TX ring buffer$/;"	d
usb-flush	embello/suf/usb.fs	/^: usb-flush$/;"	d
usb-io	embello/suf/usb.fs	/^: usb-io ( -- )  \\ start up USB and switch console I\/O to it$/;"	d
usb-key	embello/suf/usb.fs	/^: usb-key ( -- c )  begin usb-key? until  usb-in-ring ring> ;$/;"	d
usb-key?	embello/suf/usb.fs	/^: usb-key? ( -- f )  pause usb-poll usb-in-ring ring# 0<> ;$/;"	d
usb-mv	embello/prc2/dev.fs	/^: usb-mv ( -- u )  \\ measure USB power rail voltage, 5V when attached to USB$/;"	d
usb-pma	embello/suf/usb.fs	/^: usb-pma ( pos -- addr ) dup 1 and negate swap 2* + USBMEM + ;$/;"	d
usb-pma!	embello/suf/usb.fs	/^: usb-pma! ( u pos -- ) usb-pma h! ;$/;"	d
usb-pma-c!	embello/suf/usb.fs	/^: usb-pma-c! ( b pos -- )  \\ careful, can't write high bytes separately$/;"	d
usb-pma@	embello/suf/usb.fs	/^: usb-pma@ ( pos -- u ) usb-pma h@ ;$/;"	d
usb-poll	embello/suf/usb.fs	/^: usb-poll$/;"	d
usb-reset	embello/suf/usb.fs	/^: usb-reset ( -- )$/;"	d
usb.	embello/suf/ex/old.fs	/^: usb. ( -- )  \\ dump USB info$/;"	d
usb.mem	embello/suf/ex/old.fs	/^: usb.mem ( -- )  \\ dump packet buffer memory$/;"	d
usb.ticks	embello/suf/usb.fs	/^0 variable usb.ticks$/;"	d
v	embello/ezr/pokemon.fs	/^: v  0 zdi> h.2 space  1 zdi> h.2 space  2 zdi> h.2 space ;$/;"	d
v-cellar	temp/rftemp.fs	/^: v-cellar adc-vcc Vcellar @ min Vcellar ! ;$/;"	d
v-cellar	tlib/rfloop.fs	/^: v-cellar adc-vcc Vcellar @ min Vcellar ! ; \\ measure and update$/;"	d
v-cellar-init	temp/rftemp.fs	/^: v-cellar-init adc-vcc Vcellar ! ;$/;"	d
v-cellar-init	tlib/rfloop.fs	/^: v-cellar-init adc-vcc Vcellar ! ;          \\ measure and init$/;"	d
v>	embello/flib/any/varint.fs	/^: v> ( -- caddr len ) 0 0 #> ;  \\ finish, then return buffer and length$/;"	d
v>	flib/./any/varint.fs	/^: v> ( -- caddr len ) 0 0 #> ;  \\ finish, then return buffer and length$/;"	d
v>	flib/any/varint.fs	/^: v> ( -- caddr len ) 0 0 #> ;  \\ finish, then return buffer and length$/;"	d
var-init	embello/flib/any/varint.fs	/^: var-init ( addr cnt -- )  \\ initialise the varint decoder$/;"	d
var-init	flib/./any/varint.fs	/^: var-init ( addr cnt -- )  \\ initialise the varint decoder$/;"	d
var-init	flib/any/varint.fs	/^: var-init ( addr cnt -- )  \\ initialise the varint decoder$/;"	d
var.	embello/flib/any/varint.fs	/^: var. ( addr cnt -- )  \\ decode and display all the varints$/;"	d
var.	flib/./any/varint.fs	/^: var. ( addr cnt -- )  \\ decode and display all the varints$/;"	d
var.	flib/any/varint.fs	/^: var. ( addr cnt -- )  \\ decode and display all the varints$/;"	d
var.end	embello/flib/any/varint.fs	/^0 variable var.end$/;"	d
var.end	flib/./any/varint.fs	/^0 variable var.end$/;"	d
var.end	flib/any/varint.fs	/^0 variable var.end$/;"	d
var.ptr	embello/flib/any/varint.fs	/^0 variable var.ptr$/;"	d
var.ptr	flib/./any/varint.fs	/^0 variable var.ptr$/;"	d
var.ptr	flib/any/varint.fs	/^0 variable var.ptr$/;"	d
var>	embello/flib/any/varint.fs	/^: var> ( -- 0 | n 1 ) \\ extract a signed number from the var buffer$/;"	d
var>	flib/./any/varint.fs	/^: var> ( -- 0 | n 1 ) \\ extract a signed number from the var buffer$/;"	d
var>	flib/any/varint.fs	/^: var> ( -- 0 | n 1 ) \\ extract a signed number from the var buffer$/;"	d
veml-data	embello/flib/i2c/veml6040.fs	/^: veml-data  ( -- r g b w )$/;"	d
veml-data	flib/./i2c/veml6040.fs	/^: veml-data  ( -- r g b w )$/;"	d
veml-data	flib/i2c/veml6040.fs	/^: veml-data  ( -- r g b w )$/;"	d
veml-init	embello/flib/i2c/veml6040.fs	/^: veml-init ( -- nak )$/;"	d
veml-init	flib/./i2c/veml6040.fs	/^: veml-init ( -- nak )$/;"	d
veml-init	flib/i2c/veml6040.fs	/^: veml-init ( -- nak )$/;"	d
veml-rd	embello/flib/i2c/veml6040.fs	/^: veml-rd ( reg -- val )$/;"	d
veml-rd	flib/./i2c/veml6040.fs	/^: veml-rd ( reg -- val )$/;"	d
veml-rd	flib/i2c/veml6040.fs	/^: veml-rd ( reg -- val )$/;"	d
voltage-scale-mode-1	embello/kb7/clock.fs	/^: voltage-scale-mode-1 ( -- ) 3 $03 14 lshift PWR_CR1 bits! ;$/;"	d
voltage-scale-mode-3	embello/kb7/clock.fs	/^: voltage-scale-mode-3 ( -- ) 1 $03 14 lshift PWR_CR1 bits! ;$/;"	d
vstatus	embello/ezr/vdisk.fs	/^0 variable vstatus$/;"	d
vx	embello/ezr/vdisk.fs	/^: vx init-all x t ;$/;"	d
vy	embello/ezr/vdisk.fs	/^: vy init-all y t ;$/;"	d
w	embello/ezr/pokemon.fs	/^: w ( u -- )  $30 >zdi ;$/;"	d
w4	embello/ezr/pokemon.fs	/^: w4 ( u -- )$/;"	d
wait	embello/jz3/ex/clock.fs	/^: wait begin sleep ( led iox! ) key? until ;  \\ 435 µA @2.1 \/ 1350 µA @16$/;"	d
wait	jz3/./ex/clock.fs	/^: wait begin sleep ( led iox! ) key? until ;  \\ 435 µA @2.1 \/ 1350 µA @16$/;"	d
wait	jz3/ex/clock.fs	/^: wait begin sleep ( led iox! ) key? until ;  \\ 435 µA @2.1 \/ 1350 µA @16$/;"	d
wait-ack	embello/qld/dev.fs	/^: wait-ack ( -- f )$/;"	d
wait-for-key	embello/jz1/ex/clock.fs	/^: wait-for-key begin sleep ( led iox! ) key? until ;$/;"	d
wait-for-key	jz1/./ex/clock.fs	/^: wait-for-key begin sleep ( led iox! ) key? until ;$/;"	d
wait-for-key	jz1/ex/clock.fs	/^: wait-for-key begin sleep ( led iox! ) key? until ;$/;"	d
wait-time	embello/sic/main.fs	/^0 variable wait-time$/;"	d
wake	embello/flib/mecrisp/multi.fs	/^: wake ( task -- ) 1 cells +  true swap ! ; \\ Wake a random task (IRQ safe)$/;"	d
wake	flib/./mecrisp/multi.fs	/^: wake ( task -- ) 1 cells +  true swap ! ; \\ Wake a random task (IRQ safe)$/;"	d
wake	flib/mecrisp/multi.fs	/^: wake ( task -- ) 1 cells +  true swap ! ; \\ Wake a random task (IRQ safe)$/;"	d
wbuf	embello/ezr/cpm2/wr1280k.c	/^char wbuf [BUFSIZE];$/;"	v
wfe	embello/flib/stm32l0/sleep.fs	/^: wfe ( -- )  \\ WFE Opcode, enters sleep mode$/;"	d
wfe	flib/./stm32l0/sleep.fs	/^: wfe ( -- )  \\ WFE Opcode, enters sleep mode$/;"	d
wfe	flib/stm32l0/sleep.fs	/^: wfe ( -- )  \\ WFE Opcode, enters sleep mode$/;"	d
widecosine	embello/flib/mecrisp/sine.fs	/^: widecosine ( f-angle -- f-cosine )$/;"	d
widecosine	flib/./mecrisp/sine.fs	/^: widecosine ( f-angle -- f-cosine )$/;"	d
widecosine	flib/mecrisp/sine.fs	/^: widecosine ( f-angle -- f-cosine )$/;"	d
widesine	embello/flib/mecrisp/sine.fs	/^: widesine ( f-angle -- f-sine )$/;"	d
widesine	flib/./mecrisp/sine.fs	/^: widesine ( f-angle -- f-sine )$/;"	d
widesine	flib/mecrisp/sine.fs	/^: widesine ( f-angle -- f-sine )$/;"	d
wr-unp	embello/qld/dev.fs	/^: wr-unp ( -- )$/;"	d
write5x	embello/cag/ex/io.fs	/^: write5x dup PIN io! dup PIN io! dup PIN io! dup PIN io! ( dup ) PIN io! ;$/;"	d
write5x	embello/g6s/ex/io.fs	/^: write5x dup PIN io! dup PIN io! dup PIN io! dup PIN io! ( dup ) PIN io! ;$/;"	d
x	embello/ezr/pokemon.fs	/^: x  RST ioc! 1 ms RST ios! ;$/;"	d
x1	embello/jz1/ex/iorate.fs	/^: x1 micros 1000 0 do io.out1 loop micros swap - . ; x1$/;"	d
x1	jz1/./ex/iorate.fs	/^: x1 micros 1000 0 do io.out1 loop micros swap - . ; x1$/;"	d
x1	jz1/ex/iorate.fs	/^: x1 micros 1000 0 do io.out1 loop micros swap - . ; x1$/;"	d
x2	embello/jz1/ex/iorate.fs	/^: x2 micros 1000 0 do io.out0 loop micros swap - . ; x2$/;"	d
x2	jz1/./ex/iorate.fs	/^: x2 micros 1000 0 do io.out0 loop micros swap - . ; x2$/;"	d
x2	jz1/ex/iorate.fs	/^: x2 micros 1000 0 do io.out0 loop micros swap - . ; x2$/;"	d
x>i2c	embello/flib/any/i2c-bb.fs	/^: x>i2c ( b -- nak )  \\ send one byte$/;"	d
x>i2c	flib/./any/i2c-bb.fs	/^: x>i2c ( b -- nak )  \\ send one byte$/;"	d
x>i2c	flib/any/i2c-bb.fs	/^: x>i2c ( b -- nak )  \\ send one byte$/;"	d
xi2c>	embello/flib/any/i2c-bb.fs	/^: xi2c> ( nak -- b )  \\ read one byte$/;"	d
xi2c>	flib/./any/i2c-bb.fs	/^: xi2c> ( nak -- b )  \\ read one byte$/;"	d
xi2c>	flib/any/i2c-bb.fs	/^: xi2c> ( nak -- b )  \\ read one byte$/;"	d
xor-buf-key+1	embello/flib/any/aes128.fs	/^: xor-buf-key+1 ( buf key -- buf+1 key+1 )$/;"	d
xor-buf-key+1	flib/./any/aes128.fs	/^: xor-buf-key+1 ( buf key -- buf+1 key+1 )$/;"	d
xor-buf-key+1	flib/any/aes128.fs	/^: xor-buf-key+1 ( buf key -- buf+1 key+1 )$/;"	d
xor-key	embello/flib/any/aes128.fs	/^: xor-key ( buf key len -- )$/;"	d
xor-key	flib/./any/aes128.fs	/^: xor-key ( buf key len -- )$/;"	d
xor-key	flib/any/aes128.fs	/^: xor-key ( buf key len -- )$/;"	d
xor-rcon	embello/flib/any/aes128.fs	/^: xor-rcon ( round -- )$/;"	d
xor-rcon	flib/./any/aes128.fs	/^: xor-rcon ( round -- )$/;"	d
xor-rcon	flib/any/aes128.fs	/^: xor-rcon ( round -- )$/;"	d
xor5x	embello/cag/ex/io.fs	/^: xor5x   PIN iox! PIN iox! PIN iox! PIN iox! PIN iox! ;$/;"	d
xor5x	embello/g6s/ex/io.fs	/^: xor5x   PIN iox! PIN iox! PIN iox! PIN iox! PIN iox! ;$/;"	d
xors	embello/cag/ex/io.fs	/^: xors   NUM\/5 0 do xor5x     loop ;$/;"	d
xors	embello/g6s/ex/io.fs	/^: xors   NUM\/5 0 do xor5x     loop ;$/;"	d
xsum	embello/qld/dev.fs	/^0 variable xsum$/;"	d
y	embello/ezr/pokemon.fs	/^: y  $80 $11 >zdi ;$/;"	d
yw	embello/bct/ex/adc.fs	/^0 constant yw  \\ yellow$/;"	d
z	embello/ezr/pokemon.fs	/^: z ( -- )$/;"	d
zcl-hi	embello/ezr/ex/bridge.fs	/^: zcl-hi  delay ZCL ios! delay ;$/;"	d
zcl-hi	embello/ezr/pokemon.fs	/^: zcl-hi  delay ZCL ios! delay ;$/;"	d
zcl-lo	embello/ezr/ex/bridge.fs	/^: zcl-lo  delay ZCL ioc! delay ;$/;"	d
zcl-lo	embello/ezr/pokemon.fs	/^: zcl-lo  delay ZCL ioc! delay ;$/;"	d
zdi!	embello/ezr/ex/bridge.fs	/^: zdi! ( f -- )  zcl-lo  ZDA io!  zcl-hi  ZDA ios! ;$/;"	d
zdi!	embello/ezr/pokemon.fs	/^: zdi! ( f -- )  zcl-lo  ZDA io!  zcl-hi  ZDA ios! ;$/;"	d
zdi-init	embello/ezr/ex/bridge.fs	/^: zdi-init ( -- )$/;"	d
zdi-start	embello/ezr/ex/bridge.fs	/^: zdi-start ( u -- )$/;"	d
zdi-start	embello/ezr/pokemon.fs	/^: zdi-start ( u -- )$/;"	d
zdi>	embello/ezr/ex/bridge.fs	/^: zdi> ( addr -- val )$/;"	d
zdi>	embello/ezr/pokemon.fs	/^: zdi> ( addr -- val )$/;"	d
zero5x	embello/cag/ex/io.fs	/^: zero5x  0 PIN io! 0 PIN io! 0 PIN io! 0 PIN io! 0 PIN io! ;$/;"	d
zero5x	embello/g6s/ex/io.fs	/^: zero5x  0 PIN io! 0 PIN io! 0 PIN io! 0 PIN io! 0 PIN io! ;$/;"	d
zeros	embello/cag/ex/io.fs	/^: zeros  NUM\/5 0 do zero5x    loop ;$/;"	d
zeros	embello/g6s/ex/io.fs	/^: zeros  NUM\/5 0 do zero5x    loop ;$/;"	d
zirq-setup	embello/ezr/vdisk.fs	/^: zirq-setup  \\ set up pin interrupt on rising SPI2 slave select on PB12$/;"	d
{	embello/jz3/ex/quot.fs	/^: { ( -- )$/;"	d
{	jz3/./ex/quot.fs	/^: { ( -- )$/;"	d
{	jz3/ex/quot.fs	/^: { ( -- )$/;"	d
}	embello/jz3/ex/quot.fs	/^: } ( -- )$/;"	d
}	jz3/./ex/quot.fs	/^: } ( -- )$/;"	d
}	jz3/ex/quot.fs	/^: } ( -- )$/;"	d
~mix-col	embello/flib/any/aes128inv.fs	/^: ~mix-col (  ) $/;"	d
~mix-col	flib/./any/aes128inv.fs	/^: ~mix-col (  ) $/;"	d
~mix-col	flib/any/aes128inv.fs	/^: ~mix-col (  ) $/;"	d
~mix1col	embello/flib/any/aes128inv.fs	/^: ~mix1col ( c )$/;"	d
~mix1col	flib/./any/aes128inv.fs	/^: ~mix1col ( c )$/;"	d
~mix1col	flib/any/aes128inv.fs	/^: ~mix1col ( c )$/;"	d
~one-round	embello/flib/any/aes128inv.fs	/^: ~one-round ( round )$/;"	d
~one-round	flib/./any/aes128inv.fs	/^: ~one-round ( round )$/;"	d
~one-round	flib/any/aes128inv.fs	/^: ~one-round ( round )$/;"	d
~s.b-all@	embello/flib/any/aes128inv.fs	/^: ~s.b-all@ scratch 16 0 do dup i + dup c@ ~s.b@ swap c! loop drop ;$/;"	d
~s.b-all@	flib/./any/aes128inv.fs	/^: ~s.b-all@ scratch 16 0 do dup i + dup c@ ~s.b@ swap c! loop drop ;$/;"	d
~s.b-all@	flib/any/aes128inv.fs	/^: ~s.b-all@ scratch 16 0 do dup i + dup c@ ~s.b@ swap c! loop drop ;$/;"	d
~s.b@	embello/flib/any/aes128inv.fs	/^: ~s.b@ ( b -- b ) dup $0F and swap 4 rshift $0F and 16 * + s.box.inv + c@ ;$/;"	d
~s.b@	flib/./any/aes128inv.fs	/^: ~s.b@ ( b -- b ) dup $0F and swap 4 rshift $0F and 16 * + s.box.inv + c@ ;$/;"	d
~s.b@	flib/any/aes128inv.fs	/^: ~s.b@ ( b -- b ) dup $0F and swap 4 rshift $0F and 16 * + s.box.inv + c@ ;$/;"	d
~sh-bytes	embello/flib/any/aes128inv.fs	/^: ~sh-bytes r1> r2> r3> ;$/;"	d
~sh-bytes	flib/./any/aes128inv.fs	/^: ~sh-bytes r1> r2> r3> ;$/;"	d
~sh-bytes	flib/any/aes128inv.fs	/^: ~sh-bytes r1> r2> r3> ;$/;"	d
